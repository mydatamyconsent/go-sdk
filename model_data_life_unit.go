/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"fmt"
)

// DataLifeUnit the model 'DataLifeUnit'
type DataLifeUnit string

// List of DataLifeUnit
const (
	MONTH DataLifeUnit = "Month"
	YEAR DataLifeUnit = "Year"
	DAY DataLifeUnit = "Day"
	FOREVER DataLifeUnit = "Forever"
)

var allowedDataLifeUnitEnumValues = []DataLifeUnit{
	"Month",
	"Year",
	"Day",
	"Forever",
}

func (v *DataLifeUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataLifeUnit(value)
	for _, existing := range allowedDataLifeUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataLifeUnit", value)
}

// NewDataLifeUnitFromValue returns a pointer to a valid DataLifeUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataLifeUnitFromValue(v string) (*DataLifeUnit, error) {
	ev := DataLifeUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataLifeUnit: valid values are %v", v, allowedDataLifeUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataLifeUnit) IsValid() bool {
	for _, existing := range allowedDataLifeUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataLifeUnit value
func (v DataLifeUnit) Ptr() *DataLifeUnit {
	return &v
}

type NullableDataLifeUnit struct {
	value *DataLifeUnit
	isSet bool
}

func (v NullableDataLifeUnit) Get() *DataLifeUnit {
	return v.value
}

func (v *NullableDataLifeUnit) Set(val *DataLifeUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLifeUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLifeUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLifeUnit(val *DataLifeUnit) *NullableDataLifeUnit {
	return &NullableDataLifeUnit{value: val, isSet: true}
}

func (v NullableDataLifeUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLifeUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

