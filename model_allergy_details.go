/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// AllergyDetails struct for AllergyDetails
type AllergyDetails struct {
	Id string `json:"id"`
	Name *CodeableConcept `json:"name,omitempty"`
	Category []string `json:"category"`
	LevelStatus *string `json:"level_status,omitempty"`
	Status *CodeableConcept `json:"status,omitempty"`
	ClinicalStatus *CodeableConcept `json:"clinical_status,omitempty"`
	Reactions []AllergyIntoleranceReaction `json:"reactions"`
	RecordedAtUtc *time.Time `json:"recorded_at_utc,omitempty"`
}

// NewAllergyDetails instantiates a new AllergyDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllergyDetails(id string, category []string, reactions []AllergyIntoleranceReaction) *AllergyDetails {
	this := AllergyDetails{}
	this.Id = id
	this.Category = category
	this.Reactions = reactions
	return &this
}

// NewAllergyDetailsWithDefaults instantiates a new AllergyDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllergyDetailsWithDefaults() *AllergyDetails {
	this := AllergyDetails{}
	return &this
}

// GetId returns the Id field value
func (o *AllergyDetails) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AllergyDetails) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AllergyDetails) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AllergyDetails) GetName() CodeableConcept {
	if o == nil || o.Name == nil {
		var ret CodeableConcept
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyDetails) GetNameOk() (*CodeableConcept, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AllergyDetails) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given CodeableConcept and assigns it to the Name field.
func (o *AllergyDetails) SetName(v CodeableConcept) {
	o.Name = &v
}

// GetCategory returns the Category field value
func (o *AllergyDetails) GetCategory() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *AllergyDetails) GetCategoryOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category, true
}

// SetCategory sets field value
func (o *AllergyDetails) SetCategory(v []string) {
	o.Category = v
}

// GetLevelStatus returns the LevelStatus field value if set, zero value otherwise.
func (o *AllergyDetails) GetLevelStatus() string {
	if o == nil || o.LevelStatus == nil {
		var ret string
		return ret
	}
	return *o.LevelStatus
}

// GetLevelStatusOk returns a tuple with the LevelStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyDetails) GetLevelStatusOk() (*string, bool) {
	if o == nil || o.LevelStatus == nil {
		return nil, false
	}
	return o.LevelStatus, true
}

// HasLevelStatus returns a boolean if a field has been set.
func (o *AllergyDetails) HasLevelStatus() bool {
	if o != nil && o.LevelStatus != nil {
		return true
	}

	return false
}

// SetLevelStatus gets a reference to the given string and assigns it to the LevelStatus field.
func (o *AllergyDetails) SetLevelStatus(v string) {
	o.LevelStatus = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AllergyDetails) GetStatus() CodeableConcept {
	if o == nil || o.Status == nil {
		var ret CodeableConcept
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyDetails) GetStatusOk() (*CodeableConcept, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AllergyDetails) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CodeableConcept and assigns it to the Status field.
func (o *AllergyDetails) SetStatus(v CodeableConcept) {
	o.Status = &v
}

// GetClinicalStatus returns the ClinicalStatus field value if set, zero value otherwise.
func (o *AllergyDetails) GetClinicalStatus() CodeableConcept {
	if o == nil || o.ClinicalStatus == nil {
		var ret CodeableConcept
		return ret
	}
	return *o.ClinicalStatus
}

// GetClinicalStatusOk returns a tuple with the ClinicalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyDetails) GetClinicalStatusOk() (*CodeableConcept, bool) {
	if o == nil || o.ClinicalStatus == nil {
		return nil, false
	}
	return o.ClinicalStatus, true
}

// HasClinicalStatus returns a boolean if a field has been set.
func (o *AllergyDetails) HasClinicalStatus() bool {
	if o != nil && o.ClinicalStatus != nil {
		return true
	}

	return false
}

// SetClinicalStatus gets a reference to the given CodeableConcept and assigns it to the ClinicalStatus field.
func (o *AllergyDetails) SetClinicalStatus(v CodeableConcept) {
	o.ClinicalStatus = &v
}

// GetReactions returns the Reactions field value
func (o *AllergyDetails) GetReactions() []AllergyIntoleranceReaction {
	if o == nil {
		var ret []AllergyIntoleranceReaction
		return ret
	}

	return o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value
// and a boolean to check if the value has been set.
func (o *AllergyDetails) GetReactionsOk() ([]AllergyIntoleranceReaction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reactions, true
}

// SetReactions sets field value
func (o *AllergyDetails) SetReactions(v []AllergyIntoleranceReaction) {
	o.Reactions = v
}

// GetRecordedAtUtc returns the RecordedAtUtc field value if set, zero value otherwise.
func (o *AllergyDetails) GetRecordedAtUtc() time.Time {
	if o == nil || o.RecordedAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.RecordedAtUtc
}

// GetRecordedAtUtcOk returns a tuple with the RecordedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyDetails) GetRecordedAtUtcOk() (*time.Time, bool) {
	if o == nil || o.RecordedAtUtc == nil {
		return nil, false
	}
	return o.RecordedAtUtc, true
}

// HasRecordedAtUtc returns a boolean if a field has been set.
func (o *AllergyDetails) HasRecordedAtUtc() bool {
	if o != nil && o.RecordedAtUtc != nil {
		return true
	}

	return false
}

// SetRecordedAtUtc gets a reference to the given time.Time and assigns it to the RecordedAtUtc field.
func (o *AllergyDetails) SetRecordedAtUtc(v time.Time) {
	o.RecordedAtUtc = &v
}

func (o AllergyDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["category"] = o.Category
	}
	if o.LevelStatus != nil {
		toSerialize["level_status"] = o.LevelStatus
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.ClinicalStatus != nil {
		toSerialize["clinical_status"] = o.ClinicalStatus
	}
	if true {
		toSerialize["reactions"] = o.Reactions
	}
	if o.RecordedAtUtc != nil {
		toSerialize["recorded_at_utc"] = o.RecordedAtUtc
	}
	return json.Marshal(toSerialize)
}

type NullableAllergyDetails struct {
	value *AllergyDetails
	isSet bool
}

func (v NullableAllergyDetails) Get() *AllergyDetails {
	return v.value
}

func (v *NullableAllergyDetails) Set(val *AllergyDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableAllergyDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableAllergyDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllergyDetails(val *AllergyDetails) *NullableAllergyDetails {
	return &NullableAllergyDetails{value: val, isSet: true}
}

func (v NullableAllergyDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllergyDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


