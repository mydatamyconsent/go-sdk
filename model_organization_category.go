/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"time"
)

// OrganizationCategory struct for OrganizationCategory
type OrganizationCategory struct {
	CreatedBy *string `json:"createdBy,omitempty"`
	CreatedAtUtc *time.Time `json:"createdAtUtc,omitempty"`
	UpdatedBy NullableString `json:"updatedBy,omitempty"`
	UpdatedAtUtc NullableTime `json:"updatedAtUtc,omitempty"`
	CreatedByUser *ApplicationUser `json:"createdByUser,omitempty"`
	UpdatedByUser *ApplicationUser `json:"updatedByUser,omitempty"`
	DeletedBy NullableString `json:"deletedBy,omitempty"`
	DeletedAtUtc NullableTime `json:"deletedAtUtc,omitempty"`
	DeletedByUser *ApplicationUser `json:"deletedByUser,omitempty"`
	Id *string `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	LogoUrl NullableString `json:"logoUrl,omitempty"`
	MetaData interface{} `json:"metaData,omitempty"`
}

// NewOrganizationCategory instantiates a new OrganizationCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationCategory() *OrganizationCategory {
	this := OrganizationCategory{}
	return &this
}

// NewOrganizationCategoryWithDefaults instantiates a new OrganizationCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationCategoryWithDefaults() *OrganizationCategory {
	this := OrganizationCategory{}
	return &this
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *OrganizationCategory) GetCreatedBy() string {
	if o == nil || o.CreatedBy == nil {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCategory) GetCreatedByOk() (*string, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *OrganizationCategory) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *OrganizationCategory) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedAtUtc returns the CreatedAtUtc field value if set, zero value otherwise.
func (o *OrganizationCategory) GetCreatedAtUtc() time.Time {
	if o == nil || o.CreatedAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAtUtc
}

// GetCreatedAtUtcOk returns a tuple with the CreatedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCategory) GetCreatedAtUtcOk() (*time.Time, bool) {
	if o == nil || o.CreatedAtUtc == nil {
		return nil, false
	}
	return o.CreatedAtUtc, true
}

// HasCreatedAtUtc returns a boolean if a field has been set.
func (o *OrganizationCategory) HasCreatedAtUtc() bool {
	if o != nil && o.CreatedAtUtc != nil {
		return true
	}

	return false
}

// SetCreatedAtUtc gets a reference to the given time.Time and assigns it to the CreatedAtUtc field.
func (o *OrganizationCategory) SetCreatedAtUtc(v time.Time) {
	o.CreatedAtUtc = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationCategory) GetUpdatedBy() string {
	if o == nil || o.UpdatedBy.Get() == nil {
		var ret string
		return ret
	}
	return *o.UpdatedBy.Get()
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationCategory) GetUpdatedByOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UpdatedBy.Get(), o.UpdatedBy.IsSet()
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *OrganizationCategory) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy.IsSet() {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given NullableString and assigns it to the UpdatedBy field.
func (o *OrganizationCategory) SetUpdatedBy(v string) {
	o.UpdatedBy.Set(&v)
}
// SetUpdatedByNil sets the value for UpdatedBy to be an explicit nil
func (o *OrganizationCategory) SetUpdatedByNil() {
	o.UpdatedBy.Set(nil)
}

// UnsetUpdatedBy ensures that no value is present for UpdatedBy, not even an explicit nil
func (o *OrganizationCategory) UnsetUpdatedBy() {
	o.UpdatedBy.Unset()
}

// GetUpdatedAtUtc returns the UpdatedAtUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationCategory) GetUpdatedAtUtc() time.Time {
	if o == nil || o.UpdatedAtUtc.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAtUtc.Get()
}

// GetUpdatedAtUtcOk returns a tuple with the UpdatedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationCategory) GetUpdatedAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UpdatedAtUtc.Get(), o.UpdatedAtUtc.IsSet()
}

// HasUpdatedAtUtc returns a boolean if a field has been set.
func (o *OrganizationCategory) HasUpdatedAtUtc() bool {
	if o != nil && o.UpdatedAtUtc.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAtUtc gets a reference to the given NullableTime and assigns it to the UpdatedAtUtc field.
func (o *OrganizationCategory) SetUpdatedAtUtc(v time.Time) {
	o.UpdatedAtUtc.Set(&v)
}
// SetUpdatedAtUtcNil sets the value for UpdatedAtUtc to be an explicit nil
func (o *OrganizationCategory) SetUpdatedAtUtcNil() {
	o.UpdatedAtUtc.Set(nil)
}

// UnsetUpdatedAtUtc ensures that no value is present for UpdatedAtUtc, not even an explicit nil
func (o *OrganizationCategory) UnsetUpdatedAtUtc() {
	o.UpdatedAtUtc.Unset()
}

// GetCreatedByUser returns the CreatedByUser field value if set, zero value otherwise.
func (o *OrganizationCategory) GetCreatedByUser() ApplicationUser {
	if o == nil || o.CreatedByUser == nil {
		var ret ApplicationUser
		return ret
	}
	return *o.CreatedByUser
}

// GetCreatedByUserOk returns a tuple with the CreatedByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCategory) GetCreatedByUserOk() (*ApplicationUser, bool) {
	if o == nil || o.CreatedByUser == nil {
		return nil, false
	}
	return o.CreatedByUser, true
}

// HasCreatedByUser returns a boolean if a field has been set.
func (o *OrganizationCategory) HasCreatedByUser() bool {
	if o != nil && o.CreatedByUser != nil {
		return true
	}

	return false
}

// SetCreatedByUser gets a reference to the given ApplicationUser and assigns it to the CreatedByUser field.
func (o *OrganizationCategory) SetCreatedByUser(v ApplicationUser) {
	o.CreatedByUser = &v
}

// GetUpdatedByUser returns the UpdatedByUser field value if set, zero value otherwise.
func (o *OrganizationCategory) GetUpdatedByUser() ApplicationUser {
	if o == nil || o.UpdatedByUser == nil {
		var ret ApplicationUser
		return ret
	}
	return *o.UpdatedByUser
}

// GetUpdatedByUserOk returns a tuple with the UpdatedByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCategory) GetUpdatedByUserOk() (*ApplicationUser, bool) {
	if o == nil || o.UpdatedByUser == nil {
		return nil, false
	}
	return o.UpdatedByUser, true
}

// HasUpdatedByUser returns a boolean if a field has been set.
func (o *OrganizationCategory) HasUpdatedByUser() bool {
	if o != nil && o.UpdatedByUser != nil {
		return true
	}

	return false
}

// SetUpdatedByUser gets a reference to the given ApplicationUser and assigns it to the UpdatedByUser field.
func (o *OrganizationCategory) SetUpdatedByUser(v ApplicationUser) {
	o.UpdatedByUser = &v
}

// GetDeletedBy returns the DeletedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationCategory) GetDeletedBy() string {
	if o == nil || o.DeletedBy.Get() == nil {
		var ret string
		return ret
	}
	return *o.DeletedBy.Get()
}

// GetDeletedByOk returns a tuple with the DeletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationCategory) GetDeletedByOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeletedBy.Get(), o.DeletedBy.IsSet()
}

// HasDeletedBy returns a boolean if a field has been set.
func (o *OrganizationCategory) HasDeletedBy() bool {
	if o != nil && o.DeletedBy.IsSet() {
		return true
	}

	return false
}

// SetDeletedBy gets a reference to the given NullableString and assigns it to the DeletedBy field.
func (o *OrganizationCategory) SetDeletedBy(v string) {
	o.DeletedBy.Set(&v)
}
// SetDeletedByNil sets the value for DeletedBy to be an explicit nil
func (o *OrganizationCategory) SetDeletedByNil() {
	o.DeletedBy.Set(nil)
}

// UnsetDeletedBy ensures that no value is present for DeletedBy, not even an explicit nil
func (o *OrganizationCategory) UnsetDeletedBy() {
	o.DeletedBy.Unset()
}

// GetDeletedAtUtc returns the DeletedAtUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationCategory) GetDeletedAtUtc() time.Time {
	if o == nil || o.DeletedAtUtc.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DeletedAtUtc.Get()
}

// GetDeletedAtUtcOk returns a tuple with the DeletedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationCategory) GetDeletedAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeletedAtUtc.Get(), o.DeletedAtUtc.IsSet()
}

// HasDeletedAtUtc returns a boolean if a field has been set.
func (o *OrganizationCategory) HasDeletedAtUtc() bool {
	if o != nil && o.DeletedAtUtc.IsSet() {
		return true
	}

	return false
}

// SetDeletedAtUtc gets a reference to the given NullableTime and assigns it to the DeletedAtUtc field.
func (o *OrganizationCategory) SetDeletedAtUtc(v time.Time) {
	o.DeletedAtUtc.Set(&v)
}
// SetDeletedAtUtcNil sets the value for DeletedAtUtc to be an explicit nil
func (o *OrganizationCategory) SetDeletedAtUtcNil() {
	o.DeletedAtUtc.Set(nil)
}

// UnsetDeletedAtUtc ensures that no value is present for DeletedAtUtc, not even an explicit nil
func (o *OrganizationCategory) UnsetDeletedAtUtc() {
	o.DeletedAtUtc.Unset()
}

// GetDeletedByUser returns the DeletedByUser field value if set, zero value otherwise.
func (o *OrganizationCategory) GetDeletedByUser() ApplicationUser {
	if o == nil || o.DeletedByUser == nil {
		var ret ApplicationUser
		return ret
	}
	return *o.DeletedByUser
}

// GetDeletedByUserOk returns a tuple with the DeletedByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCategory) GetDeletedByUserOk() (*ApplicationUser, bool) {
	if o == nil || o.DeletedByUser == nil {
		return nil, false
	}
	return o.DeletedByUser, true
}

// HasDeletedByUser returns a boolean if a field has been set.
func (o *OrganizationCategory) HasDeletedByUser() bool {
	if o != nil && o.DeletedByUser != nil {
		return true
	}

	return false
}

// SetDeletedByUser gets a reference to the given ApplicationUser and assigns it to the DeletedByUser field.
func (o *OrganizationCategory) SetDeletedByUser(v ApplicationUser) {
	o.DeletedByUser = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrganizationCategory) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationCategory) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrganizationCategory) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrganizationCategory) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationCategory) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationCategory) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *OrganizationCategory) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *OrganizationCategory) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *OrganizationCategory) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *OrganizationCategory) UnsetName() {
	o.Name.Unset()
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationCategory) GetLogoUrl() string {
	if o == nil || o.LogoUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.LogoUrl.Get()
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationCategory) GetLogoUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogoUrl.Get(), o.LogoUrl.IsSet()
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *OrganizationCategory) HasLogoUrl() bool {
	if o != nil && o.LogoUrl.IsSet() {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given NullableString and assigns it to the LogoUrl field.
func (o *OrganizationCategory) SetLogoUrl(v string) {
	o.LogoUrl.Set(&v)
}
// SetLogoUrlNil sets the value for LogoUrl to be an explicit nil
func (o *OrganizationCategory) SetLogoUrlNil() {
	o.LogoUrl.Set(nil)
}

// UnsetLogoUrl ensures that no value is present for LogoUrl, not even an explicit nil
func (o *OrganizationCategory) UnsetLogoUrl() {
	o.LogoUrl.Unset()
}

// GetMetaData returns the MetaData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationCategory) GetMetaData() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationCategory) GetMetaDataOk() (*interface{}, bool) {
	if o == nil || o.MetaData == nil {
		return nil, false
	}
	return &o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *OrganizationCategory) HasMetaData() bool {
	if o != nil && o.MetaData != nil {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given interface{} and assigns it to the MetaData field.
func (o *OrganizationCategory) SetMetaData(v interface{}) {
	o.MetaData = v
}

func (o OrganizationCategory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.CreatedAtUtc != nil {
		toSerialize["createdAtUtc"] = o.CreatedAtUtc
	}
	if o.UpdatedBy.IsSet() {
		toSerialize["updatedBy"] = o.UpdatedBy.Get()
	}
	if o.UpdatedAtUtc.IsSet() {
		toSerialize["updatedAtUtc"] = o.UpdatedAtUtc.Get()
	}
	if o.CreatedByUser != nil {
		toSerialize["createdByUser"] = o.CreatedByUser
	}
	if o.UpdatedByUser != nil {
		toSerialize["updatedByUser"] = o.UpdatedByUser
	}
	if o.DeletedBy.IsSet() {
		toSerialize["deletedBy"] = o.DeletedBy.Get()
	}
	if o.DeletedAtUtc.IsSet() {
		toSerialize["deletedAtUtc"] = o.DeletedAtUtc.Get()
	}
	if o.DeletedByUser != nil {
		toSerialize["deletedByUser"] = o.DeletedByUser
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.LogoUrl.IsSet() {
		toSerialize["logoUrl"] = o.LogoUrl.Get()
	}
	if o.MetaData != nil {
		toSerialize["metaData"] = o.MetaData
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationCategory struct {
	value *OrganizationCategory
	isSet bool
}

func (v NullableOrganizationCategory) Get() *OrganizationCategory {
	return v.value
}

func (v *NullableOrganizationCategory) Set(val *OrganizationCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationCategory(val *OrganizationCategory) *NullableOrganizationCategory {
	return &NullableOrganizationCategory{value: val, isSet: true}
}

func (v NullableOrganizationCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


