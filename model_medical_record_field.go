/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// MedicalRecordField MedicalRecordField : Medical record field of consent request template.
type MedicalRecordField struct {
	// Field title.
	FieldTitle string `json:"fieldTitle"`
	// Field slug.
	FieldSlug string `json:"fieldSlug"`
	// Field DRNs.
	Drns []string `json:"drns"`
}

// NewMedicalRecordField instantiates a new MedicalRecordField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedicalRecordField(fieldTitle string, fieldSlug string, drns []string) *MedicalRecordField {
	this := MedicalRecordField{}
	this.FieldTitle = fieldTitle
	this.FieldSlug = fieldSlug
	this.Drns = drns
	return &this
}

// NewMedicalRecordFieldWithDefaults instantiates a new MedicalRecordField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMedicalRecordFieldWithDefaults() *MedicalRecordField {
	this := MedicalRecordField{}
	return &this
}

// GetFieldTitle returns the FieldTitle field value
func (o *MedicalRecordField) GetFieldTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldTitle
}

// GetFieldTitleOk returns a tuple with the FieldTitle field value
// and a boolean to check if the value has been set.
func (o *MedicalRecordField) GetFieldTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldTitle, true
}

// SetFieldTitle sets field value
func (o *MedicalRecordField) SetFieldTitle(v string) {
	o.FieldTitle = v
}

// GetFieldSlug returns the FieldSlug field value
func (o *MedicalRecordField) GetFieldSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldSlug
}

// GetFieldSlugOk returns a tuple with the FieldSlug field value
// and a boolean to check if the value has been set.
func (o *MedicalRecordField) GetFieldSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldSlug, true
}

// SetFieldSlug sets field value
func (o *MedicalRecordField) SetFieldSlug(v string) {
	o.FieldSlug = v
}

// GetDrns returns the Drns field value
func (o *MedicalRecordField) GetDrns() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Drns
}

// GetDrnsOk returns a tuple with the Drns field value
// and a boolean to check if the value has been set.
func (o *MedicalRecordField) GetDrnsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Drns, true
}

// SetDrns sets field value
func (o *MedicalRecordField) SetDrns(v []string) {
	o.Drns = v
}

func (o MedicalRecordField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["fieldTitle"] = o.FieldTitle
	}
	if true {
		toSerialize["fieldSlug"] = o.FieldSlug
	}
	if true {
		toSerialize["drns"] = o.Drns
	}
	return json.Marshal(toSerialize)
}

type NullableMedicalRecordField struct {
	value *MedicalRecordField
	isSet bool
}

func (v NullableMedicalRecordField) Get() *MedicalRecordField {
	return v.value
}

func (v *NullableMedicalRecordField) Set(val *MedicalRecordField) {
	v.value = val
	v.isSet = true
}

func (v NullableMedicalRecordField) IsSet() bool {
	return v.isSet
}

func (v *NullableMedicalRecordField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedicalRecordField(val *MedicalRecordField) *NullableMedicalRecordField {
	return &NullableMedicalRecordField{value: val, isSet: true}
}

func (v NullableMedicalRecordField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedicalRecordField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


