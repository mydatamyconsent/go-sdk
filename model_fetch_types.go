/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"fmt"
)

// FetchTypes the model 'FetchTypes'
type FetchTypes string

// List of FetchTypes
const (
	ONETIME FetchTypes = "Onetime"
	PERIODIC FetchTypes = "Periodic"
)

var allowedFetchTypesEnumValues = []FetchTypes{
	"Onetime",
	"Periodic",
}

func (v *FetchTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FetchTypes(value)
	for _, existing := range allowedFetchTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FetchTypes", value)
}

// NewFetchTypesFromValue returns a pointer to a valid FetchTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFetchTypesFromValue(v string) (*FetchTypes, error) {
	ev := FetchTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FetchTypes: valid values are %v", v, allowedFetchTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FetchTypes) IsValid() bool {
	for _, existing := range allowedFetchTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FetchTypes value
func (v FetchTypes) Ptr() *FetchTypes {
	return &v
}

type NullableFetchTypes struct {
	value *FetchTypes
	isSet bool
}

func (v NullableFetchTypes) Get() *FetchTypes {
	return v.value
}

func (v *NullableFetchTypes) Set(val *FetchTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchTypes(val *FetchTypes) *NullableFetchTypes {
	return &NullableFetchTypes{value: val, isSet: true}
}

func (v NullableFetchTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

