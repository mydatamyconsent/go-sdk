/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// CollectibleTypes the model 'CollectibleTypes'
type CollectibleTypes string

// List of CollectibleTypes
const (
	PERSONAL_DETAILS CollectibleTypes = "PersonalDetails"
	DOCUMENTS CollectibleTypes = "Documents"
	FINANCIALS CollectibleTypes = "Financials"
	HEALTH CollectibleTypes = "Health"
)

// All allowed values of CollectibleTypes enum
var AllowedCollectibleTypesEnumValues = []CollectibleTypes{
	"PersonalDetails",
	"Documents",
	"Financials",
	"Health",
}

func (v *CollectibleTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CollectibleTypes(value)
	for _, existing := range AllowedCollectibleTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CollectibleTypes", value)
}

// NewCollectibleTypesFromValue returns a pointer to a valid CollectibleTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCollectibleTypesFromValue(v string) (*CollectibleTypes, error) {
	ev := CollectibleTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CollectibleTypes: valid values are %v", v, AllowedCollectibleTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CollectibleTypes) IsValid() bool {
	for _, existing := range AllowedCollectibleTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CollectibleTypes value
func (v CollectibleTypes) Ptr() *CollectibleTypes {
	return &v
}

type NullableCollectibleTypes struct {
	value *CollectibleTypes
	isSet bool
}

func (v NullableCollectibleTypes) Get() *CollectibleTypes {
	return v.value
}

func (v *NullableCollectibleTypes) Set(val *CollectibleTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectibleTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectibleTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectibleTypes(val *CollectibleTypes) *NullableCollectibleTypes {
	return &NullableCollectibleTypes{value: val, isSet: true}
}

func (v NullableCollectibleTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectibleTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

