/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// MutualFundSchemeType the model 'MutualFundSchemeType'
type MutualFundSchemeType string

// List of MutualFundSchemeType
const (
	EQUITY_SCHEMES MutualFundSchemeType = "EquitySchemes"
	DEBT_SCHEMES MutualFundSchemeType = "DebtSchemes"
	HYBRID_SCHEMES MutualFundSchemeType = "HybridSchemes"
	SOLUTION_ORIENTED_SCHEMES MutualFundSchemeType = "SolutionOrientedSchemes"
	OTHER_SCHEMES MutualFundSchemeType = "OtherSchemes"
)

// All allowed values of MutualFundSchemeType enum
var AllowedMutualFundSchemeTypeEnumValues = []MutualFundSchemeType{
	"EquitySchemes",
	"DebtSchemes",
	"HybridSchemes",
	"SolutionOrientedSchemes",
	"OtherSchemes",
}

func (v *MutualFundSchemeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MutualFundSchemeType(value)
	for _, existing := range AllowedMutualFundSchemeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MutualFundSchemeType", value)
}

// NewMutualFundSchemeTypeFromValue returns a pointer to a valid MutualFundSchemeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMutualFundSchemeTypeFromValue(v string) (*MutualFundSchemeType, error) {
	ev := MutualFundSchemeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MutualFundSchemeType: valid values are %v", v, AllowedMutualFundSchemeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MutualFundSchemeType) IsValid() bool {
	for _, existing := range AllowedMutualFundSchemeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MutualFundSchemeType value
func (v MutualFundSchemeType) Ptr() *MutualFundSchemeType {
	return &v
}

type NullableMutualFundSchemeType struct {
	value *MutualFundSchemeType
	isSet bool
}

func (v NullableMutualFundSchemeType) Get() *MutualFundSchemeType {
	return v.value
}

func (v *NullableMutualFundSchemeType) Set(val *MutualFundSchemeType) {
	v.value = val
	v.isSet = true
}

func (v NullableMutualFundSchemeType) IsSet() bool {
	return v.isSet
}

func (v *NullableMutualFundSchemeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutualFundSchemeType(val *MutualFundSchemeType) *NullableMutualFundSchemeType {
	return &NullableMutualFundSchemeType{value: val, isSet: true}
}

func (v NullableMutualFundSchemeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutualFundSchemeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

