/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// BankAccountType the model 'BankAccountType'
type BankAccountType string

// List of BankAccountType
const (
	SAVINGS_ACCOUNT BankAccountType = "SavingsAccount"
	CURRENT_ACCOUNT BankAccountType = "CurrentAccount"
)

// All allowed values of BankAccountType enum
var AllowedBankAccountTypeEnumValues = []BankAccountType{
	"SavingsAccount",
	"CurrentAccount",
}

func (v *BankAccountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BankAccountType(value)
	for _, existing := range AllowedBankAccountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BankAccountType", value)
}

// NewBankAccountTypeFromValue returns a pointer to a valid BankAccountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBankAccountTypeFromValue(v string) (*BankAccountType, error) {
	ev := BankAccountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BankAccountType: valid values are %v", v, AllowedBankAccountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BankAccountType) IsValid() bool {
	for _, existing := range AllowedBankAccountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BankAccountType value
func (v BankAccountType) Ptr() *BankAccountType {
	return &v
}

type NullableBankAccountType struct {
	value *BankAccountType
	isSet bool
}

func (v NullableBankAccountType) Get() *BankAccountType {
	return v.value
}

func (v *NullableBankAccountType) Set(val *BankAccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableBankAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableBankAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankAccountType(val *BankAccountType) *NullableBankAccountType {
	return &NullableBankAccountType{value: val, isSet: true}
}

func (v NullableBankAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

