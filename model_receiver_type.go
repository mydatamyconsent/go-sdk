/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"fmt"
)

// ReceiverType the model 'ReceiverType'
type ReceiverType string

// List of ReceiverType
const (
	INDIVIDUAL ReceiverType = "Individual"
	ORGANIZATION ReceiverType = "Organization"
)

var allowedReceiverTypeEnumValues = []ReceiverType{
	"Individual",
	"Organization",
}

func (v *ReceiverType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReceiverType(value)
	for _, existing := range allowedReceiverTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReceiverType", value)
}

// NewReceiverTypeFromValue returns a pointer to a valid ReceiverType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReceiverTypeFromValue(v string) (*ReceiverType, error) {
	ev := ReceiverType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReceiverType: valid values are %v", v, allowedReceiverTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReceiverType) IsValid() bool {
	for _, existing := range allowedReceiverTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReceiverType value
func (v ReceiverType) Ptr() *ReceiverType {
	return &v
}

type NullableReceiverType struct {
	value *ReceiverType
	isSet bool
}

func (v NullableReceiverType) Get() *ReceiverType {
	return v.value
}

func (v *NullableReceiverType) Set(val *ReceiverType) {
	v.value = val
	v.isSet = true
}

func (v NullableReceiverType) IsSet() bool {
	return v.isSet
}

func (v *NullableReceiverType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceiverType(val *ReceiverType) *NullableReceiverType {
	return &NullableReceiverType{value: val, isSet: true}
}

func (v NullableReceiverType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceiverType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

