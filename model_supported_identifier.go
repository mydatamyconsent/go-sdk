/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// SupportedIdentifier Supported identifier details for a particular country.
type SupportedIdentifier struct {
	// Country ISO 2 code. Example: IN, US, etc.
	Iso2 string `json:"iso2"`
	// Country name. Example: India, United States of America, etc.
	Name string `json:"name"`
	// List of supported identifiers for an individual.
	IndividualIdentifiers []Identifier `json:"individualIdentifiers"`
	// List of supported identifiers for an organization.
	OrganizationIdentifiers []Identifier `json:"organizationIdentifiers"`
}

// NewSupportedIdentifier instantiates a new SupportedIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedIdentifier(iso2 string, name string, individualIdentifiers []Identifier, organizationIdentifiers []Identifier) *SupportedIdentifier {
	this := SupportedIdentifier{}
	this.Iso2 = iso2
	this.Name = name
	this.IndividualIdentifiers = individualIdentifiers
	this.OrganizationIdentifiers = organizationIdentifiers
	return &this
}

// NewSupportedIdentifierWithDefaults instantiates a new SupportedIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedIdentifierWithDefaults() *SupportedIdentifier {
	this := SupportedIdentifier{}
	return &this
}

// GetIso2 returns the Iso2 field value
func (o *SupportedIdentifier) GetIso2() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Iso2
}

// GetIso2Ok returns a tuple with the Iso2 field value
// and a boolean to check if the value has been set.
func (o *SupportedIdentifier) GetIso2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Iso2, true
}

// SetIso2 sets field value
func (o *SupportedIdentifier) SetIso2(v string) {
	o.Iso2 = v
}

// GetName returns the Name field value
func (o *SupportedIdentifier) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SupportedIdentifier) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SupportedIdentifier) SetName(v string) {
	o.Name = v
}

// GetIndividualIdentifiers returns the IndividualIdentifiers field value
func (o *SupportedIdentifier) GetIndividualIdentifiers() []Identifier {
	if o == nil {
		var ret []Identifier
		return ret
	}

	return o.IndividualIdentifiers
}

// GetIndividualIdentifiersOk returns a tuple with the IndividualIdentifiers field value
// and a boolean to check if the value has been set.
func (o *SupportedIdentifier) GetIndividualIdentifiersOk() ([]Identifier, bool) {
	if o == nil {
		return nil, false
	}
	return o.IndividualIdentifiers, true
}

// SetIndividualIdentifiers sets field value
func (o *SupportedIdentifier) SetIndividualIdentifiers(v []Identifier) {
	o.IndividualIdentifiers = v
}

// GetOrganizationIdentifiers returns the OrganizationIdentifiers field value
func (o *SupportedIdentifier) GetOrganizationIdentifiers() []Identifier {
	if o == nil {
		var ret []Identifier
		return ret
	}

	return o.OrganizationIdentifiers
}

// GetOrganizationIdentifiersOk returns a tuple with the OrganizationIdentifiers field value
// and a boolean to check if the value has been set.
func (o *SupportedIdentifier) GetOrganizationIdentifiersOk() ([]Identifier, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationIdentifiers, true
}

// SetOrganizationIdentifiers sets field value
func (o *SupportedIdentifier) SetOrganizationIdentifiers(v []Identifier) {
	o.OrganizationIdentifiers = v
}

func (o SupportedIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["iso2"] = o.Iso2
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["individualIdentifiers"] = o.IndividualIdentifiers
	}
	if true {
		toSerialize["organizationIdentifiers"] = o.OrganizationIdentifiers
	}
	return json.Marshal(toSerialize)
}

type NullableSupportedIdentifier struct {
	value *SupportedIdentifier
	isSet bool
}

func (v NullableSupportedIdentifier) Get() *SupportedIdentifier {
	return v.value
}

func (v *NullableSupportedIdentifier) Set(val *SupportedIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedIdentifier(val *SupportedIdentifier) *NullableSupportedIdentifier {
	return &NullableSupportedIdentifier{value: val, isSet: true}
}

func (v NullableSupportedIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


