/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"fmt"
)

// Theme the model 'Theme'
type Theme string

// List of Theme
const (
	LIGHT Theme = "Light"
	DARK Theme = "Dark"
	SYSTEM Theme = "System"
)

var allowedThemeEnumValues = []Theme{
	"Light",
	"Dark",
	"System",
}

func (v *Theme) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Theme(value)
	for _, existing := range allowedThemeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Theme", value)
}

// NewThemeFromValue returns a pointer to a valid Theme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewThemeFromValue(v string) (*Theme, error) {
	ev := Theme(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Theme: valid values are %v", v, allowedThemeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Theme) IsValid() bool {
	for _, existing := range allowedThemeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Theme value
func (v Theme) Ptr() *Theme {
	return &v
}

type NullableTheme struct {
	value *Theme
	isSet bool
}

func (v NullableTheme) Get() *Theme {
	return v.value
}

func (v *NullableTheme) Set(val *Theme) {
	v.value = val
	v.isSet = true
}

func (v NullableTheme) IsSet() bool {
	return v.isSet
}

func (v *NullableTheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTheme(val *Theme) *NullableTheme {
	return &NullableTheme{value: val, isSet: true}
}

func (v NullableTheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

