/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"time"
)

// DataConsentRequestedDocument struct for DataConsentRequestedDocument
type DataConsentRequestedDocument struct {
	Drn NullableString `json:"drn,omitempty"`
	FromDatetime *time.Time `json:"fromDatetime,omitempty"`
	ToDatetime *time.Time `json:"toDatetime,omitempty"`
	ProviderId *string `json:"providerId,omitempty"`
	DocumentTypeId NullableString `json:"documentTypeId,omitempty"`
	DocumentIdentifier NullableString `json:"documentIdentifier,omitempty"`
}

// NewDataConsentRequestedDocument instantiates a new DataConsentRequestedDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataConsentRequestedDocument() *DataConsentRequestedDocument {
	this := DataConsentRequestedDocument{}
	return &this
}

// NewDataConsentRequestedDocumentWithDefaults instantiates a new DataConsentRequestedDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataConsentRequestedDocumentWithDefaults() *DataConsentRequestedDocument {
	this := DataConsentRequestedDocument{}
	return &this
}

// GetDrn returns the Drn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestedDocument) GetDrn() string {
	if o == nil || o.Drn.Get() == nil {
		var ret string
		return ret
	}
	return *o.Drn.Get()
}

// GetDrnOk returns a tuple with the Drn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestedDocument) GetDrnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Drn.Get(), o.Drn.IsSet()
}

// HasDrn returns a boolean if a field has been set.
func (o *DataConsentRequestedDocument) HasDrn() bool {
	if o != nil && o.Drn.IsSet() {
		return true
	}

	return false
}

// SetDrn gets a reference to the given NullableString and assigns it to the Drn field.
func (o *DataConsentRequestedDocument) SetDrn(v string) {
	o.Drn.Set(&v)
}
// SetDrnNil sets the value for Drn to be an explicit nil
func (o *DataConsentRequestedDocument) SetDrnNil() {
	o.Drn.Set(nil)
}

// UnsetDrn ensures that no value is present for Drn, not even an explicit nil
func (o *DataConsentRequestedDocument) UnsetDrn() {
	o.Drn.Unset()
}

// GetFromDatetime returns the FromDatetime field value if set, zero value otherwise.
func (o *DataConsentRequestedDocument) GetFromDatetime() time.Time {
	if o == nil || o.FromDatetime == nil {
		var ret time.Time
		return ret
	}
	return *o.FromDatetime
}

// GetFromDatetimeOk returns a tuple with the FromDatetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestedDocument) GetFromDatetimeOk() (*time.Time, bool) {
	if o == nil || o.FromDatetime == nil {
		return nil, false
	}
	return o.FromDatetime, true
}

// HasFromDatetime returns a boolean if a field has been set.
func (o *DataConsentRequestedDocument) HasFromDatetime() bool {
	if o != nil && o.FromDatetime != nil {
		return true
	}

	return false
}

// SetFromDatetime gets a reference to the given time.Time and assigns it to the FromDatetime field.
func (o *DataConsentRequestedDocument) SetFromDatetime(v time.Time) {
	o.FromDatetime = &v
}

// GetToDatetime returns the ToDatetime field value if set, zero value otherwise.
func (o *DataConsentRequestedDocument) GetToDatetime() time.Time {
	if o == nil || o.ToDatetime == nil {
		var ret time.Time
		return ret
	}
	return *o.ToDatetime
}

// GetToDatetimeOk returns a tuple with the ToDatetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestedDocument) GetToDatetimeOk() (*time.Time, bool) {
	if o == nil || o.ToDatetime == nil {
		return nil, false
	}
	return o.ToDatetime, true
}

// HasToDatetime returns a boolean if a field has been set.
func (o *DataConsentRequestedDocument) HasToDatetime() bool {
	if o != nil && o.ToDatetime != nil {
		return true
	}

	return false
}

// SetToDatetime gets a reference to the given time.Time and assigns it to the ToDatetime field.
func (o *DataConsentRequestedDocument) SetToDatetime(v time.Time) {
	o.ToDatetime = &v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *DataConsentRequestedDocument) GetProviderId() string {
	if o == nil || o.ProviderId == nil {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestedDocument) GetProviderIdOk() (*string, bool) {
	if o == nil || o.ProviderId == nil {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *DataConsentRequestedDocument) HasProviderId() bool {
	if o != nil && o.ProviderId != nil {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *DataConsentRequestedDocument) SetProviderId(v string) {
	o.ProviderId = &v
}

// GetDocumentTypeId returns the DocumentTypeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestedDocument) GetDocumentTypeId() string {
	if o == nil || o.DocumentTypeId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DocumentTypeId.Get()
}

// GetDocumentTypeIdOk returns a tuple with the DocumentTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestedDocument) GetDocumentTypeIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DocumentTypeId.Get(), o.DocumentTypeId.IsSet()
}

// HasDocumentTypeId returns a boolean if a field has been set.
func (o *DataConsentRequestedDocument) HasDocumentTypeId() bool {
	if o != nil && o.DocumentTypeId.IsSet() {
		return true
	}

	return false
}

// SetDocumentTypeId gets a reference to the given NullableString and assigns it to the DocumentTypeId field.
func (o *DataConsentRequestedDocument) SetDocumentTypeId(v string) {
	o.DocumentTypeId.Set(&v)
}
// SetDocumentTypeIdNil sets the value for DocumentTypeId to be an explicit nil
func (o *DataConsentRequestedDocument) SetDocumentTypeIdNil() {
	o.DocumentTypeId.Set(nil)
}

// UnsetDocumentTypeId ensures that no value is present for DocumentTypeId, not even an explicit nil
func (o *DataConsentRequestedDocument) UnsetDocumentTypeId() {
	o.DocumentTypeId.Unset()
}

// GetDocumentIdentifier returns the DocumentIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestedDocument) GetDocumentIdentifier() string {
	if o == nil || o.DocumentIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.DocumentIdentifier.Get()
}

// GetDocumentIdentifierOk returns a tuple with the DocumentIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestedDocument) GetDocumentIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DocumentIdentifier.Get(), o.DocumentIdentifier.IsSet()
}

// HasDocumentIdentifier returns a boolean if a field has been set.
func (o *DataConsentRequestedDocument) HasDocumentIdentifier() bool {
	if o != nil && o.DocumentIdentifier.IsSet() {
		return true
	}

	return false
}

// SetDocumentIdentifier gets a reference to the given NullableString and assigns it to the DocumentIdentifier field.
func (o *DataConsentRequestedDocument) SetDocumentIdentifier(v string) {
	o.DocumentIdentifier.Set(&v)
}
// SetDocumentIdentifierNil sets the value for DocumentIdentifier to be an explicit nil
func (o *DataConsentRequestedDocument) SetDocumentIdentifierNil() {
	o.DocumentIdentifier.Set(nil)
}

// UnsetDocumentIdentifier ensures that no value is present for DocumentIdentifier, not even an explicit nil
func (o *DataConsentRequestedDocument) UnsetDocumentIdentifier() {
	o.DocumentIdentifier.Unset()
}

func (o DataConsentRequestedDocument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Drn.IsSet() {
		toSerialize["drn"] = o.Drn.Get()
	}
	if o.FromDatetime != nil {
		toSerialize["fromDatetime"] = o.FromDatetime
	}
	if o.ToDatetime != nil {
		toSerialize["toDatetime"] = o.ToDatetime
	}
	if o.ProviderId != nil {
		toSerialize["providerId"] = o.ProviderId
	}
	if o.DocumentTypeId.IsSet() {
		toSerialize["documentTypeId"] = o.DocumentTypeId.Get()
	}
	if o.DocumentIdentifier.IsSet() {
		toSerialize["documentIdentifier"] = o.DocumentIdentifier.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDataConsentRequestedDocument struct {
	value *DataConsentRequestedDocument
	isSet bool
}

func (v NullableDataConsentRequestedDocument) Get() *DataConsentRequestedDocument {
	return v.value
}

func (v *NullableDataConsentRequestedDocument) Set(val *DataConsentRequestedDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableDataConsentRequestedDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableDataConsentRequestedDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataConsentRequestedDocument(val *DataConsentRequestedDocument) *NullableDataConsentRequestedDocument {
	return &NullableDataConsentRequestedDocument{value: val, isSet: true}
}

func (v NullableDataConsentRequestedDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataConsentRequestedDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


