/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// FinancialAccountCategoryType the model 'FinancialAccountCategoryType'
type FinancialAccountCategoryType string

// List of FinancialAccountCategoryType
const (
	SAVINGS FinancialAccountCategoryType = "Savings"
	INSURANCE FinancialAccountCategoryType = "Insurance"
	LOAN FinancialAccountCategoryType = "Loan"
	CREDIT_CARD FinancialAccountCategoryType = "CreditCard"
	BILL FinancialAccountCategoryType = "Bill"
	INVESTMENT FinancialAccountCategoryType = "Investment"
	REWARD FinancialAccountCategoryType = "Reward"
)

// All allowed values of FinancialAccountCategoryType enum
var AllowedFinancialAccountCategoryTypeEnumValues = []FinancialAccountCategoryType{
	"Savings",
	"Insurance",
	"Loan",
	"CreditCard",
	"Bill",
	"Investment",
	"Reward",
}

func (v *FinancialAccountCategoryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FinancialAccountCategoryType(value)
	for _, existing := range AllowedFinancialAccountCategoryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FinancialAccountCategoryType", value)
}

// NewFinancialAccountCategoryTypeFromValue returns a pointer to a valid FinancialAccountCategoryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFinancialAccountCategoryTypeFromValue(v string) (*FinancialAccountCategoryType, error) {
	ev := FinancialAccountCategoryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FinancialAccountCategoryType: valid values are %v", v, AllowedFinancialAccountCategoryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FinancialAccountCategoryType) IsValid() bool {
	for _, existing := range AllowedFinancialAccountCategoryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FinancialAccountCategoryType value
func (v FinancialAccountCategoryType) Ptr() *FinancialAccountCategoryType {
	return &v
}

type NullableFinancialAccountCategoryType struct {
	value *FinancialAccountCategoryType
	isSet bool
}

func (v NullableFinancialAccountCategoryType) Get() *FinancialAccountCategoryType {
	return v.value
}

func (v *NullableFinancialAccountCategoryType) Set(val *FinancialAccountCategoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialAccountCategoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialAccountCategoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialAccountCategoryType(val *FinancialAccountCategoryType) *NullableFinancialAccountCategoryType {
	return &NullableFinancialAccountCategoryType{value: val, isSet: true}
}

func (v NullableFinancialAccountCategoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialAccountCategoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

