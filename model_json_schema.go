/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
)

// JsonSchema struct for JsonSchema
type JsonSchema struct {
	Keywords []map[string]interface{} `json:"keywords,omitempty"`
	OtherData map[string]interface{} `json:"otherData,omitempty"`
}

// NewJsonSchema instantiates a new JsonSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonSchema() *JsonSchema {
	this := JsonSchema{}
	return &this
}

// NewJsonSchemaWithDefaults instantiates a new JsonSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonSchemaWithDefaults() *JsonSchema {
	this := JsonSchema{}
	return &this
}

// GetKeywords returns the Keywords field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JsonSchema) GetKeywords() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JsonSchema) GetKeywordsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Keywords == nil {
		return nil, false
	}
	return &o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *JsonSchema) HasKeywords() bool {
	if o != nil && o.Keywords != nil {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given []map[string]interface{} and assigns it to the Keywords field.
func (o *JsonSchema) SetKeywords(v []map[string]interface{}) {
	o.Keywords = v
}

// GetOtherData returns the OtherData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JsonSchema) GetOtherData() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.OtherData
}

// GetOtherDataOk returns a tuple with the OtherData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JsonSchema) GetOtherDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.OtherData == nil {
		return nil, false
	}
	return &o.OtherData, true
}

// HasOtherData returns a boolean if a field has been set.
func (o *JsonSchema) HasOtherData() bool {
	if o != nil && o.OtherData != nil {
		return true
	}

	return false
}

// SetOtherData gets a reference to the given map[string]interface{} and assigns it to the OtherData field.
func (o *JsonSchema) SetOtherData(v map[string]interface{}) {
	o.OtherData = v
}

func (o JsonSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Keywords != nil {
		toSerialize["keywords"] = o.Keywords
	}
	if o.OtherData != nil {
		toSerialize["otherData"] = o.OtherData
	}
	return json.Marshal(toSerialize)
}

type NullableJsonSchema struct {
	value *JsonSchema
	isSet bool
}

func (v NullableJsonSchema) Get() *JsonSchema {
	return v.value
}

func (v *NullableJsonSchema) Set(val *JsonSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonSchema(val *JsonSchema) *NullableJsonSchema {
	return &NullableJsonSchema{value: val, isSet: true}
}

func (v NullableJsonSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


