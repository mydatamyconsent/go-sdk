/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/go-sdk

import (
	"encoding/json"
)

// OrganizationDocumentDetailsDto struct for OrganizationDocumentDetailsDto
type OrganizationDocumentDetailsDto struct {
	Id *string `json:"id,omitempty"`
	OrganizationId *string `json:"organizationId,omitempty"`
	OrganizationName NullableString `json:"organizationName,omitempty"`
	TypeId *string `json:"typeId,omitempty"`
	TypeName NullableString `json:"typeName,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Identifier NullableString `json:"identifier,omitempty"`
	StorageUrl NullableString `json:"storageUrl,omitempty"`
	CountryIso2 NullableString `json:"countryIso2,omitempty"`
	IssuerId *string `json:"issuerId,omitempty"`
	IssuerName NullableString `json:"issuerName,omitempty"`
}

// NewOrganizationDocumentDetailsDto instantiates a new OrganizationDocumentDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationDocumentDetailsDto() *OrganizationDocumentDetailsDto {
	this := OrganizationDocumentDetailsDto{}
	return &this
}

// NewOrganizationDocumentDetailsDtoWithDefaults instantiates a new OrganizationDocumentDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationDocumentDetailsDtoWithDefaults() *OrganizationDocumentDetailsDto {
	this := OrganizationDocumentDetailsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrganizationDocumentDetailsDto) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationDocumentDetailsDto) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrganizationDocumentDetailsDto) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrganizationDocumentDetailsDto) SetId(v string) {
	o.Id = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *OrganizationDocumentDetailsDto) GetOrganizationId() string {
	if o == nil || o.OrganizationId == nil {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationDocumentDetailsDto) GetOrganizationIdOk() (*string, bool) {
	if o == nil || o.OrganizationId == nil {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *OrganizationDocumentDetailsDto) HasOrganizationId() bool {
	if o != nil && o.OrganizationId != nil {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *OrganizationDocumentDetailsDto) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetOrganizationName returns the OrganizationName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationDocumentDetailsDto) GetOrganizationName() string {
	if o == nil || o.OrganizationName.Get() == nil {
		var ret string
		return ret
	}
	return *o.OrganizationName.Get()
}

// GetOrganizationNameOk returns a tuple with the OrganizationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationDocumentDetailsDto) GetOrganizationNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OrganizationName.Get(), o.OrganizationName.IsSet()
}

// HasOrganizationName returns a boolean if a field has been set.
func (o *OrganizationDocumentDetailsDto) HasOrganizationName() bool {
	if o != nil && o.OrganizationName.IsSet() {
		return true
	}

	return false
}

// SetOrganizationName gets a reference to the given NullableString and assigns it to the OrganizationName field.
func (o *OrganizationDocumentDetailsDto) SetOrganizationName(v string) {
	o.OrganizationName.Set(&v)
}
// SetOrganizationNameNil sets the value for OrganizationName to be an explicit nil
func (o *OrganizationDocumentDetailsDto) SetOrganizationNameNil() {
	o.OrganizationName.Set(nil)
}

// UnsetOrganizationName ensures that no value is present for OrganizationName, not even an explicit nil
func (o *OrganizationDocumentDetailsDto) UnsetOrganizationName() {
	o.OrganizationName.Unset()
}

// GetTypeId returns the TypeId field value if set, zero value otherwise.
func (o *OrganizationDocumentDetailsDto) GetTypeId() string {
	if o == nil || o.TypeId == nil {
		var ret string
		return ret
	}
	return *o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationDocumentDetailsDto) GetTypeIdOk() (*string, bool) {
	if o == nil || o.TypeId == nil {
		return nil, false
	}
	return o.TypeId, true
}

// HasTypeId returns a boolean if a field has been set.
func (o *OrganizationDocumentDetailsDto) HasTypeId() bool {
	if o != nil && o.TypeId != nil {
		return true
	}

	return false
}

// SetTypeId gets a reference to the given string and assigns it to the TypeId field.
func (o *OrganizationDocumentDetailsDto) SetTypeId(v string) {
	o.TypeId = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationDocumentDetailsDto) GetTypeName() string {
	if o == nil || o.TypeName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TypeName.Get()
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationDocumentDetailsDto) GetTypeNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TypeName.Get(), o.TypeName.IsSet()
}

// HasTypeName returns a boolean if a field has been set.
func (o *OrganizationDocumentDetailsDto) HasTypeName() bool {
	if o != nil && o.TypeName.IsSet() {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given NullableString and assigns it to the TypeName field.
func (o *OrganizationDocumentDetailsDto) SetTypeName(v string) {
	o.TypeName.Set(&v)
}
// SetTypeNameNil sets the value for TypeName to be an explicit nil
func (o *OrganizationDocumentDetailsDto) SetTypeNameNil() {
	o.TypeName.Set(nil)
}

// UnsetTypeName ensures that no value is present for TypeName, not even an explicit nil
func (o *OrganizationDocumentDetailsDto) UnsetTypeName() {
	o.TypeName.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationDocumentDetailsDto) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationDocumentDetailsDto) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *OrganizationDocumentDetailsDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *OrganizationDocumentDetailsDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *OrganizationDocumentDetailsDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *OrganizationDocumentDetailsDto) UnsetName() {
	o.Name.Unset()
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationDocumentDetailsDto) GetIdentifier() string {
	if o == nil || o.Identifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.Identifier.Get()
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationDocumentDetailsDto) GetIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Identifier.Get(), o.Identifier.IsSet()
}

// HasIdentifier returns a boolean if a field has been set.
func (o *OrganizationDocumentDetailsDto) HasIdentifier() bool {
	if o != nil && o.Identifier.IsSet() {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given NullableString and assigns it to the Identifier field.
func (o *OrganizationDocumentDetailsDto) SetIdentifier(v string) {
	o.Identifier.Set(&v)
}
// SetIdentifierNil sets the value for Identifier to be an explicit nil
func (o *OrganizationDocumentDetailsDto) SetIdentifierNil() {
	o.Identifier.Set(nil)
}

// UnsetIdentifier ensures that no value is present for Identifier, not even an explicit nil
func (o *OrganizationDocumentDetailsDto) UnsetIdentifier() {
	o.Identifier.Unset()
}

// GetStorageUrl returns the StorageUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationDocumentDetailsDto) GetStorageUrl() string {
	if o == nil || o.StorageUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageUrl.Get()
}

// GetStorageUrlOk returns a tuple with the StorageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationDocumentDetailsDto) GetStorageUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageUrl.Get(), o.StorageUrl.IsSet()
}

// HasStorageUrl returns a boolean if a field has been set.
func (o *OrganizationDocumentDetailsDto) HasStorageUrl() bool {
	if o != nil && o.StorageUrl.IsSet() {
		return true
	}

	return false
}

// SetStorageUrl gets a reference to the given NullableString and assigns it to the StorageUrl field.
func (o *OrganizationDocumentDetailsDto) SetStorageUrl(v string) {
	o.StorageUrl.Set(&v)
}
// SetStorageUrlNil sets the value for StorageUrl to be an explicit nil
func (o *OrganizationDocumentDetailsDto) SetStorageUrlNil() {
	o.StorageUrl.Set(nil)
}

// UnsetStorageUrl ensures that no value is present for StorageUrl, not even an explicit nil
func (o *OrganizationDocumentDetailsDto) UnsetStorageUrl() {
	o.StorageUrl.Unset()
}

// GetCountryIso2 returns the CountryIso2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationDocumentDetailsDto) GetCountryIso2() string {
	if o == nil || o.CountryIso2.Get() == nil {
		var ret string
		return ret
	}
	return *o.CountryIso2.Get()
}

// GetCountryIso2Ok returns a tuple with the CountryIso2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationDocumentDetailsDto) GetCountryIso2Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CountryIso2.Get(), o.CountryIso2.IsSet()
}

// HasCountryIso2 returns a boolean if a field has been set.
func (o *OrganizationDocumentDetailsDto) HasCountryIso2() bool {
	if o != nil && o.CountryIso2.IsSet() {
		return true
	}

	return false
}

// SetCountryIso2 gets a reference to the given NullableString and assigns it to the CountryIso2 field.
func (o *OrganizationDocumentDetailsDto) SetCountryIso2(v string) {
	o.CountryIso2.Set(&v)
}
// SetCountryIso2Nil sets the value for CountryIso2 to be an explicit nil
func (o *OrganizationDocumentDetailsDto) SetCountryIso2Nil() {
	o.CountryIso2.Set(nil)
}

// UnsetCountryIso2 ensures that no value is present for CountryIso2, not even an explicit nil
func (o *OrganizationDocumentDetailsDto) UnsetCountryIso2() {
	o.CountryIso2.Unset()
}

// GetIssuerId returns the IssuerId field value if set, zero value otherwise.
func (o *OrganizationDocumentDetailsDto) GetIssuerId() string {
	if o == nil || o.IssuerId == nil {
		var ret string
		return ret
	}
	return *o.IssuerId
}

// GetIssuerIdOk returns a tuple with the IssuerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationDocumentDetailsDto) GetIssuerIdOk() (*string, bool) {
	if o == nil || o.IssuerId == nil {
		return nil, false
	}
	return o.IssuerId, true
}

// HasIssuerId returns a boolean if a field has been set.
func (o *OrganizationDocumentDetailsDto) HasIssuerId() bool {
	if o != nil && o.IssuerId != nil {
		return true
	}

	return false
}

// SetIssuerId gets a reference to the given string and assigns it to the IssuerId field.
func (o *OrganizationDocumentDetailsDto) SetIssuerId(v string) {
	o.IssuerId = &v
}

// GetIssuerName returns the IssuerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationDocumentDetailsDto) GetIssuerName() string {
	if o == nil || o.IssuerName.Get() == nil {
		var ret string
		return ret
	}
	return *o.IssuerName.Get()
}

// GetIssuerNameOk returns a tuple with the IssuerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationDocumentDetailsDto) GetIssuerNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IssuerName.Get(), o.IssuerName.IsSet()
}

// HasIssuerName returns a boolean if a field has been set.
func (o *OrganizationDocumentDetailsDto) HasIssuerName() bool {
	if o != nil && o.IssuerName.IsSet() {
		return true
	}

	return false
}

// SetIssuerName gets a reference to the given NullableString and assigns it to the IssuerName field.
func (o *OrganizationDocumentDetailsDto) SetIssuerName(v string) {
	o.IssuerName.Set(&v)
}
// SetIssuerNameNil sets the value for IssuerName to be an explicit nil
func (o *OrganizationDocumentDetailsDto) SetIssuerNameNil() {
	o.IssuerName.Set(nil)
}

// UnsetIssuerName ensures that no value is present for IssuerName, not even an explicit nil
func (o *OrganizationDocumentDetailsDto) UnsetIssuerName() {
	o.IssuerName.Unset()
}

func (o OrganizationDocumentDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.OrganizationId != nil {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if o.OrganizationName.IsSet() {
		toSerialize["organizationName"] = o.OrganizationName.Get()
	}
	if o.TypeId != nil {
		toSerialize["typeId"] = o.TypeId
	}
	if o.TypeName.IsSet() {
		toSerialize["typeName"] = o.TypeName.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Identifier.IsSet() {
		toSerialize["identifier"] = o.Identifier.Get()
	}
	if o.StorageUrl.IsSet() {
		toSerialize["storageUrl"] = o.StorageUrl.Get()
	}
	if o.CountryIso2.IsSet() {
		toSerialize["countryIso2"] = o.CountryIso2.Get()
	}
	if o.IssuerId != nil {
		toSerialize["issuerId"] = o.IssuerId
	}
	if o.IssuerName.IsSet() {
		toSerialize["issuerName"] = o.IssuerName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationDocumentDetailsDto struct {
	value *OrganizationDocumentDetailsDto
	isSet bool
}

func (v NullableOrganizationDocumentDetailsDto) Get() *OrganizationDocumentDetailsDto {
	return v.value
}

func (v *NullableOrganizationDocumentDetailsDto) Set(val *OrganizationDocumentDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationDocumentDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationDocumentDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationDocumentDetailsDto(val *OrganizationDocumentDetailsDto) *NullableOrganizationDocumentDetailsDto {
	return &NullableOrganizationDocumentDetailsDto{value: val, isSet: true}
}

func (v NullableOrganizationDocumentDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationDocumentDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


