/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// FinancialAccountNps struct for FinancialAccountNps
type FinancialAccountNps struct {
	Type string `json:"type"`
	Id string `json:"id"`
	Name string `json:"name"`
	Identifier string `json:"identifier"`
	Amount float64 `json:"amount"`
}

// NewFinancialAccountNps instantiates a new FinancialAccountNps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancialAccountNps(type_ string, id string, name string, identifier string, amount float64) *FinancialAccountNps {
	this := FinancialAccountNps{}
	this.Type = type_
	this.Id = id
	this.Name = name
	this.Identifier = identifier
	this.Amount = amount
	return &this
}

// NewFinancialAccountNpsWithDefaults instantiates a new FinancialAccountNps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialAccountNpsWithDefaults() *FinancialAccountNps {
	this := FinancialAccountNps{}
	return &this
}

// GetType returns the Type field value
func (o *FinancialAccountNps) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FinancialAccountNps) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FinancialAccountNps) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value
func (o *FinancialAccountNps) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FinancialAccountNps) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FinancialAccountNps) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *FinancialAccountNps) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FinancialAccountNps) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FinancialAccountNps) SetName(v string) {
	o.Name = v
}

// GetIdentifier returns the Identifier field value
func (o *FinancialAccountNps) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *FinancialAccountNps) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *FinancialAccountNps) SetIdentifier(v string) {
	o.Identifier = v
}

// GetAmount returns the Amount field value
func (o *FinancialAccountNps) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *FinancialAccountNps) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *FinancialAccountNps) SetAmount(v float64) {
	o.Amount = v
}

func (o FinancialAccountNps) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	return json.Marshal(toSerialize)
}

type NullableFinancialAccountNps struct {
	value *FinancialAccountNps
	isSet bool
}

func (v NullableFinancialAccountNps) Get() *FinancialAccountNps {
	return v.value
}

func (v *NullableFinancialAccountNps) Set(val *FinancialAccountNps) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialAccountNps) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialAccountNps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialAccountNps(val *FinancialAccountNps) *NullableFinancialAccountNps {
	return &NullableFinancialAccountNps{value: val, isSet: true}
}

func (v NullableFinancialAccountNps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialAccountNps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


