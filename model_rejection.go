/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"time"
)

// Rejection struct for Rejection
type Rejection struct {
	Reason NullableString `json:"reason,omitempty"`
	RejectedBy *string `json:"rejectedBy,omitempty"`
	RejectedAtUtc *time.Time `json:"rejectedAtUtc,omitempty"`
}

// NewRejection instantiates a new Rejection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRejection() *Rejection {
	this := Rejection{}
	return &this
}

// NewRejectionWithDefaults instantiates a new Rejection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRejectionWithDefaults() *Rejection {
	this := Rejection{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rejection) GetReason() string {
	if o == nil || o.Reason.Get() == nil {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rejection) GetReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *Rejection) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *Rejection) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *Rejection) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *Rejection) UnsetReason() {
	o.Reason.Unset()
}

// GetRejectedBy returns the RejectedBy field value if set, zero value otherwise.
func (o *Rejection) GetRejectedBy() string {
	if o == nil || o.RejectedBy == nil {
		var ret string
		return ret
	}
	return *o.RejectedBy
}

// GetRejectedByOk returns a tuple with the RejectedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rejection) GetRejectedByOk() (*string, bool) {
	if o == nil || o.RejectedBy == nil {
		return nil, false
	}
	return o.RejectedBy, true
}

// HasRejectedBy returns a boolean if a field has been set.
func (o *Rejection) HasRejectedBy() bool {
	if o != nil && o.RejectedBy != nil {
		return true
	}

	return false
}

// SetRejectedBy gets a reference to the given string and assigns it to the RejectedBy field.
func (o *Rejection) SetRejectedBy(v string) {
	o.RejectedBy = &v
}

// GetRejectedAtUtc returns the RejectedAtUtc field value if set, zero value otherwise.
func (o *Rejection) GetRejectedAtUtc() time.Time {
	if o == nil || o.RejectedAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.RejectedAtUtc
}

// GetRejectedAtUtcOk returns a tuple with the RejectedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rejection) GetRejectedAtUtcOk() (*time.Time, bool) {
	if o == nil || o.RejectedAtUtc == nil {
		return nil, false
	}
	return o.RejectedAtUtc, true
}

// HasRejectedAtUtc returns a boolean if a field has been set.
func (o *Rejection) HasRejectedAtUtc() bool {
	if o != nil && o.RejectedAtUtc != nil {
		return true
	}

	return false
}

// SetRejectedAtUtc gets a reference to the given time.Time and assigns it to the RejectedAtUtc field.
func (o *Rejection) SetRejectedAtUtc(v time.Time) {
	o.RejectedAtUtc = &v
}

func (o Rejection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	if o.RejectedBy != nil {
		toSerialize["rejectedBy"] = o.RejectedBy
	}
	if o.RejectedAtUtc != nil {
		toSerialize["rejectedAtUtc"] = o.RejectedAtUtc
	}
	return json.Marshal(toSerialize)
}

type NullableRejection struct {
	value *Rejection
	isSet bool
}

func (v NullableRejection) Get() *Rejection {
	return v.value
}

func (v *NullableRejection) Set(val *Rejection) {
	v.value = val
	v.isSet = true
}

func (v NullableRejection) IsSet() bool {
	return v.isSet
}

func (v *NullableRejection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRejection(val *Rejection) *NullableRejection {
	return &NullableRejection{value: val, isSet: true}
}

func (v NullableRejection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRejection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


