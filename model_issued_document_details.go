/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// IssuedDocumentDetails struct for IssuedDocumentDetails
type IssuedDocumentDetails struct {
	// Document Id.
	Id string `json:"id"`
	// Document Identifier.
	Identifier string `json:"identifier"`
	// Document type name.
	DocumentType string `json:"documentType"`
	// User name.
	IssuedTo string `json:"issuedTo"`
	// Issued datetime in UTC timezone.
	IssuedAtUtc time.Time `json:"issuedAtUtc"`
	// Expires datetime in UTC timezone.
	ExpiresAtUtc NullableTime `json:"expiresAtUtc,omitempty"`
	// Accepted datetime in UTC timezone.
	AcceptedAtUtc NullableTime `json:"acceptedAtUtc,omitempty"`
	Receiver DocumentReceiver `json:"receiver"`
	// Metadata.
	Metadata map[string]string `json:"metadata,omitempty"`
	// Digital signatures.
	DigitalSignatures []DocumentDigitalSignature `json:"digitalSignatures"`
}

// NewIssuedDocumentDetails instantiates a new IssuedDocumentDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuedDocumentDetails(id string, identifier string, documentType string, issuedTo string, issuedAtUtc time.Time, receiver DocumentReceiver, digitalSignatures []DocumentDigitalSignature) *IssuedDocumentDetails {
	this := IssuedDocumentDetails{}
	this.Id = id
	this.Identifier = identifier
	this.DocumentType = documentType
	this.IssuedTo = issuedTo
	this.IssuedAtUtc = issuedAtUtc
	this.Receiver = receiver
	this.DigitalSignatures = digitalSignatures
	return &this
}

// NewIssuedDocumentDetailsWithDefaults instantiates a new IssuedDocumentDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuedDocumentDetailsWithDefaults() *IssuedDocumentDetails {
	this := IssuedDocumentDetails{}
	return &this
}

// GetId returns the Id field value
func (o *IssuedDocumentDetails) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IssuedDocumentDetails) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IssuedDocumentDetails) SetId(v string) {
	o.Id = v
}

// GetIdentifier returns the Identifier field value
func (o *IssuedDocumentDetails) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *IssuedDocumentDetails) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *IssuedDocumentDetails) SetIdentifier(v string) {
	o.Identifier = v
}

// GetDocumentType returns the DocumentType field value
func (o *IssuedDocumentDetails) GetDocumentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value
// and a boolean to check if the value has been set.
func (o *IssuedDocumentDetails) GetDocumentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentType, true
}

// SetDocumentType sets field value
func (o *IssuedDocumentDetails) SetDocumentType(v string) {
	o.DocumentType = v
}

// GetIssuedTo returns the IssuedTo field value
func (o *IssuedDocumentDetails) GetIssuedTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuedTo
}

// GetIssuedToOk returns a tuple with the IssuedTo field value
// and a boolean to check if the value has been set.
func (o *IssuedDocumentDetails) GetIssuedToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuedTo, true
}

// SetIssuedTo sets field value
func (o *IssuedDocumentDetails) SetIssuedTo(v string) {
	o.IssuedTo = v
}

// GetIssuedAtUtc returns the IssuedAtUtc field value
func (o *IssuedDocumentDetails) GetIssuedAtUtc() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IssuedAtUtc
}

// GetIssuedAtUtcOk returns a tuple with the IssuedAtUtc field value
// and a boolean to check if the value has been set.
func (o *IssuedDocumentDetails) GetIssuedAtUtcOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuedAtUtc, true
}

// SetIssuedAtUtc sets field value
func (o *IssuedDocumentDetails) SetIssuedAtUtc(v time.Time) {
	o.IssuedAtUtc = v
}

// GetExpiresAtUtc returns the ExpiresAtUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocumentDetails) GetExpiresAtUtc() time.Time {
	if o == nil || o.ExpiresAtUtc.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAtUtc.Get()
}

// GetExpiresAtUtcOk returns a tuple with the ExpiresAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocumentDetails) GetExpiresAtUtcOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAtUtc.Get(), o.ExpiresAtUtc.IsSet()
}

// HasExpiresAtUtc returns a boolean if a field has been set.
func (o *IssuedDocumentDetails) HasExpiresAtUtc() bool {
	if o != nil && o.ExpiresAtUtc.IsSet() {
		return true
	}

	return false
}

// SetExpiresAtUtc gets a reference to the given NullableTime and assigns it to the ExpiresAtUtc field.
func (o *IssuedDocumentDetails) SetExpiresAtUtc(v time.Time) {
	o.ExpiresAtUtc.Set(&v)
}
// SetExpiresAtUtcNil sets the value for ExpiresAtUtc to be an explicit nil
func (o *IssuedDocumentDetails) SetExpiresAtUtcNil() {
	o.ExpiresAtUtc.Set(nil)
}

// UnsetExpiresAtUtc ensures that no value is present for ExpiresAtUtc, not even an explicit nil
func (o *IssuedDocumentDetails) UnsetExpiresAtUtc() {
	o.ExpiresAtUtc.Unset()
}

// GetAcceptedAtUtc returns the AcceptedAtUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocumentDetails) GetAcceptedAtUtc() time.Time {
	if o == nil || o.AcceptedAtUtc.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.AcceptedAtUtc.Get()
}

// GetAcceptedAtUtcOk returns a tuple with the AcceptedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocumentDetails) GetAcceptedAtUtcOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcceptedAtUtc.Get(), o.AcceptedAtUtc.IsSet()
}

// HasAcceptedAtUtc returns a boolean if a field has been set.
func (o *IssuedDocumentDetails) HasAcceptedAtUtc() bool {
	if o != nil && o.AcceptedAtUtc.IsSet() {
		return true
	}

	return false
}

// SetAcceptedAtUtc gets a reference to the given NullableTime and assigns it to the AcceptedAtUtc field.
func (o *IssuedDocumentDetails) SetAcceptedAtUtc(v time.Time) {
	o.AcceptedAtUtc.Set(&v)
}
// SetAcceptedAtUtcNil sets the value for AcceptedAtUtc to be an explicit nil
func (o *IssuedDocumentDetails) SetAcceptedAtUtcNil() {
	o.AcceptedAtUtc.Set(nil)
}

// UnsetAcceptedAtUtc ensures that no value is present for AcceptedAtUtc, not even an explicit nil
func (o *IssuedDocumentDetails) UnsetAcceptedAtUtc() {
	o.AcceptedAtUtc.Unset()
}

// GetReceiver returns the Receiver field value
func (o *IssuedDocumentDetails) GetReceiver() DocumentReceiver {
	if o == nil {
		var ret DocumentReceiver
		return ret
	}

	return o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value
// and a boolean to check if the value has been set.
func (o *IssuedDocumentDetails) GetReceiverOk() (*DocumentReceiver, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Receiver, true
}

// SetReceiver sets field value
func (o *IssuedDocumentDetails) SetReceiver(v DocumentReceiver) {
	o.Receiver = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocumentDetails) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocumentDetails) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IssuedDocumentDetails) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *IssuedDocumentDetails) SetMetadata(v map[string]string) {
	o.Metadata = v
}

// GetDigitalSignatures returns the DigitalSignatures field value
func (o *IssuedDocumentDetails) GetDigitalSignatures() []DocumentDigitalSignature {
	if o == nil {
		var ret []DocumentDigitalSignature
		return ret
	}

	return o.DigitalSignatures
}

// GetDigitalSignaturesOk returns a tuple with the DigitalSignatures field value
// and a boolean to check if the value has been set.
func (o *IssuedDocumentDetails) GetDigitalSignaturesOk() ([]DocumentDigitalSignature, bool) {
	if o == nil {
		return nil, false
	}
	return o.DigitalSignatures, true
}

// SetDigitalSignatures sets field value
func (o *IssuedDocumentDetails) SetDigitalSignatures(v []DocumentDigitalSignature) {
	o.DigitalSignatures = v
}

func (o IssuedDocumentDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	if true {
		toSerialize["documentType"] = o.DocumentType
	}
	if true {
		toSerialize["issuedTo"] = o.IssuedTo
	}
	if true {
		toSerialize["issuedAtUtc"] = o.IssuedAtUtc
	}
	if o.ExpiresAtUtc.IsSet() {
		toSerialize["expiresAtUtc"] = o.ExpiresAtUtc.Get()
	}
	if o.AcceptedAtUtc.IsSet() {
		toSerialize["acceptedAtUtc"] = o.AcceptedAtUtc.Get()
	}
	if true {
		toSerialize["receiver"] = o.Receiver
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["digitalSignatures"] = o.DigitalSignatures
	}
	return json.Marshal(toSerialize)
}

type NullableIssuedDocumentDetails struct {
	value *IssuedDocumentDetails
	isSet bool
}

func (v NullableIssuedDocumentDetails) Get() *IssuedDocumentDetails {
	return v.value
}

func (v *NullableIssuedDocumentDetails) Set(val *IssuedDocumentDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuedDocumentDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuedDocumentDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuedDocumentDetails(val *IssuedDocumentDetails) *NullableIssuedDocumentDetails {
	return &NullableIssuedDocumentDetails{value: val, isSet: true}
}

func (v NullableIssuedDocumentDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuedDocumentDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


