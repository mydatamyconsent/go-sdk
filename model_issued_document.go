/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// IssuedDocument struct for IssuedDocument
type IssuedDocument struct {
	DocumentId *string `json:"documentId,omitempty"`
	Identifier NullableString `json:"identifier,omitempty"`
	DocumentType NullableString `json:"documentType,omitempty"`
	IssuedTo NullableString `json:"issuedTo,omitempty"`
	IssuedAtUtc *time.Time `json:"issuedAtUtc,omitempty"`
}

// NewIssuedDocument instantiates a new IssuedDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuedDocument() *IssuedDocument {
	this := IssuedDocument{}
	return &this
}

// NewIssuedDocumentWithDefaults instantiates a new IssuedDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuedDocumentWithDefaults() *IssuedDocument {
	this := IssuedDocument{}
	return &this
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *IssuedDocument) GetDocumentId() string {
	if o == nil || o.DocumentId == nil {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuedDocument) GetDocumentIdOk() (*string, bool) {
	if o == nil || o.DocumentId == nil {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *IssuedDocument) HasDocumentId() bool {
	if o != nil && o.DocumentId != nil {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *IssuedDocument) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetIdentifier() string {
	if o == nil || o.Identifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.Identifier.Get()
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Identifier.Get(), o.Identifier.IsSet()
}

// HasIdentifier returns a boolean if a field has been set.
func (o *IssuedDocument) HasIdentifier() bool {
	if o != nil && o.Identifier.IsSet() {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given NullableString and assigns it to the Identifier field.
func (o *IssuedDocument) SetIdentifier(v string) {
	o.Identifier.Set(&v)
}
// SetIdentifierNil sets the value for Identifier to be an explicit nil
func (o *IssuedDocument) SetIdentifierNil() {
	o.Identifier.Set(nil)
}

// UnsetIdentifier ensures that no value is present for Identifier, not even an explicit nil
func (o *IssuedDocument) UnsetIdentifier() {
	o.Identifier.Unset()
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetDocumentType() string {
	if o == nil || o.DocumentType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DocumentType.Get()
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetDocumentTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DocumentType.Get(), o.DocumentType.IsSet()
}

// HasDocumentType returns a boolean if a field has been set.
func (o *IssuedDocument) HasDocumentType() bool {
	if o != nil && o.DocumentType.IsSet() {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given NullableString and assigns it to the DocumentType field.
func (o *IssuedDocument) SetDocumentType(v string) {
	o.DocumentType.Set(&v)
}
// SetDocumentTypeNil sets the value for DocumentType to be an explicit nil
func (o *IssuedDocument) SetDocumentTypeNil() {
	o.DocumentType.Set(nil)
}

// UnsetDocumentType ensures that no value is present for DocumentType, not even an explicit nil
func (o *IssuedDocument) UnsetDocumentType() {
	o.DocumentType.Unset()
}

// GetIssuedTo returns the IssuedTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuedDocument) GetIssuedTo() string {
	if o == nil || o.IssuedTo.Get() == nil {
		var ret string
		return ret
	}
	return *o.IssuedTo.Get()
}

// GetIssuedToOk returns a tuple with the IssuedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuedDocument) GetIssuedToOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IssuedTo.Get(), o.IssuedTo.IsSet()
}

// HasIssuedTo returns a boolean if a field has been set.
func (o *IssuedDocument) HasIssuedTo() bool {
	if o != nil && o.IssuedTo.IsSet() {
		return true
	}

	return false
}

// SetIssuedTo gets a reference to the given NullableString and assigns it to the IssuedTo field.
func (o *IssuedDocument) SetIssuedTo(v string) {
	o.IssuedTo.Set(&v)
}
// SetIssuedToNil sets the value for IssuedTo to be an explicit nil
func (o *IssuedDocument) SetIssuedToNil() {
	o.IssuedTo.Set(nil)
}

// UnsetIssuedTo ensures that no value is present for IssuedTo, not even an explicit nil
func (o *IssuedDocument) UnsetIssuedTo() {
	o.IssuedTo.Unset()
}

// GetIssuedAtUtc returns the IssuedAtUtc field value if set, zero value otherwise.
func (o *IssuedDocument) GetIssuedAtUtc() time.Time {
	if o == nil || o.IssuedAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.IssuedAtUtc
}

// GetIssuedAtUtcOk returns a tuple with the IssuedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuedDocument) GetIssuedAtUtcOk() (*time.Time, bool) {
	if o == nil || o.IssuedAtUtc == nil {
		return nil, false
	}
	return o.IssuedAtUtc, true
}

// HasIssuedAtUtc returns a boolean if a field has been set.
func (o *IssuedDocument) HasIssuedAtUtc() bool {
	if o != nil && o.IssuedAtUtc != nil {
		return true
	}

	return false
}

// SetIssuedAtUtc gets a reference to the given time.Time and assigns it to the IssuedAtUtc field.
func (o *IssuedDocument) SetIssuedAtUtc(v time.Time) {
	o.IssuedAtUtc = &v
}

func (o IssuedDocument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DocumentId != nil {
		toSerialize["documentId"] = o.DocumentId
	}
	if o.Identifier.IsSet() {
		toSerialize["identifier"] = o.Identifier.Get()
	}
	if o.DocumentType.IsSet() {
		toSerialize["documentType"] = o.DocumentType.Get()
	}
	if o.IssuedTo.IsSet() {
		toSerialize["issuedTo"] = o.IssuedTo.Get()
	}
	if o.IssuedAtUtc != nil {
		toSerialize["issuedAtUtc"] = o.IssuedAtUtc
	}
	return json.Marshal(toSerialize)
}

type NullableIssuedDocument struct {
	value *IssuedDocument
	isSet bool
}

func (v NullableIssuedDocument) Get() *IssuedDocument {
	return v.value
}

func (v *NullableIssuedDocument) Set(val *IssuedDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuedDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuedDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuedDocument(val *IssuedDocument) *NullableIssuedDocument {
	return &NullableIssuedDocument{value: val, isSet: true}
}

func (v NullableIssuedDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuedDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


