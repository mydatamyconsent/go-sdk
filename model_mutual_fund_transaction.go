/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// MutualFundTransaction struct for MutualFundTransaction
type MutualFundTransaction struct {
	Id string `json:"id"`
	Amount string `json:"amount"`
	CurrencyCode string `json:"currency_code"`
	TxnType MutualFundTransactionType `json:"txn_type"`
	Units string `json:"units"`
	TransactedAtUtc time.Time `json:"transacted_at_utc"`
}

// NewMutualFundTransaction instantiates a new MutualFundTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMutualFundTransaction(id string, amount string, currencyCode string, txnType MutualFundTransactionType, units string, transactedAtUtc time.Time) *MutualFundTransaction {
	this := MutualFundTransaction{}
	this.Id = id
	this.Amount = amount
	this.CurrencyCode = currencyCode
	this.TxnType = txnType
	this.Units = units
	this.TransactedAtUtc = transactedAtUtc
	return &this
}

// NewMutualFundTransactionWithDefaults instantiates a new MutualFundTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMutualFundTransactionWithDefaults() *MutualFundTransaction {
	this := MutualFundTransaction{}
	return &this
}

// GetId returns the Id field value
func (o *MutualFundTransaction) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MutualFundTransaction) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MutualFundTransaction) SetId(v string) {
	o.Id = v
}

// GetAmount returns the Amount field value
func (o *MutualFundTransaction) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *MutualFundTransaction) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *MutualFundTransaction) SetAmount(v string) {
	o.Amount = v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *MutualFundTransaction) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *MutualFundTransaction) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *MutualFundTransaction) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

// GetTxnType returns the TxnType field value
func (o *MutualFundTransaction) GetTxnType() MutualFundTransactionType {
	if o == nil {
		var ret MutualFundTransactionType
		return ret
	}

	return o.TxnType
}

// GetTxnTypeOk returns a tuple with the TxnType field value
// and a boolean to check if the value has been set.
func (o *MutualFundTransaction) GetTxnTypeOk() (*MutualFundTransactionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxnType, true
}

// SetTxnType sets field value
func (o *MutualFundTransaction) SetTxnType(v MutualFundTransactionType) {
	o.TxnType = v
}

// GetUnits returns the Units field value
func (o *MutualFundTransaction) GetUnits() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value
// and a boolean to check if the value has been set.
func (o *MutualFundTransaction) GetUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Units, true
}

// SetUnits sets field value
func (o *MutualFundTransaction) SetUnits(v string) {
	o.Units = v
}

// GetTransactedAtUtc returns the TransactedAtUtc field value
func (o *MutualFundTransaction) GetTransactedAtUtc() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TransactedAtUtc
}

// GetTransactedAtUtcOk returns a tuple with the TransactedAtUtc field value
// and a boolean to check if the value has been set.
func (o *MutualFundTransaction) GetTransactedAtUtcOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactedAtUtc, true
}

// SetTransactedAtUtc sets field value
func (o *MutualFundTransaction) SetTransactedAtUtc(v time.Time) {
	o.TransactedAtUtc = v
}

func (o MutualFundTransaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	if true {
		toSerialize["txn_type"] = o.TxnType
	}
	if true {
		toSerialize["units"] = o.Units
	}
	if true {
		toSerialize["transacted_at_utc"] = o.TransactedAtUtc
	}
	return json.Marshal(toSerialize)
}

type NullableMutualFundTransaction struct {
	value *MutualFundTransaction
	isSet bool
}

func (v NullableMutualFundTransaction) Get() *MutualFundTransaction {
	return v.value
}

func (v *NullableMutualFundTransaction) Set(val *MutualFundTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableMutualFundTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableMutualFundTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutualFundTransaction(val *MutualFundTransaction) *NullableMutualFundTransaction {
	return &NullableMutualFundTransaction{value: val, isSet: true}
}

func (v NullableMutualFundTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutualFundTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


