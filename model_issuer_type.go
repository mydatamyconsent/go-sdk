/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// IssuerType the model 'IssuerType'
type IssuerType string

// List of IssuerType
const (
	INDIVIDUAL IssuerType = "Individual"
	ORGANIZATION IssuerType = "Organization"
)

// All allowed values of IssuerType enum
var AllowedIssuerTypeEnumValues = []IssuerType{
	"Individual",
	"Organization",
}

func (v *IssuerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IssuerType(value)
	for _, existing := range AllowedIssuerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IssuerType", value)
}

// NewIssuerTypeFromValue returns a pointer to a valid IssuerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIssuerTypeFromValue(v string) (*IssuerType, error) {
	ev := IssuerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IssuerType: valid values are %v", v, AllowedIssuerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IssuerType) IsValid() bool {
	for _, existing := range AllowedIssuerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IssuerType value
func (v IssuerType) Ptr() *IssuerType {
	return &v
}

type NullableIssuerType struct {
	value *IssuerType
	isSet bool
}

func (v NullableIssuerType) Get() *IssuerType {
	return v.value
}

func (v *NullableIssuerType) Set(val *IssuerType) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuerType) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuerType(val *IssuerType) *NullableIssuerType {
	return &NullableIssuerType{value: val, isSet: true}
}

func (v NullableIssuerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

