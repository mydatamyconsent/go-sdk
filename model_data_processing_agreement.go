/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// DataProcessingAgreement DataProcessingAgreement : Data processing agreement details.
type DataProcessingAgreement struct {
	// Agreement id.
	Id string `json:"id"`
	// Agreement name.
	Name string `json:"name"`
	IssuerType IssuerType `json:"issuerType"`
	// Agreement attachment file URL.
	AgreementUrl string `json:"agreementUrl"`
}

// NewDataProcessingAgreement instantiates a new DataProcessingAgreement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataProcessingAgreement(id string, name string, issuerType IssuerType, agreementUrl string) *DataProcessingAgreement {
	this := DataProcessingAgreement{}
	this.Id = id
	this.Name = name
	this.IssuerType = issuerType
	this.AgreementUrl = agreementUrl
	return &this
}

// NewDataProcessingAgreementWithDefaults instantiates a new DataProcessingAgreement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataProcessingAgreementWithDefaults() *DataProcessingAgreement {
	this := DataProcessingAgreement{}
	return &this
}

// GetId returns the Id field value
func (o *DataProcessingAgreement) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DataProcessingAgreement) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DataProcessingAgreement) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DataProcessingAgreement) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DataProcessingAgreement) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DataProcessingAgreement) SetName(v string) {
	o.Name = v
}

// GetIssuerType returns the IssuerType field value
func (o *DataProcessingAgreement) GetIssuerType() IssuerType {
	if o == nil {
		var ret IssuerType
		return ret
	}

	return o.IssuerType
}

// GetIssuerTypeOk returns a tuple with the IssuerType field value
// and a boolean to check if the value has been set.
func (o *DataProcessingAgreement) GetIssuerTypeOk() (*IssuerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuerType, true
}

// SetIssuerType sets field value
func (o *DataProcessingAgreement) SetIssuerType(v IssuerType) {
	o.IssuerType = v
}

// GetAgreementUrl returns the AgreementUrl field value
func (o *DataProcessingAgreement) GetAgreementUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AgreementUrl
}

// GetAgreementUrlOk returns a tuple with the AgreementUrl field value
// and a boolean to check if the value has been set.
func (o *DataProcessingAgreement) GetAgreementUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AgreementUrl, true
}

// SetAgreementUrl sets field value
func (o *DataProcessingAgreement) SetAgreementUrl(v string) {
	o.AgreementUrl = v
}

func (o DataProcessingAgreement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["issuerType"] = o.IssuerType
	}
	if true {
		toSerialize["agreementUrl"] = o.AgreementUrl
	}
	return json.Marshal(toSerialize)
}

type NullableDataProcessingAgreement struct {
	value *DataProcessingAgreement
	isSet bool
}

func (v NullableDataProcessingAgreement) Get() *DataProcessingAgreement {
	return v.value
}

func (v *NullableDataProcessingAgreement) Set(val *DataProcessingAgreement) {
	v.value = val
	v.isSet = true
}

func (v NullableDataProcessingAgreement) IsSet() bool {
	return v.isSet
}

func (v *NullableDataProcessingAgreement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataProcessingAgreement(val *DataProcessingAgreement) *NullableDataProcessingAgreement {
	return &NullableDataProcessingAgreement{value: val, isSet: true}
}

func (v NullableDataProcessingAgreement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataProcessingAgreement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


