/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"time"
)

// DataConsentRequestModel struct for DataConsentRequestModel
type DataConsentRequestModel struct {
	OrganizationId *string `json:"organizationId,omitempty"`
	TransactionId NullableString `json:"transactionId,omitempty"`
	Identifiers map[string]string `json:"identifiers,omitempty"`
	StartDateTime NullableTime `json:"startDateTime,omitempty"`
	ExpiryDateTime *time.Time `json:"expiryDateTime,omitempty"`
	Description NullableString `json:"description,omitempty"`
	PurposeCode NullableString `json:"purposeCode,omitempty"`
	PurposeLink NullableString `json:"purposeLink,omitempty"`
	DataLifeUnit *DataLifeUnit `json:"dataLifeUnit,omitempty"`
	DataLifeValue *int32 `json:"dataLifeValue,omitempty"`
	DataFetchFrequencyUnit *DataFetchFrequencyUnit `json:"dataFetchFrequencyUnit,omitempty"`
	DataFetchFrequencyUnitValue *int32 `json:"dataFetchFrequencyUnitValue,omitempty"`
	DataFetchType *DataFetchType `json:"dataFetchType,omitempty"`
	AgreementId *string `json:"agreementId,omitempty"`
	IdentityClaims []IdentityClaim `json:"identityClaims,omitempty"`
	FinancialAccounts []DataConsentRequestedFaDto `json:"financialAccounts,omitempty"`
	Documents []DataConsentRequestedDocumentDto `json:"documents,omitempty"`
}

// NewDataConsentRequestModel instantiates a new DataConsentRequestModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataConsentRequestModel() *DataConsentRequestModel {
	this := DataConsentRequestModel{}
	return &this
}

// NewDataConsentRequestModelWithDefaults instantiates a new DataConsentRequestModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataConsentRequestModelWithDefaults() *DataConsentRequestModel {
	this := DataConsentRequestModel{}
	return &this
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *DataConsentRequestModel) GetOrganizationId() string {
	if o == nil || o.OrganizationId == nil {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestModel) GetOrganizationIdOk() (*string, bool) {
	if o == nil || o.OrganizationId == nil {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasOrganizationId() bool {
	if o != nil && o.OrganizationId != nil {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *DataConsentRequestModel) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestModel) GetTransactionId() string {
	if o == nil || o.TransactionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TransactionId.Get()
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestModel) GetTransactionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TransactionId.Get(), o.TransactionId.IsSet()
}

// HasTransactionId returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasTransactionId() bool {
	if o != nil && o.TransactionId.IsSet() {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given NullableString and assigns it to the TransactionId field.
func (o *DataConsentRequestModel) SetTransactionId(v string) {
	o.TransactionId.Set(&v)
}
// SetTransactionIdNil sets the value for TransactionId to be an explicit nil
func (o *DataConsentRequestModel) SetTransactionIdNil() {
	o.TransactionId.Set(nil)
}

// UnsetTransactionId ensures that no value is present for TransactionId, not even an explicit nil
func (o *DataConsentRequestModel) UnsetTransactionId() {
	o.TransactionId.Unset()
}

// GetIdentifiers returns the Identifiers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestModel) GetIdentifiers() map[string]string {
	if o == nil  {
		var ret map[string]string
		return ret
	}
	return o.Identifiers
}

// GetIdentifiersOk returns a tuple with the Identifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestModel) GetIdentifiersOk() (*map[string]string, bool) {
	if o == nil || o.Identifiers == nil {
		return nil, false
	}
	return &o.Identifiers, true
}

// HasIdentifiers returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasIdentifiers() bool {
	if o != nil && o.Identifiers != nil {
		return true
	}

	return false
}

// SetIdentifiers gets a reference to the given map[string]string and assigns it to the Identifiers field.
func (o *DataConsentRequestModel) SetIdentifiers(v map[string]string) {
	o.Identifiers = v
}

// GetStartDateTime returns the StartDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestModel) GetStartDateTime() time.Time {
	if o == nil || o.StartDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDateTime.Get()
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestModel) GetStartDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartDateTime.Get(), o.StartDateTime.IsSet()
}

// HasStartDateTime returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasStartDateTime() bool {
	if o != nil && o.StartDateTime.IsSet() {
		return true
	}

	return false
}

// SetStartDateTime gets a reference to the given NullableTime and assigns it to the StartDateTime field.
func (o *DataConsentRequestModel) SetStartDateTime(v time.Time) {
	o.StartDateTime.Set(&v)
}
// SetStartDateTimeNil sets the value for StartDateTime to be an explicit nil
func (o *DataConsentRequestModel) SetStartDateTimeNil() {
	o.StartDateTime.Set(nil)
}

// UnsetStartDateTime ensures that no value is present for StartDateTime, not even an explicit nil
func (o *DataConsentRequestModel) UnsetStartDateTime() {
	o.StartDateTime.Unset()
}

// GetExpiryDateTime returns the ExpiryDateTime field value if set, zero value otherwise.
func (o *DataConsentRequestModel) GetExpiryDateTime() time.Time {
	if o == nil || o.ExpiryDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiryDateTime
}

// GetExpiryDateTimeOk returns a tuple with the ExpiryDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestModel) GetExpiryDateTimeOk() (*time.Time, bool) {
	if o == nil || o.ExpiryDateTime == nil {
		return nil, false
	}
	return o.ExpiryDateTime, true
}

// HasExpiryDateTime returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasExpiryDateTime() bool {
	if o != nil && o.ExpiryDateTime != nil {
		return true
	}

	return false
}

// SetExpiryDateTime gets a reference to the given time.Time and assigns it to the ExpiryDateTime field.
func (o *DataConsentRequestModel) SetExpiryDateTime(v time.Time) {
	o.ExpiryDateTime = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestModel) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestModel) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *DataConsentRequestModel) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *DataConsentRequestModel) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *DataConsentRequestModel) UnsetDescription() {
	o.Description.Unset()
}

// GetPurposeCode returns the PurposeCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestModel) GetPurposeCode() string {
	if o == nil || o.PurposeCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.PurposeCode.Get()
}

// GetPurposeCodeOk returns a tuple with the PurposeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestModel) GetPurposeCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PurposeCode.Get(), o.PurposeCode.IsSet()
}

// HasPurposeCode returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasPurposeCode() bool {
	if o != nil && o.PurposeCode.IsSet() {
		return true
	}

	return false
}

// SetPurposeCode gets a reference to the given NullableString and assigns it to the PurposeCode field.
func (o *DataConsentRequestModel) SetPurposeCode(v string) {
	o.PurposeCode.Set(&v)
}
// SetPurposeCodeNil sets the value for PurposeCode to be an explicit nil
func (o *DataConsentRequestModel) SetPurposeCodeNil() {
	o.PurposeCode.Set(nil)
}

// UnsetPurposeCode ensures that no value is present for PurposeCode, not even an explicit nil
func (o *DataConsentRequestModel) UnsetPurposeCode() {
	o.PurposeCode.Unset()
}

// GetPurposeLink returns the PurposeLink field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestModel) GetPurposeLink() string {
	if o == nil || o.PurposeLink.Get() == nil {
		var ret string
		return ret
	}
	return *o.PurposeLink.Get()
}

// GetPurposeLinkOk returns a tuple with the PurposeLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestModel) GetPurposeLinkOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PurposeLink.Get(), o.PurposeLink.IsSet()
}

// HasPurposeLink returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasPurposeLink() bool {
	if o != nil && o.PurposeLink.IsSet() {
		return true
	}

	return false
}

// SetPurposeLink gets a reference to the given NullableString and assigns it to the PurposeLink field.
func (o *DataConsentRequestModel) SetPurposeLink(v string) {
	o.PurposeLink.Set(&v)
}
// SetPurposeLinkNil sets the value for PurposeLink to be an explicit nil
func (o *DataConsentRequestModel) SetPurposeLinkNil() {
	o.PurposeLink.Set(nil)
}

// UnsetPurposeLink ensures that no value is present for PurposeLink, not even an explicit nil
func (o *DataConsentRequestModel) UnsetPurposeLink() {
	o.PurposeLink.Unset()
}

// GetDataLifeUnit returns the DataLifeUnit field value if set, zero value otherwise.
func (o *DataConsentRequestModel) GetDataLifeUnit() DataLifeUnit {
	if o == nil || o.DataLifeUnit == nil {
		var ret DataLifeUnit
		return ret
	}
	return *o.DataLifeUnit
}

// GetDataLifeUnitOk returns a tuple with the DataLifeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestModel) GetDataLifeUnitOk() (*DataLifeUnit, bool) {
	if o == nil || o.DataLifeUnit == nil {
		return nil, false
	}
	return o.DataLifeUnit, true
}

// HasDataLifeUnit returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasDataLifeUnit() bool {
	if o != nil && o.DataLifeUnit != nil {
		return true
	}

	return false
}

// SetDataLifeUnit gets a reference to the given DataLifeUnit and assigns it to the DataLifeUnit field.
func (o *DataConsentRequestModel) SetDataLifeUnit(v DataLifeUnit) {
	o.DataLifeUnit = &v
}

// GetDataLifeValue returns the DataLifeValue field value if set, zero value otherwise.
func (o *DataConsentRequestModel) GetDataLifeValue() int32 {
	if o == nil || o.DataLifeValue == nil {
		var ret int32
		return ret
	}
	return *o.DataLifeValue
}

// GetDataLifeValueOk returns a tuple with the DataLifeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestModel) GetDataLifeValueOk() (*int32, bool) {
	if o == nil || o.DataLifeValue == nil {
		return nil, false
	}
	return o.DataLifeValue, true
}

// HasDataLifeValue returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasDataLifeValue() bool {
	if o != nil && o.DataLifeValue != nil {
		return true
	}

	return false
}

// SetDataLifeValue gets a reference to the given int32 and assigns it to the DataLifeValue field.
func (o *DataConsentRequestModel) SetDataLifeValue(v int32) {
	o.DataLifeValue = &v
}

// GetDataFetchFrequencyUnit returns the DataFetchFrequencyUnit field value if set, zero value otherwise.
func (o *DataConsentRequestModel) GetDataFetchFrequencyUnit() DataFetchFrequencyUnit {
	if o == nil || o.DataFetchFrequencyUnit == nil {
		var ret DataFetchFrequencyUnit
		return ret
	}
	return *o.DataFetchFrequencyUnit
}

// GetDataFetchFrequencyUnitOk returns a tuple with the DataFetchFrequencyUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestModel) GetDataFetchFrequencyUnitOk() (*DataFetchFrequencyUnit, bool) {
	if o == nil || o.DataFetchFrequencyUnit == nil {
		return nil, false
	}
	return o.DataFetchFrequencyUnit, true
}

// HasDataFetchFrequencyUnit returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasDataFetchFrequencyUnit() bool {
	if o != nil && o.DataFetchFrequencyUnit != nil {
		return true
	}

	return false
}

// SetDataFetchFrequencyUnit gets a reference to the given DataFetchFrequencyUnit and assigns it to the DataFetchFrequencyUnit field.
func (o *DataConsentRequestModel) SetDataFetchFrequencyUnit(v DataFetchFrequencyUnit) {
	o.DataFetchFrequencyUnit = &v
}

// GetDataFetchFrequencyUnitValue returns the DataFetchFrequencyUnitValue field value if set, zero value otherwise.
func (o *DataConsentRequestModel) GetDataFetchFrequencyUnitValue() int32 {
	if o == nil || o.DataFetchFrequencyUnitValue == nil {
		var ret int32
		return ret
	}
	return *o.DataFetchFrequencyUnitValue
}

// GetDataFetchFrequencyUnitValueOk returns a tuple with the DataFetchFrequencyUnitValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestModel) GetDataFetchFrequencyUnitValueOk() (*int32, bool) {
	if o == nil || o.DataFetchFrequencyUnitValue == nil {
		return nil, false
	}
	return o.DataFetchFrequencyUnitValue, true
}

// HasDataFetchFrequencyUnitValue returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasDataFetchFrequencyUnitValue() bool {
	if o != nil && o.DataFetchFrequencyUnitValue != nil {
		return true
	}

	return false
}

// SetDataFetchFrequencyUnitValue gets a reference to the given int32 and assigns it to the DataFetchFrequencyUnitValue field.
func (o *DataConsentRequestModel) SetDataFetchFrequencyUnitValue(v int32) {
	o.DataFetchFrequencyUnitValue = &v
}

// GetDataFetchType returns the DataFetchType field value if set, zero value otherwise.
func (o *DataConsentRequestModel) GetDataFetchType() DataFetchType {
	if o == nil || o.DataFetchType == nil {
		var ret DataFetchType
		return ret
	}
	return *o.DataFetchType
}

// GetDataFetchTypeOk returns a tuple with the DataFetchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestModel) GetDataFetchTypeOk() (*DataFetchType, bool) {
	if o == nil || o.DataFetchType == nil {
		return nil, false
	}
	return o.DataFetchType, true
}

// HasDataFetchType returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasDataFetchType() bool {
	if o != nil && o.DataFetchType != nil {
		return true
	}

	return false
}

// SetDataFetchType gets a reference to the given DataFetchType and assigns it to the DataFetchType field.
func (o *DataConsentRequestModel) SetDataFetchType(v DataFetchType) {
	o.DataFetchType = &v
}

// GetAgreementId returns the AgreementId field value if set, zero value otherwise.
func (o *DataConsentRequestModel) GetAgreementId() string {
	if o == nil || o.AgreementId == nil {
		var ret string
		return ret
	}
	return *o.AgreementId
}

// GetAgreementIdOk returns a tuple with the AgreementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestModel) GetAgreementIdOk() (*string, bool) {
	if o == nil || o.AgreementId == nil {
		return nil, false
	}
	return o.AgreementId, true
}

// HasAgreementId returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasAgreementId() bool {
	if o != nil && o.AgreementId != nil {
		return true
	}

	return false
}

// SetAgreementId gets a reference to the given string and assigns it to the AgreementId field.
func (o *DataConsentRequestModel) SetAgreementId(v string) {
	o.AgreementId = &v
}

// GetIdentityClaims returns the IdentityClaims field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestModel) GetIdentityClaims() []IdentityClaim {
	if o == nil  {
		var ret []IdentityClaim
		return ret
	}
	return o.IdentityClaims
}

// GetIdentityClaimsOk returns a tuple with the IdentityClaims field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestModel) GetIdentityClaimsOk() (*[]IdentityClaim, bool) {
	if o == nil || o.IdentityClaims == nil {
		return nil, false
	}
	return &o.IdentityClaims, true
}

// HasIdentityClaims returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasIdentityClaims() bool {
	if o != nil && o.IdentityClaims != nil {
		return true
	}

	return false
}

// SetIdentityClaims gets a reference to the given []IdentityClaim and assigns it to the IdentityClaims field.
func (o *DataConsentRequestModel) SetIdentityClaims(v []IdentityClaim) {
	o.IdentityClaims = v
}

// GetFinancialAccounts returns the FinancialAccounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestModel) GetFinancialAccounts() []DataConsentRequestedFaDto {
	if o == nil  {
		var ret []DataConsentRequestedFaDto
		return ret
	}
	return o.FinancialAccounts
}

// GetFinancialAccountsOk returns a tuple with the FinancialAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestModel) GetFinancialAccountsOk() (*[]DataConsentRequestedFaDto, bool) {
	if o == nil || o.FinancialAccounts == nil {
		return nil, false
	}
	return &o.FinancialAccounts, true
}

// HasFinancialAccounts returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasFinancialAccounts() bool {
	if o != nil && o.FinancialAccounts != nil {
		return true
	}

	return false
}

// SetFinancialAccounts gets a reference to the given []DataConsentRequestedFaDto and assigns it to the FinancialAccounts field.
func (o *DataConsentRequestModel) SetFinancialAccounts(v []DataConsentRequestedFaDto) {
	o.FinancialAccounts = v
}

// GetDocuments returns the Documents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestModel) GetDocuments() []DataConsentRequestedDocumentDto {
	if o == nil  {
		var ret []DataConsentRequestedDocumentDto
		return ret
	}
	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestModel) GetDocumentsOk() (*[]DataConsentRequestedDocumentDto, bool) {
	if o == nil || o.Documents == nil {
		return nil, false
	}
	return &o.Documents, true
}

// HasDocuments returns a boolean if a field has been set.
func (o *DataConsentRequestModel) HasDocuments() bool {
	if o != nil && o.Documents != nil {
		return true
	}

	return false
}

// SetDocuments gets a reference to the given []DataConsentRequestedDocumentDto and assigns it to the Documents field.
func (o *DataConsentRequestModel) SetDocuments(v []DataConsentRequestedDocumentDto) {
	o.Documents = v
}

func (o DataConsentRequestModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OrganizationId != nil {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if o.TransactionId.IsSet() {
		toSerialize["transactionId"] = o.TransactionId.Get()
	}
	if o.Identifiers != nil {
		toSerialize["identifiers"] = o.Identifiers
	}
	if o.StartDateTime.IsSet() {
		toSerialize["startDateTime"] = o.StartDateTime.Get()
	}
	if o.ExpiryDateTime != nil {
		toSerialize["expiryDateTime"] = o.ExpiryDateTime
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.PurposeCode.IsSet() {
		toSerialize["purposeCode"] = o.PurposeCode.Get()
	}
	if o.PurposeLink.IsSet() {
		toSerialize["purposeLink"] = o.PurposeLink.Get()
	}
	if o.DataLifeUnit != nil {
		toSerialize["dataLifeUnit"] = o.DataLifeUnit
	}
	if o.DataLifeValue != nil {
		toSerialize["dataLifeValue"] = o.DataLifeValue
	}
	if o.DataFetchFrequencyUnit != nil {
		toSerialize["dataFetchFrequencyUnit"] = o.DataFetchFrequencyUnit
	}
	if o.DataFetchFrequencyUnitValue != nil {
		toSerialize["dataFetchFrequencyUnitValue"] = o.DataFetchFrequencyUnitValue
	}
	if o.DataFetchType != nil {
		toSerialize["dataFetchType"] = o.DataFetchType
	}
	if o.AgreementId != nil {
		toSerialize["agreementId"] = o.AgreementId
	}
	if o.IdentityClaims != nil {
		toSerialize["identityClaims"] = o.IdentityClaims
	}
	if o.FinancialAccounts != nil {
		toSerialize["financialAccounts"] = o.FinancialAccounts
	}
	if o.Documents != nil {
		toSerialize["documents"] = o.Documents
	}
	return json.Marshal(toSerialize)
}

type NullableDataConsentRequestModel struct {
	value *DataConsentRequestModel
	isSet bool
}

func (v NullableDataConsentRequestModel) Get() *DataConsentRequestModel {
	return v.value
}

func (v *NullableDataConsentRequestModel) Set(val *DataConsentRequestModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDataConsentRequestModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDataConsentRequestModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataConsentRequestModel(val *DataConsentRequestModel) *NullableDataConsentRequestModel {
	return &NullableDataConsentRequestModel{value: val, isSet: true}
}

func (v NullableDataConsentRequestModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataConsentRequestModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


