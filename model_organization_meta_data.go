/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
)

// OrganizationMetaData struct for OrganizationMetaData
type OrganizationMetaData struct {
	DigiLockerMetadata interface{} `json:"digiLockerMetadata,omitempty"`
}

// NewOrganizationMetaData instantiates a new OrganizationMetaData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationMetaData() *OrganizationMetaData {
	this := OrganizationMetaData{}
	return &this
}

// NewOrganizationMetaDataWithDefaults instantiates a new OrganizationMetaData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationMetaDataWithDefaults() *OrganizationMetaData {
	this := OrganizationMetaData{}
	return &this
}

// GetDigiLockerMetadata returns the DigiLockerMetadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationMetaData) GetDigiLockerMetadata() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.DigiLockerMetadata
}

// GetDigiLockerMetadataOk returns a tuple with the DigiLockerMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationMetaData) GetDigiLockerMetadataOk() (*interface{}, bool) {
	if o == nil || o.DigiLockerMetadata == nil {
		return nil, false
	}
	return &o.DigiLockerMetadata, true
}

// HasDigiLockerMetadata returns a boolean if a field has been set.
func (o *OrganizationMetaData) HasDigiLockerMetadata() bool {
	if o != nil && o.DigiLockerMetadata != nil {
		return true
	}

	return false
}

// SetDigiLockerMetadata gets a reference to the given interface{} and assigns it to the DigiLockerMetadata field.
func (o *OrganizationMetaData) SetDigiLockerMetadata(v interface{}) {
	o.DigiLockerMetadata = v
}

func (o OrganizationMetaData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DigiLockerMetadata != nil {
		toSerialize["digiLockerMetadata"] = o.DigiLockerMetadata
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationMetaData struct {
	value *OrganizationMetaData
	isSet bool
}

func (v NullableOrganizationMetaData) Get() *OrganizationMetaData {
	return v.value
}

func (v *NullableOrganizationMetaData) Set(val *OrganizationMetaData) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationMetaData) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationMetaData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationMetaData(val *OrganizationMetaData) *NullableOrganizationMetaData {
	return &NullableOrganizationMetaData{value: val, isSet: true}
}

func (v NullableOrganizationMetaData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationMetaData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


