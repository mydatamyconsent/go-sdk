/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// MutualFundFundType the model 'MutualFundFundType'
type MutualFundFundType string

// List of MutualFundFundType
const (
	EQUITY MutualFundFundType = "Equity"
	DEBT MutualFundFundType = "Debt"
	HYBRID MutualFundFundType = "Hybrid"
	SOLUTION_ORIENTED_SCHEMES MutualFundFundType = "SolutionOrientedSchemes"
	OTHERS MutualFundFundType = "Others"
)

// All allowed values of MutualFundFundType enum
var AllowedMutualFundFundTypeEnumValues = []MutualFundFundType{
	"Equity",
	"Debt",
	"Hybrid",
	"SolutionOrientedSchemes",
	"Others",
}

func (v *MutualFundFundType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MutualFundFundType(value)
	for _, existing := range AllowedMutualFundFundTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MutualFundFundType", value)
}

// NewMutualFundFundTypeFromValue returns a pointer to a valid MutualFundFundType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMutualFundFundTypeFromValue(v string) (*MutualFundFundType, error) {
	ev := MutualFundFundType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MutualFundFundType: valid values are %v", v, AllowedMutualFundFundTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MutualFundFundType) IsValid() bool {
	for _, existing := range AllowedMutualFundFundTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MutualFundFundType value
func (v MutualFundFundType) Ptr() *MutualFundFundType {
	return &v
}

type NullableMutualFundFundType struct {
	value *MutualFundFundType
	isSet bool
}

func (v NullableMutualFundFundType) Get() *MutualFundFundType {
	return v.value
}

func (v *NullableMutualFundFundType) Set(val *MutualFundFundType) {
	v.value = val
	v.isSet = true
}

func (v NullableMutualFundFundType) IsSet() bool {
	return v.isSet
}

func (v *NullableMutualFundFundType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutualFundFundType(val *MutualFundFundType) *NullableMutualFundFundType {
	return &NullableMutualFundFundType{value: val, isSet: true}
}

func (v NullableMutualFundFundType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutualFundFundType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

