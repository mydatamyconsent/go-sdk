/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
)

// UriDetails struct for UriDetails
type UriDetails struct {
	Aadhaar NullableString `json:"aadhaar,omitempty"`
	Uri NullableString `json:"uri,omitempty"`
	DocType NullableString `json:"docType,omitempty"`
	DocName NullableString `json:"docName,omitempty"`
	DocId NullableString `json:"docId,omitempty"`
	IssuedOn NullableString `json:"issuedOn,omitempty"`
	ValidFrom NullableString `json:"validFrom,omitempty"`
	ValidTo NullableString `json:"validTo,omitempty"`
	Timestamp NullableString `json:"timestamp,omitempty"`
	Action NullableString `json:"action,omitempty"`
}

// NewUriDetails instantiates a new UriDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUriDetails() *UriDetails {
	this := UriDetails{}
	return &this
}

// NewUriDetailsWithDefaults instantiates a new UriDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUriDetailsWithDefaults() *UriDetails {
	this := UriDetails{}
	return &this
}

// GetAadhaar returns the Aadhaar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UriDetails) GetAadhaar() string {
	if o == nil || o.Aadhaar.Get() == nil {
		var ret string
		return ret
	}
	return *o.Aadhaar.Get()
}

// GetAadhaarOk returns a tuple with the Aadhaar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UriDetails) GetAadhaarOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Aadhaar.Get(), o.Aadhaar.IsSet()
}

// HasAadhaar returns a boolean if a field has been set.
func (o *UriDetails) HasAadhaar() bool {
	if o != nil && o.Aadhaar.IsSet() {
		return true
	}

	return false
}

// SetAadhaar gets a reference to the given NullableString and assigns it to the Aadhaar field.
func (o *UriDetails) SetAadhaar(v string) {
	o.Aadhaar.Set(&v)
}
// SetAadhaarNil sets the value for Aadhaar to be an explicit nil
func (o *UriDetails) SetAadhaarNil() {
	o.Aadhaar.Set(nil)
}

// UnsetAadhaar ensures that no value is present for Aadhaar, not even an explicit nil
func (o *UriDetails) UnsetAadhaar() {
	o.Aadhaar.Unset()
}

// GetUri returns the Uri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UriDetails) GetUri() string {
	if o == nil || o.Uri.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uri.Get()
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UriDetails) GetUriOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uri.Get(), o.Uri.IsSet()
}

// HasUri returns a boolean if a field has been set.
func (o *UriDetails) HasUri() bool {
	if o != nil && o.Uri.IsSet() {
		return true
	}

	return false
}

// SetUri gets a reference to the given NullableString and assigns it to the Uri field.
func (o *UriDetails) SetUri(v string) {
	o.Uri.Set(&v)
}
// SetUriNil sets the value for Uri to be an explicit nil
func (o *UriDetails) SetUriNil() {
	o.Uri.Set(nil)
}

// UnsetUri ensures that no value is present for Uri, not even an explicit nil
func (o *UriDetails) UnsetUri() {
	o.Uri.Unset()
}

// GetDocType returns the DocType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UriDetails) GetDocType() string {
	if o == nil || o.DocType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DocType.Get()
}

// GetDocTypeOk returns a tuple with the DocType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UriDetails) GetDocTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DocType.Get(), o.DocType.IsSet()
}

// HasDocType returns a boolean if a field has been set.
func (o *UriDetails) HasDocType() bool {
	if o != nil && o.DocType.IsSet() {
		return true
	}

	return false
}

// SetDocType gets a reference to the given NullableString and assigns it to the DocType field.
func (o *UriDetails) SetDocType(v string) {
	o.DocType.Set(&v)
}
// SetDocTypeNil sets the value for DocType to be an explicit nil
func (o *UriDetails) SetDocTypeNil() {
	o.DocType.Set(nil)
}

// UnsetDocType ensures that no value is present for DocType, not even an explicit nil
func (o *UriDetails) UnsetDocType() {
	o.DocType.Unset()
}

// GetDocName returns the DocName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UriDetails) GetDocName() string {
	if o == nil || o.DocName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DocName.Get()
}

// GetDocNameOk returns a tuple with the DocName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UriDetails) GetDocNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DocName.Get(), o.DocName.IsSet()
}

// HasDocName returns a boolean if a field has been set.
func (o *UriDetails) HasDocName() bool {
	if o != nil && o.DocName.IsSet() {
		return true
	}

	return false
}

// SetDocName gets a reference to the given NullableString and assigns it to the DocName field.
func (o *UriDetails) SetDocName(v string) {
	o.DocName.Set(&v)
}
// SetDocNameNil sets the value for DocName to be an explicit nil
func (o *UriDetails) SetDocNameNil() {
	o.DocName.Set(nil)
}

// UnsetDocName ensures that no value is present for DocName, not even an explicit nil
func (o *UriDetails) UnsetDocName() {
	o.DocName.Unset()
}

// GetDocId returns the DocId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UriDetails) GetDocId() string {
	if o == nil || o.DocId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DocId.Get()
}

// GetDocIdOk returns a tuple with the DocId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UriDetails) GetDocIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DocId.Get(), o.DocId.IsSet()
}

// HasDocId returns a boolean if a field has been set.
func (o *UriDetails) HasDocId() bool {
	if o != nil && o.DocId.IsSet() {
		return true
	}

	return false
}

// SetDocId gets a reference to the given NullableString and assigns it to the DocId field.
func (o *UriDetails) SetDocId(v string) {
	o.DocId.Set(&v)
}
// SetDocIdNil sets the value for DocId to be an explicit nil
func (o *UriDetails) SetDocIdNil() {
	o.DocId.Set(nil)
}

// UnsetDocId ensures that no value is present for DocId, not even an explicit nil
func (o *UriDetails) UnsetDocId() {
	o.DocId.Unset()
}

// GetIssuedOn returns the IssuedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UriDetails) GetIssuedOn() string {
	if o == nil || o.IssuedOn.Get() == nil {
		var ret string
		return ret
	}
	return *o.IssuedOn.Get()
}

// GetIssuedOnOk returns a tuple with the IssuedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UriDetails) GetIssuedOnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IssuedOn.Get(), o.IssuedOn.IsSet()
}

// HasIssuedOn returns a boolean if a field has been set.
func (o *UriDetails) HasIssuedOn() bool {
	if o != nil && o.IssuedOn.IsSet() {
		return true
	}

	return false
}

// SetIssuedOn gets a reference to the given NullableString and assigns it to the IssuedOn field.
func (o *UriDetails) SetIssuedOn(v string) {
	o.IssuedOn.Set(&v)
}
// SetIssuedOnNil sets the value for IssuedOn to be an explicit nil
func (o *UriDetails) SetIssuedOnNil() {
	o.IssuedOn.Set(nil)
}

// UnsetIssuedOn ensures that no value is present for IssuedOn, not even an explicit nil
func (o *UriDetails) UnsetIssuedOn() {
	o.IssuedOn.Unset()
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UriDetails) GetValidFrom() string {
	if o == nil || o.ValidFrom.Get() == nil {
		var ret string
		return ret
	}
	return *o.ValidFrom.Get()
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UriDetails) GetValidFromOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ValidFrom.Get(), o.ValidFrom.IsSet()
}

// HasValidFrom returns a boolean if a field has been set.
func (o *UriDetails) HasValidFrom() bool {
	if o != nil && o.ValidFrom.IsSet() {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given NullableString and assigns it to the ValidFrom field.
func (o *UriDetails) SetValidFrom(v string) {
	o.ValidFrom.Set(&v)
}
// SetValidFromNil sets the value for ValidFrom to be an explicit nil
func (o *UriDetails) SetValidFromNil() {
	o.ValidFrom.Set(nil)
}

// UnsetValidFrom ensures that no value is present for ValidFrom, not even an explicit nil
func (o *UriDetails) UnsetValidFrom() {
	o.ValidFrom.Unset()
}

// GetValidTo returns the ValidTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UriDetails) GetValidTo() string {
	if o == nil || o.ValidTo.Get() == nil {
		var ret string
		return ret
	}
	return *o.ValidTo.Get()
}

// GetValidToOk returns a tuple with the ValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UriDetails) GetValidToOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ValidTo.Get(), o.ValidTo.IsSet()
}

// HasValidTo returns a boolean if a field has been set.
func (o *UriDetails) HasValidTo() bool {
	if o != nil && o.ValidTo.IsSet() {
		return true
	}

	return false
}

// SetValidTo gets a reference to the given NullableString and assigns it to the ValidTo field.
func (o *UriDetails) SetValidTo(v string) {
	o.ValidTo.Set(&v)
}
// SetValidToNil sets the value for ValidTo to be an explicit nil
func (o *UriDetails) SetValidToNil() {
	o.ValidTo.Set(nil)
}

// UnsetValidTo ensures that no value is present for ValidTo, not even an explicit nil
func (o *UriDetails) UnsetValidTo() {
	o.ValidTo.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UriDetails) GetTimestamp() string {
	if o == nil || o.Timestamp.Get() == nil {
		var ret string
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UriDetails) GetTimestampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UriDetails) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableString and assigns it to the Timestamp field.
func (o *UriDetails) SetTimestamp(v string) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *UriDetails) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *UriDetails) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetAction returns the Action field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UriDetails) GetAction() string {
	if o == nil || o.Action.Get() == nil {
		var ret string
		return ret
	}
	return *o.Action.Get()
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UriDetails) GetActionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Action.Get(), o.Action.IsSet()
}

// HasAction returns a boolean if a field has been set.
func (o *UriDetails) HasAction() bool {
	if o != nil && o.Action.IsSet() {
		return true
	}

	return false
}

// SetAction gets a reference to the given NullableString and assigns it to the Action field.
func (o *UriDetails) SetAction(v string) {
	o.Action.Set(&v)
}
// SetActionNil sets the value for Action to be an explicit nil
func (o *UriDetails) SetActionNil() {
	o.Action.Set(nil)
}

// UnsetAction ensures that no value is present for Action, not even an explicit nil
func (o *UriDetails) UnsetAction() {
	o.Action.Unset()
}

func (o UriDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aadhaar.IsSet() {
		toSerialize["aadhaar"] = o.Aadhaar.Get()
	}
	if o.Uri.IsSet() {
		toSerialize["uri"] = o.Uri.Get()
	}
	if o.DocType.IsSet() {
		toSerialize["docType"] = o.DocType.Get()
	}
	if o.DocName.IsSet() {
		toSerialize["docName"] = o.DocName.Get()
	}
	if o.DocId.IsSet() {
		toSerialize["docId"] = o.DocId.Get()
	}
	if o.IssuedOn.IsSet() {
		toSerialize["issuedOn"] = o.IssuedOn.Get()
	}
	if o.ValidFrom.IsSet() {
		toSerialize["validFrom"] = o.ValidFrom.Get()
	}
	if o.ValidTo.IsSet() {
		toSerialize["validTo"] = o.ValidTo.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Action.IsSet() {
		toSerialize["action"] = o.Action.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUriDetails struct {
	value *UriDetails
	isSet bool
}

func (v NullableUriDetails) Get() *UriDetails {
	return v.value
}

func (v *NullableUriDetails) Set(val *UriDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableUriDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableUriDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUriDetails(val *UriDetails) *NullableUriDetails {
	return &NullableUriDetails{value: val, isSet: true}
}

func (v NullableUriDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUriDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


