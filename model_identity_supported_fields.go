/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
)

// IdentitySupportedFields struct for IdentitySupportedFields
type IdentitySupportedFields struct {
	Icon NullableString `json:"icon,omitempty"`
	Title NullableString `json:"title,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Key NullableString `json:"key,omitempty"`
	DataType NullableString `json:"dataType,omitempty"`
}

// NewIdentitySupportedFields instantiates a new IdentitySupportedFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentitySupportedFields() *IdentitySupportedFields {
	this := IdentitySupportedFields{}
	return &this
}

// NewIdentitySupportedFieldsWithDefaults instantiates a new IdentitySupportedFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentitySupportedFieldsWithDefaults() *IdentitySupportedFields {
	this := IdentitySupportedFields{}
	return &this
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentitySupportedFields) GetIcon() string {
	if o == nil || o.Icon.Get() == nil {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentitySupportedFields) GetIconOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *IdentitySupportedFields) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *IdentitySupportedFields) SetIcon(v string) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *IdentitySupportedFields) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *IdentitySupportedFields) UnsetIcon() {
	o.Icon.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentitySupportedFields) GetTitle() string {
	if o == nil || o.Title.Get() == nil {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentitySupportedFields) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *IdentitySupportedFields) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *IdentitySupportedFields) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *IdentitySupportedFields) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *IdentitySupportedFields) UnsetTitle() {
	o.Title.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentitySupportedFields) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentitySupportedFields) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *IdentitySupportedFields) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *IdentitySupportedFields) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *IdentitySupportedFields) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *IdentitySupportedFields) UnsetDescription() {
	o.Description.Unset()
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentitySupportedFields) GetKey() string {
	if o == nil || o.Key.Get() == nil {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentitySupportedFields) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *IdentitySupportedFields) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *IdentitySupportedFields) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *IdentitySupportedFields) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *IdentitySupportedFields) UnsetKey() {
	o.Key.Unset()
}

// GetDataType returns the DataType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentitySupportedFields) GetDataType() string {
	if o == nil || o.DataType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DataType.Get()
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentitySupportedFields) GetDataTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataType.Get(), o.DataType.IsSet()
}

// HasDataType returns a boolean if a field has been set.
func (o *IdentitySupportedFields) HasDataType() bool {
	if o != nil && o.DataType.IsSet() {
		return true
	}

	return false
}

// SetDataType gets a reference to the given NullableString and assigns it to the DataType field.
func (o *IdentitySupportedFields) SetDataType(v string) {
	o.DataType.Set(&v)
}
// SetDataTypeNil sets the value for DataType to be an explicit nil
func (o *IdentitySupportedFields) SetDataTypeNil() {
	o.DataType.Set(nil)
}

// UnsetDataType ensures that no value is present for DataType, not even an explicit nil
func (o *IdentitySupportedFields) UnsetDataType() {
	o.DataType.Unset()
}

func (o IdentitySupportedFields) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.DataType.IsSet() {
		toSerialize["dataType"] = o.DataType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIdentitySupportedFields struct {
	value *IdentitySupportedFields
	isSet bool
}

func (v NullableIdentitySupportedFields) Get() *IdentitySupportedFields {
	return v.value
}

func (v *NullableIdentitySupportedFields) Set(val *IdentitySupportedFields) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentitySupportedFields) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentitySupportedFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentitySupportedFields(val *IdentitySupportedFields) *NullableIdentitySupportedFields {
	return &NullableIdentitySupportedFields{value: val, isSet: true}
}

func (v NullableIdentitySupportedFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentitySupportedFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


