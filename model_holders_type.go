/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// HoldersType the model 'HoldersType'
type HoldersType string

// List of HoldersType
const (
	SINGLE HoldersType = "Single"
	JOINT HoldersType = "Joint"
)

// All allowed values of HoldersType enum
var AllowedHoldersTypeEnumValues = []HoldersType{
	"Single",
	"Joint",
}

func (v *HoldersType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HoldersType(value)
	for _, existing := range AllowedHoldersTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HoldersType", value)
}

// NewHoldersTypeFromValue returns a pointer to a valid HoldersType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHoldersTypeFromValue(v string) (*HoldersType, error) {
	ev := HoldersType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HoldersType: valid values are %v", v, AllowedHoldersTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HoldersType) IsValid() bool {
	for _, existing := range AllowedHoldersTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HoldersType value
func (v HoldersType) Ptr() *HoldersType {
	return &v
}

type NullableHoldersType struct {
	value *HoldersType
	isSet bool
}

func (v NullableHoldersType) Get() *HoldersType {
	return v.value
}

func (v *NullableHoldersType) Set(val *HoldersType) {
	v.value = val
	v.isSet = true
}

func (v NullableHoldersType) IsSet() bool {
	return v.isSet
}

func (v *NullableHoldersType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHoldersType(val *HoldersType) *NullableHoldersType {
	return &NullableHoldersType{value: val, isSet: true}
}

func (v NullableHoldersType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHoldersType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

