/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// ConsentDetails ConsentDetails : Consent details.
type ConsentDetails struct {
	// Consent id.
	Id string `json:"id"`
	// Consent request id.
	RequestId string `json:"requestId"`
	// Consent request template id.
	TemplateId *string `json:"templateId,omitempty"`
	// Consent title.
	Title string `json:"title"`
	// Consent description.
	Description string `json:"description"`
	// Consent purpose.
	Purpose *string `json:"purpose,omitempty"`
	Status DataConsentStatus `json:"status"`
	// Transaction id.
	TransactionId *string `json:"transactionId,omitempty"`
	// Consent approval datetime in UTC timezone.
	ApprovedAtUtc time.Time `json:"approvedAtUtc"`
	// Data access expiration datetime in UTC timezone.
	DataAccessExpiresAtUtc time.Time `json:"dataAccessExpiresAtUtc"`
	// Consent revocation datetime in UTC timezone.
	RevokedAtUtc *time.Time `json:"revokedAtUtc,omitempty"`
	// List of supported collectible types.
	Collectables []CollectibleTypes `json:"collectables"`
	// Consented identity details.
	Identifiers []ConsentedIdentifier `json:"identifiers,omitempty"`
	// List of consented documents.
	Documents []ConsentedDocument `json:"documents,omitempty"`
	// List of consented medical records.
	MedicalRecords []ConsentedMedicalRecord `json:"medicalRecords,omitempty"`
	// List of consented financial accounts.
	FinancialAccounts []ConsentedFinancialAccount `json:"financialAccounts,omitempty"`
}

// NewConsentDetails instantiates a new ConsentDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsentDetails(id string, requestId string, title string, description string, status DataConsentStatus, approvedAtUtc time.Time, dataAccessExpiresAtUtc time.Time, collectables []CollectibleTypes) *ConsentDetails {
	this := ConsentDetails{}
	this.Id = id
	this.RequestId = requestId
	this.Title = title
	this.Description = description
	this.Status = status
	this.ApprovedAtUtc = approvedAtUtc
	this.DataAccessExpiresAtUtc = dataAccessExpiresAtUtc
	this.Collectables = collectables
	return &this
}

// NewConsentDetailsWithDefaults instantiates a new ConsentDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentDetailsWithDefaults() *ConsentDetails {
	this := ConsentDetails{}
	return &this
}

// GetId returns the Id field value
func (o *ConsentDetails) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConsentDetails) SetId(v string) {
	o.Id = v
}

// GetRequestId returns the RequestId field value
func (o *ConsentDetails) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *ConsentDetails) SetRequestId(v string) {
	o.RequestId = v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *ConsentDetails) GetTemplateId() string {
	if o == nil || o.TemplateId == nil {
		var ret string
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetTemplateIdOk() (*string, bool) {
	if o == nil || o.TemplateId == nil {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *ConsentDetails) HasTemplateId() bool {
	if o != nil && o.TemplateId != nil {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given string and assigns it to the TemplateId field.
func (o *ConsentDetails) SetTemplateId(v string) {
	o.TemplateId = &v
}

// GetTitle returns the Title field value
func (o *ConsentDetails) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ConsentDetails) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *ConsentDetails) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ConsentDetails) SetDescription(v string) {
	o.Description = v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *ConsentDetails) GetPurpose() string {
	if o == nil || o.Purpose == nil {
		var ret string
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetPurposeOk() (*string, bool) {
	if o == nil || o.Purpose == nil {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *ConsentDetails) HasPurpose() bool {
	if o != nil && o.Purpose != nil {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given string and assigns it to the Purpose field.
func (o *ConsentDetails) SetPurpose(v string) {
	o.Purpose = &v
}

// GetStatus returns the Status field value
func (o *ConsentDetails) GetStatus() DataConsentStatus {
	if o == nil {
		var ret DataConsentStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetStatusOk() (*DataConsentStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ConsentDetails) SetStatus(v DataConsentStatus) {
	o.Status = v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *ConsentDetails) GetTransactionId() string {
	if o == nil || o.TransactionId == nil {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetTransactionIdOk() (*string, bool) {
	if o == nil || o.TransactionId == nil {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *ConsentDetails) HasTransactionId() bool {
	if o != nil && o.TransactionId != nil {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *ConsentDetails) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetApprovedAtUtc returns the ApprovedAtUtc field value
func (o *ConsentDetails) GetApprovedAtUtc() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ApprovedAtUtc
}

// GetApprovedAtUtcOk returns a tuple with the ApprovedAtUtc field value
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetApprovedAtUtcOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApprovedAtUtc, true
}

// SetApprovedAtUtc sets field value
func (o *ConsentDetails) SetApprovedAtUtc(v time.Time) {
	o.ApprovedAtUtc = v
}

// GetDataAccessExpiresAtUtc returns the DataAccessExpiresAtUtc field value
func (o *ConsentDetails) GetDataAccessExpiresAtUtc() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DataAccessExpiresAtUtc
}

// GetDataAccessExpiresAtUtcOk returns a tuple with the DataAccessExpiresAtUtc field value
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetDataAccessExpiresAtUtcOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataAccessExpiresAtUtc, true
}

// SetDataAccessExpiresAtUtc sets field value
func (o *ConsentDetails) SetDataAccessExpiresAtUtc(v time.Time) {
	o.DataAccessExpiresAtUtc = v
}

// GetRevokedAtUtc returns the RevokedAtUtc field value if set, zero value otherwise.
func (o *ConsentDetails) GetRevokedAtUtc() time.Time {
	if o == nil || o.RevokedAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.RevokedAtUtc
}

// GetRevokedAtUtcOk returns a tuple with the RevokedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetRevokedAtUtcOk() (*time.Time, bool) {
	if o == nil || o.RevokedAtUtc == nil {
		return nil, false
	}
	return o.RevokedAtUtc, true
}

// HasRevokedAtUtc returns a boolean if a field has been set.
func (o *ConsentDetails) HasRevokedAtUtc() bool {
	if o != nil && o.RevokedAtUtc != nil {
		return true
	}

	return false
}

// SetRevokedAtUtc gets a reference to the given time.Time and assigns it to the RevokedAtUtc field.
func (o *ConsentDetails) SetRevokedAtUtc(v time.Time) {
	o.RevokedAtUtc = &v
}

// GetCollectables returns the Collectables field value
func (o *ConsentDetails) GetCollectables() []CollectibleTypes {
	if o == nil {
		var ret []CollectibleTypes
		return ret
	}

	return o.Collectables
}

// GetCollectablesOk returns a tuple with the Collectables field value
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetCollectablesOk() ([]CollectibleTypes, bool) {
	if o == nil {
		return nil, false
	}
	return o.Collectables, true
}

// SetCollectables sets field value
func (o *ConsentDetails) SetCollectables(v []CollectibleTypes) {
	o.Collectables = v
}

// GetIdentifiers returns the Identifiers field value if set, zero value otherwise.
func (o *ConsentDetails) GetIdentifiers() []ConsentedIdentifier {
	if o == nil || o.Identifiers == nil {
		var ret []ConsentedIdentifier
		return ret
	}
	return o.Identifiers
}

// GetIdentifiersOk returns a tuple with the Identifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetIdentifiersOk() ([]ConsentedIdentifier, bool) {
	if o == nil || o.Identifiers == nil {
		return nil, false
	}
	return o.Identifiers, true
}

// HasIdentifiers returns a boolean if a field has been set.
func (o *ConsentDetails) HasIdentifiers() bool {
	if o != nil && o.Identifiers != nil {
		return true
	}

	return false
}

// SetIdentifiers gets a reference to the given []ConsentedIdentifier and assigns it to the Identifiers field.
func (o *ConsentDetails) SetIdentifiers(v []ConsentedIdentifier) {
	o.Identifiers = v
}

// GetDocuments returns the Documents field value if set, zero value otherwise.
func (o *ConsentDetails) GetDocuments() []ConsentedDocument {
	if o == nil || o.Documents == nil {
		var ret []ConsentedDocument
		return ret
	}
	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetDocumentsOk() ([]ConsentedDocument, bool) {
	if o == nil || o.Documents == nil {
		return nil, false
	}
	return o.Documents, true
}

// HasDocuments returns a boolean if a field has been set.
func (o *ConsentDetails) HasDocuments() bool {
	if o != nil && o.Documents != nil {
		return true
	}

	return false
}

// SetDocuments gets a reference to the given []ConsentedDocument and assigns it to the Documents field.
func (o *ConsentDetails) SetDocuments(v []ConsentedDocument) {
	o.Documents = v
}

// GetMedicalRecords returns the MedicalRecords field value if set, zero value otherwise.
func (o *ConsentDetails) GetMedicalRecords() []ConsentedMedicalRecord {
	if o == nil || o.MedicalRecords == nil {
		var ret []ConsentedMedicalRecord
		return ret
	}
	return o.MedicalRecords
}

// GetMedicalRecordsOk returns a tuple with the MedicalRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetMedicalRecordsOk() ([]ConsentedMedicalRecord, bool) {
	if o == nil || o.MedicalRecords == nil {
		return nil, false
	}
	return o.MedicalRecords, true
}

// HasMedicalRecords returns a boolean if a field has been set.
func (o *ConsentDetails) HasMedicalRecords() bool {
	if o != nil && o.MedicalRecords != nil {
		return true
	}

	return false
}

// SetMedicalRecords gets a reference to the given []ConsentedMedicalRecord and assigns it to the MedicalRecords field.
func (o *ConsentDetails) SetMedicalRecords(v []ConsentedMedicalRecord) {
	o.MedicalRecords = v
}

// GetFinancialAccounts returns the FinancialAccounts field value if set, zero value otherwise.
func (o *ConsentDetails) GetFinancialAccounts() []ConsentedFinancialAccount {
	if o == nil || o.FinancialAccounts == nil {
		var ret []ConsentedFinancialAccount
		return ret
	}
	return o.FinancialAccounts
}

// GetFinancialAccountsOk returns a tuple with the FinancialAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentDetails) GetFinancialAccountsOk() ([]ConsentedFinancialAccount, bool) {
	if o == nil || o.FinancialAccounts == nil {
		return nil, false
	}
	return o.FinancialAccounts, true
}

// HasFinancialAccounts returns a boolean if a field has been set.
func (o *ConsentDetails) HasFinancialAccounts() bool {
	if o != nil && o.FinancialAccounts != nil {
		return true
	}

	return false
}

// SetFinancialAccounts gets a reference to the given []ConsentedFinancialAccount and assigns it to the FinancialAccounts field.
func (o *ConsentDetails) SetFinancialAccounts(v []ConsentedFinancialAccount) {
	o.FinancialAccounts = v
}

func (o ConsentDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["requestId"] = o.RequestId
	}
	if o.TemplateId != nil {
		toSerialize["templateId"] = o.TemplateId
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.Purpose != nil {
		toSerialize["purpose"] = o.Purpose
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.TransactionId != nil {
		toSerialize["transactionId"] = o.TransactionId
	}
	if true {
		toSerialize["approvedAtUtc"] = o.ApprovedAtUtc
	}
	if true {
		toSerialize["dataAccessExpiresAtUtc"] = o.DataAccessExpiresAtUtc
	}
	if o.RevokedAtUtc != nil {
		toSerialize["revokedAtUtc"] = o.RevokedAtUtc
	}
	if true {
		toSerialize["collectables"] = o.Collectables
	}
	if o.Identifiers != nil {
		toSerialize["identifiers"] = o.Identifiers
	}
	if o.Documents != nil {
		toSerialize["documents"] = o.Documents
	}
	if o.MedicalRecords != nil {
		toSerialize["medicalRecords"] = o.MedicalRecords
	}
	if o.FinancialAccounts != nil {
		toSerialize["financialAccounts"] = o.FinancialAccounts
	}
	return json.Marshal(toSerialize)
}

type NullableConsentDetails struct {
	value *ConsentDetails
	isSet bool
}

func (v NullableConsentDetails) Get() *ConsentDetails {
	return v.value
}

func (v *NullableConsentDetails) Set(val *ConsentDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentDetails(val *ConsentDetails) *NullableConsentDetails {
	return &NullableConsentDetails{value: val, isSet: true}
}

func (v NullableConsentDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


