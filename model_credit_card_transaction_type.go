/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// CreditCardTransactionType the model 'CreditCardTransactionType'
type CreditCardTransactionType string

// List of CreditCardTransactionType
const (
	DEBIT CreditCardTransactionType = "Debit"
	CREDIT CreditCardTransactionType = "Credit"
)

// All allowed values of CreditCardTransactionType enum
var AllowedCreditCardTransactionTypeEnumValues = []CreditCardTransactionType{
	"Debit",
	"Credit",
}

func (v *CreditCardTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CreditCardTransactionType(value)
	for _, existing := range AllowedCreditCardTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CreditCardTransactionType", value)
}

// NewCreditCardTransactionTypeFromValue returns a pointer to a valid CreditCardTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreditCardTransactionTypeFromValue(v string) (*CreditCardTransactionType, error) {
	ev := CreditCardTransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CreditCardTransactionType: valid values are %v", v, AllowedCreditCardTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreditCardTransactionType) IsValid() bool {
	for _, existing := range AllowedCreditCardTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CreditCardTransactionType value
func (v CreditCardTransactionType) Ptr() *CreditCardTransactionType {
	return &v
}

type NullableCreditCardTransactionType struct {
	value *CreditCardTransactionType
	isSet bool
}

func (v NullableCreditCardTransactionType) Get() *CreditCardTransactionType {
	return v.value
}

func (v *NullableCreditCardTransactionType) Set(val *CreditCardTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditCardTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditCardTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditCardTransactionType(val *CreditCardTransactionType) *NullableCreditCardTransactionType {
	return &NullableCreditCardTransactionType{value: val, isSet: true}
}

func (v NullableCreditCardTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditCardTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

