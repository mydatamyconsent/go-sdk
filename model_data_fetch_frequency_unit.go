/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"fmt"
)

// DataFetchFrequencyUnit the model 'DataFetchFrequencyUnit'
type DataFetchFrequencyUnit string

// List of DataFetchFrequencyUnit
const (
	HOURLY DataFetchFrequencyUnit = "Hourly"
	DAILY DataFetchFrequencyUnit = "Daily"
	MONTHLY DataFetchFrequencyUnit = "Monthly"
	YEARLY DataFetchFrequencyUnit = "Yearly"
	UNLIMITED DataFetchFrequencyUnit = "Unlimited"
)

var allowedDataFetchFrequencyUnitEnumValues = []DataFetchFrequencyUnit{
	"Hourly",
	"Daily",
	"Monthly",
	"Yearly",
	"Unlimited",
}

func (v *DataFetchFrequencyUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataFetchFrequencyUnit(value)
	for _, existing := range allowedDataFetchFrequencyUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataFetchFrequencyUnit", value)
}

// NewDataFetchFrequencyUnitFromValue returns a pointer to a valid DataFetchFrequencyUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataFetchFrequencyUnitFromValue(v string) (*DataFetchFrequencyUnit, error) {
	ev := DataFetchFrequencyUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataFetchFrequencyUnit: valid values are %v", v, allowedDataFetchFrequencyUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataFetchFrequencyUnit) IsValid() bool {
	for _, existing := range allowedDataFetchFrequencyUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataFetchFrequencyUnit value
func (v DataFetchFrequencyUnit) Ptr() *DataFetchFrequencyUnit {
	return &v
}

type NullableDataFetchFrequencyUnit struct {
	value *DataFetchFrequencyUnit
	isSet bool
}

func (v NullableDataFetchFrequencyUnit) Get() *DataFetchFrequencyUnit {
	return v.value
}

func (v *NullableDataFetchFrequencyUnit) Set(val *DataFetchFrequencyUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableDataFetchFrequencyUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableDataFetchFrequencyUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataFetchFrequencyUnit(val *DataFetchFrequencyUnit) *NullableDataFetchFrequencyUnit {
	return &NullableDataFetchFrequencyUnit{value: val, isSet: true}
}

func (v NullableDataFetchFrequencyUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataFetchFrequencyUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

