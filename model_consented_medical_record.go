/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// ConsentedMedicalRecord ConsentedMedicalRecord : Consented medical record details.
type ConsentedMedicalRecord struct {
	// Health id.
	Id *string `json:"id,omitempty"`
	// Health field title.
	FieldTitle string `json:"fieldTitle"`
	// Health field slug.
	FieldSlug string `json:"fieldSlug"`
	// Issuer id.
	IssuerId string `json:"issuerId"`
	// Issuer name.
	IssuerName string `json:"issuerName"`
	// health category type.
	Category string `json:"category"`
	// To Date
	ToDate *time.Time `json:"toDate,omitempty"`
	// From Date
	FromDate *time.Time `json:"fromDate,omitempty"`
}

// NewConsentedMedicalRecord instantiates a new ConsentedMedicalRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsentedMedicalRecord(fieldTitle string, fieldSlug string, issuerId string, issuerName string, category string) *ConsentedMedicalRecord {
	this := ConsentedMedicalRecord{}
	this.FieldTitle = fieldTitle
	this.FieldSlug = fieldSlug
	this.IssuerId = issuerId
	this.IssuerName = issuerName
	this.Category = category
	return &this
}

// NewConsentedMedicalRecordWithDefaults instantiates a new ConsentedMedicalRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentedMedicalRecordWithDefaults() *ConsentedMedicalRecord {
	this := ConsentedMedicalRecord{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConsentedMedicalRecord) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentedMedicalRecord) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConsentedMedicalRecord) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConsentedMedicalRecord) SetId(v string) {
	o.Id = &v
}

// GetFieldTitle returns the FieldTitle field value
func (o *ConsentedMedicalRecord) GetFieldTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldTitle
}

// GetFieldTitleOk returns a tuple with the FieldTitle field value
// and a boolean to check if the value has been set.
func (o *ConsentedMedicalRecord) GetFieldTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldTitle, true
}

// SetFieldTitle sets field value
func (o *ConsentedMedicalRecord) SetFieldTitle(v string) {
	o.FieldTitle = v
}

// GetFieldSlug returns the FieldSlug field value
func (o *ConsentedMedicalRecord) GetFieldSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldSlug
}

// GetFieldSlugOk returns a tuple with the FieldSlug field value
// and a boolean to check if the value has been set.
func (o *ConsentedMedicalRecord) GetFieldSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldSlug, true
}

// SetFieldSlug sets field value
func (o *ConsentedMedicalRecord) SetFieldSlug(v string) {
	o.FieldSlug = v
}

// GetIssuerId returns the IssuerId field value
func (o *ConsentedMedicalRecord) GetIssuerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuerId
}

// GetIssuerIdOk returns a tuple with the IssuerId field value
// and a boolean to check if the value has been set.
func (o *ConsentedMedicalRecord) GetIssuerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuerId, true
}

// SetIssuerId sets field value
func (o *ConsentedMedicalRecord) SetIssuerId(v string) {
	o.IssuerId = v
}

// GetIssuerName returns the IssuerName field value
func (o *ConsentedMedicalRecord) GetIssuerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuerName
}

// GetIssuerNameOk returns a tuple with the IssuerName field value
// and a boolean to check if the value has been set.
func (o *ConsentedMedicalRecord) GetIssuerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuerName, true
}

// SetIssuerName sets field value
func (o *ConsentedMedicalRecord) SetIssuerName(v string) {
	o.IssuerName = v
}

// GetCategory returns the Category field value
func (o *ConsentedMedicalRecord) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *ConsentedMedicalRecord) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *ConsentedMedicalRecord) SetCategory(v string) {
	o.Category = v
}

// GetToDate returns the ToDate field value if set, zero value otherwise.
func (o *ConsentedMedicalRecord) GetToDate() time.Time {
	if o == nil || o.ToDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentedMedicalRecord) GetToDateOk() (*time.Time, bool) {
	if o == nil || o.ToDate == nil {
		return nil, false
	}
	return o.ToDate, true
}

// HasToDate returns a boolean if a field has been set.
func (o *ConsentedMedicalRecord) HasToDate() bool {
	if o != nil && o.ToDate != nil {
		return true
	}

	return false
}

// SetToDate gets a reference to the given time.Time and assigns it to the ToDate field.
func (o *ConsentedMedicalRecord) SetToDate(v time.Time) {
	o.ToDate = &v
}

// GetFromDate returns the FromDate field value if set, zero value otherwise.
func (o *ConsentedMedicalRecord) GetFromDate() time.Time {
	if o == nil || o.FromDate == nil {
		var ret time.Time
		return ret
	}
	return *o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentedMedicalRecord) GetFromDateOk() (*time.Time, bool) {
	if o == nil || o.FromDate == nil {
		return nil, false
	}
	return o.FromDate, true
}

// HasFromDate returns a boolean if a field has been set.
func (o *ConsentedMedicalRecord) HasFromDate() bool {
	if o != nil && o.FromDate != nil {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given time.Time and assigns it to the FromDate field.
func (o *ConsentedMedicalRecord) SetFromDate(v time.Time) {
	o.FromDate = &v
}

func (o ConsentedMedicalRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["fieldTitle"] = o.FieldTitle
	}
	if true {
		toSerialize["fieldSlug"] = o.FieldSlug
	}
	if true {
		toSerialize["issuerId"] = o.IssuerId
	}
	if true {
		toSerialize["issuerName"] = o.IssuerName
	}
	if true {
		toSerialize["category"] = o.Category
	}
	if o.ToDate != nil {
		toSerialize["toDate"] = o.ToDate
	}
	if o.FromDate != nil {
		toSerialize["fromDate"] = o.FromDate
	}
	return json.Marshal(toSerialize)
}

type NullableConsentedMedicalRecord struct {
	value *ConsentedMedicalRecord
	isSet bool
}

func (v NullableConsentedMedicalRecord) Get() *ConsentedMedicalRecord {
	return v.value
}

func (v *NullableConsentedMedicalRecord) Set(val *ConsentedMedicalRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentedMedicalRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentedMedicalRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentedMedicalRecord(val *ConsentedMedicalRecord) *NullableConsentedMedicalRecord {
	return &NullableConsentedMedicalRecord{value: val, isSet: true}
}

func (v NullableConsentedMedicalRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentedMedicalRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


