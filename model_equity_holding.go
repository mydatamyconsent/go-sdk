/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// EquityHolding struct for EquityHolding
type EquityHolding struct {
	IssuerName string `json:"issuerName"`
	Exchange string `json:"exchange"`
	Isin string `json:"isin"`
	Units int64 `json:"units"`
	InvestmentDateTime *time.Time `json:"investmentDateTime,omitempty"`
	Rate *string `json:"rate,omitempty"`
	LastTradedPrice *string `json:"lastTradedPrice,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewEquityHolding instantiates a new EquityHolding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquityHolding(issuerName string, exchange string, isin string, units int64) *EquityHolding {
	this := EquityHolding{}
	this.IssuerName = issuerName
	this.Exchange = exchange
	this.Isin = isin
	this.Units = units
	return &this
}

// NewEquityHoldingWithDefaults instantiates a new EquityHolding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquityHoldingWithDefaults() *EquityHolding {
	this := EquityHolding{}
	return &this
}

// GetIssuerName returns the IssuerName field value
func (o *EquityHolding) GetIssuerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuerName
}

// GetIssuerNameOk returns a tuple with the IssuerName field value
// and a boolean to check if the value has been set.
func (o *EquityHolding) GetIssuerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuerName, true
}

// SetIssuerName sets field value
func (o *EquityHolding) SetIssuerName(v string) {
	o.IssuerName = v
}

// GetExchange returns the Exchange field value
func (o *EquityHolding) GetExchange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value
// and a boolean to check if the value has been set.
func (o *EquityHolding) GetExchangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exchange, true
}

// SetExchange sets field value
func (o *EquityHolding) SetExchange(v string) {
	o.Exchange = v
}

// GetIsin returns the Isin field value
func (o *EquityHolding) GetIsin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Isin
}

// GetIsinOk returns a tuple with the Isin field value
// and a boolean to check if the value has been set.
func (o *EquityHolding) GetIsinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Isin, true
}

// SetIsin sets field value
func (o *EquityHolding) SetIsin(v string) {
	o.Isin = v
}

// GetUnits returns the Units field value
func (o *EquityHolding) GetUnits() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value
// and a boolean to check if the value has been set.
func (o *EquityHolding) GetUnitsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Units, true
}

// SetUnits sets field value
func (o *EquityHolding) SetUnits(v int64) {
	o.Units = v
}

// GetInvestmentDateTime returns the InvestmentDateTime field value if set, zero value otherwise.
func (o *EquityHolding) GetInvestmentDateTime() time.Time {
	if o == nil || o.InvestmentDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.InvestmentDateTime
}

// GetInvestmentDateTimeOk returns a tuple with the InvestmentDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquityHolding) GetInvestmentDateTimeOk() (*time.Time, bool) {
	if o == nil || o.InvestmentDateTime == nil {
		return nil, false
	}
	return o.InvestmentDateTime, true
}

// HasInvestmentDateTime returns a boolean if a field has been set.
func (o *EquityHolding) HasInvestmentDateTime() bool {
	if o != nil && o.InvestmentDateTime != nil {
		return true
	}

	return false
}

// SetInvestmentDateTime gets a reference to the given time.Time and assigns it to the InvestmentDateTime field.
func (o *EquityHolding) SetInvestmentDateTime(v time.Time) {
	o.InvestmentDateTime = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *EquityHolding) GetRate() string {
	if o == nil || o.Rate == nil {
		var ret string
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquityHolding) GetRateOk() (*string, bool) {
	if o == nil || o.Rate == nil {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *EquityHolding) HasRate() bool {
	if o != nil && o.Rate != nil {
		return true
	}

	return false
}

// SetRate gets a reference to the given string and assigns it to the Rate field.
func (o *EquityHolding) SetRate(v string) {
	o.Rate = &v
}

// GetLastTradedPrice returns the LastTradedPrice field value if set, zero value otherwise.
func (o *EquityHolding) GetLastTradedPrice() string {
	if o == nil || o.LastTradedPrice == nil {
		var ret string
		return ret
	}
	return *o.LastTradedPrice
}

// GetLastTradedPriceOk returns a tuple with the LastTradedPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquityHolding) GetLastTradedPriceOk() (*string, bool) {
	if o == nil || o.LastTradedPrice == nil {
		return nil, false
	}
	return o.LastTradedPrice, true
}

// HasLastTradedPrice returns a boolean if a field has been set.
func (o *EquityHolding) HasLastTradedPrice() bool {
	if o != nil && o.LastTradedPrice != nil {
		return true
	}

	return false
}

// SetLastTradedPrice gets a reference to the given string and assigns it to the LastTradedPrice field.
func (o *EquityHolding) SetLastTradedPrice(v string) {
	o.LastTradedPrice = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EquityHolding) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EquityHolding) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EquityHolding) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EquityHolding) SetDescription(v string) {
	o.Description = &v
}

func (o EquityHolding) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["issuerName"] = o.IssuerName
	}
	if true {
		toSerialize["exchange"] = o.Exchange
	}
	if true {
		toSerialize["isin"] = o.Isin
	}
	if true {
		toSerialize["units"] = o.Units
	}
	if o.InvestmentDateTime != nil {
		toSerialize["investmentDateTime"] = o.InvestmentDateTime
	}
	if o.Rate != nil {
		toSerialize["rate"] = o.Rate
	}
	if o.LastTradedPrice != nil {
		toSerialize["lastTradedPrice"] = o.LastTradedPrice
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableEquityHolding struct {
	value *EquityHolding
	isSet bool
}

func (v NullableEquityHolding) Get() *EquityHolding {
	return v.value
}

func (v *NullableEquityHolding) Set(val *EquityHolding) {
	v.value = val
	v.isSet = true
}

func (v NullableEquityHolding) IsSet() bool {
	return v.isSet
}

func (v *NullableEquityHolding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquityHolding(val *EquityHolding) *NullableEquityHolding {
	return &NullableEquityHolding{value: val, isSet: true}
}

func (v NullableEquityHolding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquityHolding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


