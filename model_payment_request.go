/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// PaymentRequest struct for PaymentRequest
type PaymentRequest struct {
	Identifier NullableString `json:"identifier,omitempty"`
	Amount NullableString `json:"amount,omitempty"`
	CurrencyCode NullableString `json:"currencyCode,omitempty"`
	PaymentUrl NullableString `json:"paymentUrl,omitempty"`
	Description NullableString `json:"description,omitempty"`
	DueByUtc *time.Time `json:"dueByUtc,omitempty"`
}

// NewPaymentRequest instantiates a new PaymentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentRequest() *PaymentRequest {
	this := PaymentRequest{}
	return &this
}

// NewPaymentRequestWithDefaults instantiates a new PaymentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentRequestWithDefaults() *PaymentRequest {
	this := PaymentRequest{}
	return &this
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentRequest) GetIdentifier() string {
	if o == nil || o.Identifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.Identifier.Get()
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentRequest) GetIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Identifier.Get(), o.Identifier.IsSet()
}

// HasIdentifier returns a boolean if a field has been set.
func (o *PaymentRequest) HasIdentifier() bool {
	if o != nil && o.Identifier.IsSet() {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given NullableString and assigns it to the Identifier field.
func (o *PaymentRequest) SetIdentifier(v string) {
	o.Identifier.Set(&v)
}
// SetIdentifierNil sets the value for Identifier to be an explicit nil
func (o *PaymentRequest) SetIdentifierNil() {
	o.Identifier.Set(nil)
}

// UnsetIdentifier ensures that no value is present for Identifier, not even an explicit nil
func (o *PaymentRequest) UnsetIdentifier() {
	o.Identifier.Unset()
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentRequest) GetAmount() string {
	if o == nil || o.Amount.Get() == nil {
		var ret string
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentRequest) GetAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *PaymentRequest) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableString and assigns it to the Amount field.
func (o *PaymentRequest) SetAmount(v string) {
	o.Amount.Set(&v)
}
// SetAmountNil sets the value for Amount to be an explicit nil
func (o *PaymentRequest) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *PaymentRequest) UnsetAmount() {
	o.Amount.Unset()
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentRequest) GetCurrencyCode() string {
	if o == nil || o.CurrencyCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrencyCode.Get()
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentRequest) GetCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrencyCode.Get(), o.CurrencyCode.IsSet()
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *PaymentRequest) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode.IsSet() {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given NullableString and assigns it to the CurrencyCode field.
func (o *PaymentRequest) SetCurrencyCode(v string) {
	o.CurrencyCode.Set(&v)
}
// SetCurrencyCodeNil sets the value for CurrencyCode to be an explicit nil
func (o *PaymentRequest) SetCurrencyCodeNil() {
	o.CurrencyCode.Set(nil)
}

// UnsetCurrencyCode ensures that no value is present for CurrencyCode, not even an explicit nil
func (o *PaymentRequest) UnsetCurrencyCode() {
	o.CurrencyCode.Unset()
}

// GetPaymentUrl returns the PaymentUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentRequest) GetPaymentUrl() string {
	if o == nil || o.PaymentUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.PaymentUrl.Get()
}

// GetPaymentUrlOk returns a tuple with the PaymentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentRequest) GetPaymentUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PaymentUrl.Get(), o.PaymentUrl.IsSet()
}

// HasPaymentUrl returns a boolean if a field has been set.
func (o *PaymentRequest) HasPaymentUrl() bool {
	if o != nil && o.PaymentUrl.IsSet() {
		return true
	}

	return false
}

// SetPaymentUrl gets a reference to the given NullableString and assigns it to the PaymentUrl field.
func (o *PaymentRequest) SetPaymentUrl(v string) {
	o.PaymentUrl.Set(&v)
}
// SetPaymentUrlNil sets the value for PaymentUrl to be an explicit nil
func (o *PaymentRequest) SetPaymentUrlNil() {
	o.PaymentUrl.Set(nil)
}

// UnsetPaymentUrl ensures that no value is present for PaymentUrl, not even an explicit nil
func (o *PaymentRequest) UnsetPaymentUrl() {
	o.PaymentUrl.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentRequest) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentRequest) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PaymentRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PaymentRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PaymentRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PaymentRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetDueByUtc returns the DueByUtc field value if set, zero value otherwise.
func (o *PaymentRequest) GetDueByUtc() time.Time {
	if o == nil || o.DueByUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.DueByUtc
}

// GetDueByUtcOk returns a tuple with the DueByUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetDueByUtcOk() (*time.Time, bool) {
	if o == nil || o.DueByUtc == nil {
		return nil, false
	}
	return o.DueByUtc, true
}

// HasDueByUtc returns a boolean if a field has been set.
func (o *PaymentRequest) HasDueByUtc() bool {
	if o != nil && o.DueByUtc != nil {
		return true
	}

	return false
}

// SetDueByUtc gets a reference to the given time.Time and assigns it to the DueByUtc field.
func (o *PaymentRequest) SetDueByUtc(v time.Time) {
	o.DueByUtc = &v
}

func (o PaymentRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Identifier.IsSet() {
		toSerialize["identifier"] = o.Identifier.Get()
	}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	if o.CurrencyCode.IsSet() {
		toSerialize["currencyCode"] = o.CurrencyCode.Get()
	}
	if o.PaymentUrl.IsSet() {
		toSerialize["paymentUrl"] = o.PaymentUrl.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.DueByUtc != nil {
		toSerialize["dueByUtc"] = o.DueByUtc
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentRequest struct {
	value *PaymentRequest
	isSet bool
}

func (v NullablePaymentRequest) Get() *PaymentRequest {
	return v.value
}

func (v *NullablePaymentRequest) Set(val *PaymentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentRequest(val *PaymentRequest) *NullablePaymentRequest {
	return &NullablePaymentRequest{value: val, isSet: true}
}

func (v NullablePaymentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


