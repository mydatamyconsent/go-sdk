/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// PaymentRequest struct for PaymentRequest
type PaymentRequest struct {
	Identifier string `json:"identifier"`
	Items []PaymentOrderItem `json:"items"`
	CurrencyCode string `json:"currencyCode"`
	PaymentUrl *string `json:"paymentUrl,omitempty"`
	Description string `json:"description"`
	DueByUtc time.Time `json:"dueByUtc"`
}

// NewPaymentRequest instantiates a new PaymentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentRequest(identifier string, items []PaymentOrderItem, currencyCode string, description string, dueByUtc time.Time) *PaymentRequest {
	this := PaymentRequest{}
	this.Identifier = identifier
	this.Items = items
	this.CurrencyCode = currencyCode
	this.Description = description
	this.DueByUtc = dueByUtc
	return &this
}

// NewPaymentRequestWithDefaults instantiates a new PaymentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentRequestWithDefaults() *PaymentRequest {
	this := PaymentRequest{}
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *PaymentRequest) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *PaymentRequest) SetIdentifier(v string) {
	o.Identifier = v
}

// GetItems returns the Items field value
func (o *PaymentRequest) GetItems() []PaymentOrderItem {
	if o == nil {
		var ret []PaymentOrderItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetItemsOk() ([]PaymentOrderItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *PaymentRequest) SetItems(v []PaymentOrderItem) {
	o.Items = v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *PaymentRequest) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *PaymentRequest) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

// GetPaymentUrl returns the PaymentUrl field value if set, zero value otherwise.
func (o *PaymentRequest) GetPaymentUrl() string {
	if o == nil || o.PaymentUrl == nil {
		var ret string
		return ret
	}
	return *o.PaymentUrl
}

// GetPaymentUrlOk returns a tuple with the PaymentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetPaymentUrlOk() (*string, bool) {
	if o == nil || o.PaymentUrl == nil {
		return nil, false
	}
	return o.PaymentUrl, true
}

// HasPaymentUrl returns a boolean if a field has been set.
func (o *PaymentRequest) HasPaymentUrl() bool {
	if o != nil && o.PaymentUrl != nil {
		return true
	}

	return false
}

// SetPaymentUrl gets a reference to the given string and assigns it to the PaymentUrl field.
func (o *PaymentRequest) SetPaymentUrl(v string) {
	o.PaymentUrl = &v
}

// GetDescription returns the Description field value
func (o *PaymentRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PaymentRequest) SetDescription(v string) {
	o.Description = v
}

// GetDueByUtc returns the DueByUtc field value
func (o *PaymentRequest) GetDueByUtc() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DueByUtc
}

// GetDueByUtcOk returns a tuple with the DueByUtc field value
// and a boolean to check if the value has been set.
func (o *PaymentRequest) GetDueByUtcOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DueByUtc, true
}

// SetDueByUtc sets field value
func (o *PaymentRequest) SetDueByUtc(v time.Time) {
	o.DueByUtc = v
}

func (o PaymentRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	if true {
		toSerialize["items"] = o.Items
	}
	if true {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if o.PaymentUrl != nil {
		toSerialize["paymentUrl"] = o.PaymentUrl
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["dueByUtc"] = o.DueByUtc
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentRequest struct {
	value *PaymentRequest
	isSet bool
}

func (v NullablePaymentRequest) Get() *PaymentRequest {
	return v.value
}

func (v *NullablePaymentRequest) Set(val *PaymentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentRequest(val *PaymentRequest) *NullablePaymentRequest {
	return &NullablePaymentRequest{value: val, isSet: true}
}

func (v NullablePaymentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


