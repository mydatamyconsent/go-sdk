/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// ConsentedIdentifier ConsentedIdentifier : Consented identifier details.
type ConsentedIdentifier struct {
	// Identifier name.
	Name string `json:"name"`
	// Identifier key.
	Key string `json:"key"`
	// Identifier value type.
	ValueType string `json:"valueType"`
	// Identifier value.
	Value string `json:"value"`
}

// NewConsentedIdentifier instantiates a new ConsentedIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsentedIdentifier(name string, key string, valueType string, value string) *ConsentedIdentifier {
	this := ConsentedIdentifier{}
	this.Name = name
	this.Key = key
	this.ValueType = valueType
	this.Value = value
	return &this
}

// NewConsentedIdentifierWithDefaults instantiates a new ConsentedIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentedIdentifierWithDefaults() *ConsentedIdentifier {
	this := ConsentedIdentifier{}
	return &this
}

// GetName returns the Name field value
func (o *ConsentedIdentifier) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConsentedIdentifier) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConsentedIdentifier) SetName(v string) {
	o.Name = v
}

// GetKey returns the Key field value
func (o *ConsentedIdentifier) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ConsentedIdentifier) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ConsentedIdentifier) SetKey(v string) {
	o.Key = v
}

// GetValueType returns the ValueType field value
func (o *ConsentedIdentifier) GetValueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *ConsentedIdentifier) GetValueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *ConsentedIdentifier) SetValueType(v string) {
	o.ValueType = v
}

// GetValue returns the Value field value
func (o *ConsentedIdentifier) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ConsentedIdentifier) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ConsentedIdentifier) SetValue(v string) {
	o.Value = v
}

func (o ConsentedIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["valueType"] = o.ValueType
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableConsentedIdentifier struct {
	value *ConsentedIdentifier
	isSet bool
}

func (v NullableConsentedIdentifier) Get() *ConsentedIdentifier {
	return v.value
}

func (v *NullableConsentedIdentifier) Set(val *ConsentedIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentedIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentedIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentedIdentifier(val *ConsentedIdentifier) *NullableConsentedIdentifier {
	return &NullableConsentedIdentifier{value: val, isSet: true}
}

func (v NullableConsentedIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentedIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


