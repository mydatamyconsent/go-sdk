/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// Document struct for Document
type Document struct {
	FieldTitle string `json:"field_title"`
	FieldSlug string `json:"field_slug"`
	Drn []string `json:"drn"`
	Requirement DocumentsRequired `json:"requirement"`
}

// NewDocument instantiates a new Document object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocument(fieldTitle string, fieldSlug string, drn []string, requirement DocumentsRequired) *Document {
	this := Document{}
	this.FieldTitle = fieldTitle
	this.FieldSlug = fieldSlug
	this.Drn = drn
	this.Requirement = requirement
	return &this
}

// NewDocumentWithDefaults instantiates a new Document object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentWithDefaults() *Document {
	this := Document{}
	return &this
}

// GetFieldTitle returns the FieldTitle field value
func (o *Document) GetFieldTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldTitle
}

// GetFieldTitleOk returns a tuple with the FieldTitle field value
// and a boolean to check if the value has been set.
func (o *Document) GetFieldTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FieldTitle, true
}

// SetFieldTitle sets field value
func (o *Document) SetFieldTitle(v string) {
	o.FieldTitle = v
}

// GetFieldSlug returns the FieldSlug field value
func (o *Document) GetFieldSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldSlug
}

// GetFieldSlugOk returns a tuple with the FieldSlug field value
// and a boolean to check if the value has been set.
func (o *Document) GetFieldSlugOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FieldSlug, true
}

// SetFieldSlug sets field value
func (o *Document) SetFieldSlug(v string) {
	o.FieldSlug = v
}

// GetDrn returns the Drn field value
func (o *Document) GetDrn() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Drn
}

// GetDrnOk returns a tuple with the Drn field value
// and a boolean to check if the value has been set.
func (o *Document) GetDrnOk() ([]string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Drn, true
}

// SetDrn sets field value
func (o *Document) SetDrn(v []string) {
	o.Drn = v
}

// GetRequirement returns the Requirement field value
func (o *Document) GetRequirement() DocumentsRequired {
	if o == nil {
		var ret DocumentsRequired
		return ret
	}

	return o.Requirement
}

// GetRequirementOk returns a tuple with the Requirement field value
// and a boolean to check if the value has been set.
func (o *Document) GetRequirementOk() (*DocumentsRequired, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Requirement, true
}

// SetRequirement sets field value
func (o *Document) SetRequirement(v DocumentsRequired) {
	o.Requirement = v
}

func (o Document) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["field_title"] = o.FieldTitle
	}
	if true {
		toSerialize["field_slug"] = o.FieldSlug
	}
	if true {
		toSerialize["drn"] = o.Drn
	}
	if true {
		toSerialize["requirement"] = o.Requirement
	}
	return json.Marshal(toSerialize)
}

type NullableDocument struct {
	value *Document
	isSet bool
}

func (v NullableDocument) Get() *Document {
	return v.value
}

func (v *NullableDocument) Set(val *Document) {
	v.value = val
	v.isSet = true
}

func (v NullableDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocument(val *Document) *NullableDocument {
	return &NullableDocument{value: val, isSet: true}
}

func (v NullableDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


