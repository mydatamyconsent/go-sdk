/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
)

// Document struct for Document
type Document struct {
	DocumentField NullableString `json:"documentField,omitempty"`
	CustomKey NullableString `json:"customKey,omitempty"`
	Drn []string `json:"drn,omitempty"`
	Requirement *DocumentsRequired `json:"requirement,omitempty"`
}

// NewDocument instantiates a new Document object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocument() *Document {
	this := Document{}
	return &this
}

// NewDocumentWithDefaults instantiates a new Document object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentWithDefaults() *Document {
	this := Document{}
	return &this
}

// GetDocumentField returns the DocumentField field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Document) GetDocumentField() string {
	if o == nil || o.DocumentField.Get() == nil {
		var ret string
		return ret
	}
	return *o.DocumentField.Get()
}

// GetDocumentFieldOk returns a tuple with the DocumentField field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Document) GetDocumentFieldOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DocumentField.Get(), o.DocumentField.IsSet()
}

// HasDocumentField returns a boolean if a field has been set.
func (o *Document) HasDocumentField() bool {
	if o != nil && o.DocumentField.IsSet() {
		return true
	}

	return false
}

// SetDocumentField gets a reference to the given NullableString and assigns it to the DocumentField field.
func (o *Document) SetDocumentField(v string) {
	o.DocumentField.Set(&v)
}
// SetDocumentFieldNil sets the value for DocumentField to be an explicit nil
func (o *Document) SetDocumentFieldNil() {
	o.DocumentField.Set(nil)
}

// UnsetDocumentField ensures that no value is present for DocumentField, not even an explicit nil
func (o *Document) UnsetDocumentField() {
	o.DocumentField.Unset()
}

// GetCustomKey returns the CustomKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Document) GetCustomKey() string {
	if o == nil || o.CustomKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.CustomKey.Get()
}

// GetCustomKeyOk returns a tuple with the CustomKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Document) GetCustomKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CustomKey.Get(), o.CustomKey.IsSet()
}

// HasCustomKey returns a boolean if a field has been set.
func (o *Document) HasCustomKey() bool {
	if o != nil && o.CustomKey.IsSet() {
		return true
	}

	return false
}

// SetCustomKey gets a reference to the given NullableString and assigns it to the CustomKey field.
func (o *Document) SetCustomKey(v string) {
	o.CustomKey.Set(&v)
}
// SetCustomKeyNil sets the value for CustomKey to be an explicit nil
func (o *Document) SetCustomKeyNil() {
	o.CustomKey.Set(nil)
}

// UnsetCustomKey ensures that no value is present for CustomKey, not even an explicit nil
func (o *Document) UnsetCustomKey() {
	o.CustomKey.Unset()
}

// GetDrn returns the Drn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Document) GetDrn() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Drn
}

// GetDrnOk returns a tuple with the Drn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Document) GetDrnOk() (*[]string, bool) {
	if o == nil || o.Drn == nil {
		return nil, false
	}
	return &o.Drn, true
}

// HasDrn returns a boolean if a field has been set.
func (o *Document) HasDrn() bool {
	if o != nil && o.Drn != nil {
		return true
	}

	return false
}

// SetDrn gets a reference to the given []string and assigns it to the Drn field.
func (o *Document) SetDrn(v []string) {
	o.Drn = v
}

// GetRequirement returns the Requirement field value if set, zero value otherwise.
func (o *Document) GetRequirement() DocumentsRequired {
	if o == nil || o.Requirement == nil {
		var ret DocumentsRequired
		return ret
	}
	return *o.Requirement
}

// GetRequirementOk returns a tuple with the Requirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetRequirementOk() (*DocumentsRequired, bool) {
	if o == nil || o.Requirement == nil {
		return nil, false
	}
	return o.Requirement, true
}

// HasRequirement returns a boolean if a field has been set.
func (o *Document) HasRequirement() bool {
	if o != nil && o.Requirement != nil {
		return true
	}

	return false
}

// SetRequirement gets a reference to the given DocumentsRequired and assigns it to the Requirement field.
func (o *Document) SetRequirement(v DocumentsRequired) {
	o.Requirement = &v
}

func (o Document) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DocumentField.IsSet() {
		toSerialize["documentField"] = o.DocumentField.Get()
	}
	if o.CustomKey.IsSet() {
		toSerialize["customKey"] = o.CustomKey.Get()
	}
	if o.Drn != nil {
		toSerialize["drn"] = o.Drn
	}
	if o.Requirement != nil {
		toSerialize["requirement"] = o.Requirement
	}
	return json.Marshal(toSerialize)
}

type NullableDocument struct {
	value *Document
	isSet bool
}

func (v NullableDocument) Get() *Document {
	return v.value
}

func (v *NullableDocument) Set(val *Document) {
	v.value = val
	v.isSet = true
}

func (v NullableDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocument(val *Document) *NullableDocument {
	return &NullableDocument{value: val, isSet: true}
}

func (v NullableDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


