/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// TermDepositAccountType the model 'TermDepositAccountType'
type TermDepositAccountType string

// List of TermDepositAccountType
const (
	FIXED TermDepositAccountType = "Fixed"
	SWEEP TermDepositAccountType = "Sweep"
	RECURRING TermDepositAccountType = "Recurring"
	SWEEP1 TermDepositAccountType = "Sweep1"
	FLEXIBLE TermDepositAccountType = "Flexible"
	TAX_SAVING TermDepositAccountType = "TaxSaving"
	FCNR TermDepositAccountType = "Fcnr"
	OTHERS TermDepositAccountType = "Others"
)

// All allowed values of TermDepositAccountType enum
var AllowedTermDepositAccountTypeEnumValues = []TermDepositAccountType{
	"Fixed",
	"Sweep",
	"Recurring",
	"Sweep1",
	"Flexible",
	"TaxSaving",
	"Fcnr",
	"Others",
}

func (v *TermDepositAccountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TermDepositAccountType(value)
	for _, existing := range AllowedTermDepositAccountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TermDepositAccountType", value)
}

// NewTermDepositAccountTypeFromValue returns a pointer to a valid TermDepositAccountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTermDepositAccountTypeFromValue(v string) (*TermDepositAccountType, error) {
	ev := TermDepositAccountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TermDepositAccountType: valid values are %v", v, AllowedTermDepositAccountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TermDepositAccountType) IsValid() bool {
	for _, existing := range AllowedTermDepositAccountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TermDepositAccountType value
func (v TermDepositAccountType) Ptr() *TermDepositAccountType {
	return &v
}

type NullableTermDepositAccountType struct {
	value *TermDepositAccountType
	isSet bool
}

func (v NullableTermDepositAccountType) Get() *TermDepositAccountType {
	return v.value
}

func (v *NullableTermDepositAccountType) Set(val *TermDepositAccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableTermDepositAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableTermDepositAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTermDepositAccountType(val *TermDepositAccountType) *NullableTermDepositAccountType {
	return &NullableTermDepositAccountType{value: val, isSet: true}
}

func (v NullableTermDepositAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTermDepositAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

