/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/go-sdk

import (
	"encoding/json"
)

// DataConsentDocumentsDto struct for DataConsentDocumentsDto
type DataConsentDocumentsDto struct {
	Id *string `json:"id,omitempty"`
	Documents []Document `json:"documents,omitempty"`
	ApprovedDocuments []DataConsentRequestedDocument `json:"approvedDocuments,omitempty"`
}

// NewDataConsentDocumentsDto instantiates a new DataConsentDocumentsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataConsentDocumentsDto() *DataConsentDocumentsDto {
	this := DataConsentDocumentsDto{}
	return &this
}

// NewDataConsentDocumentsDtoWithDefaults instantiates a new DataConsentDocumentsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataConsentDocumentsDtoWithDefaults() *DataConsentDocumentsDto {
	this := DataConsentDocumentsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataConsentDocumentsDto) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentDocumentsDto) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataConsentDocumentsDto) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataConsentDocumentsDto) SetId(v string) {
	o.Id = &v
}

// GetDocuments returns the Documents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDocumentsDto) GetDocuments() []Document {
	if o == nil  {
		var ret []Document
		return ret
	}
	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDocumentsDto) GetDocumentsOk() ([]Document, bool) {
	if o == nil || o.Documents == nil {
		return nil, false
	}
	return o.Documents, true
}

// HasDocuments returns a boolean if a field has been set.
func (o *DataConsentDocumentsDto) HasDocuments() bool {
	if o != nil && o.Documents != nil {
		return true
	}

	return false
}

// SetDocuments gets a reference to the given []Document and assigns it to the Documents field.
func (o *DataConsentDocumentsDto) SetDocuments(v []Document) {
	o.Documents = v
}

// GetApprovedDocuments returns the ApprovedDocuments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDocumentsDto) GetApprovedDocuments() []DataConsentRequestedDocument {
	if o == nil  {
		var ret []DataConsentRequestedDocument
		return ret
	}
	return o.ApprovedDocuments
}

// GetApprovedDocumentsOk returns a tuple with the ApprovedDocuments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDocumentsDto) GetApprovedDocumentsOk() ([]DataConsentRequestedDocument, bool) {
	if o == nil || o.ApprovedDocuments == nil {
		return nil, false
	}
	return o.ApprovedDocuments, true
}

// HasApprovedDocuments returns a boolean if a field has been set.
func (o *DataConsentDocumentsDto) HasApprovedDocuments() bool {
	if o != nil && o.ApprovedDocuments != nil {
		return true
	}

	return false
}

// SetApprovedDocuments gets a reference to the given []DataConsentRequestedDocument and assigns it to the ApprovedDocuments field.
func (o *DataConsentDocumentsDto) SetApprovedDocuments(v []DataConsentRequestedDocument) {
	o.ApprovedDocuments = v
}

func (o DataConsentDocumentsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Documents != nil {
		toSerialize["documents"] = o.Documents
	}
	if o.ApprovedDocuments != nil {
		toSerialize["approvedDocuments"] = o.ApprovedDocuments
	}
	return json.Marshal(toSerialize)
}

type NullableDataConsentDocumentsDto struct {
	value *DataConsentDocumentsDto
	isSet bool
}

func (v NullableDataConsentDocumentsDto) Get() *DataConsentDocumentsDto {
	return v.value
}

func (v *NullableDataConsentDocumentsDto) Set(val *DataConsentDocumentsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataConsentDocumentsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataConsentDocumentsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataConsentDocumentsDto(val *DataConsentDocumentsDto) *NullableDataConsentDocumentsDto {
	return &NullableDataConsentDocumentsDto{value: val, isSet: true}
}

func (v NullableDataConsentDocumentsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataConsentDocumentsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


