/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"time"
)

// DataConsentRequestedFinancialAccount struct for DataConsentRequestedFinancialAccount
type DataConsentRequestedFinancialAccount struct {
	Drn NullableString `json:"drn,omitempty"`
	FromDatetime *time.Time `json:"fromDatetime,omitempty"`
	ToDatetime *time.Time `json:"toDatetime,omitempty"`
	ProviderId NullableString `json:"providerId,omitempty"`
	AccountType *FinancialAccountTypes `json:"accountType,omitempty"`
	AccountIdentifier NullableString `json:"accountIdentifier,omitempty"`
	Filters []DataConsentRfaFilter `json:"filters,omitempty"`
}

// NewDataConsentRequestedFinancialAccount instantiates a new DataConsentRequestedFinancialAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataConsentRequestedFinancialAccount() *DataConsentRequestedFinancialAccount {
	this := DataConsentRequestedFinancialAccount{}
	return &this
}

// NewDataConsentRequestedFinancialAccountWithDefaults instantiates a new DataConsentRequestedFinancialAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataConsentRequestedFinancialAccountWithDefaults() *DataConsentRequestedFinancialAccount {
	this := DataConsentRequestedFinancialAccount{}
	return &this
}

// GetDrn returns the Drn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestedFinancialAccount) GetDrn() string {
	if o == nil || o.Drn.Get() == nil {
		var ret string
		return ret
	}
	return *o.Drn.Get()
}

// GetDrnOk returns a tuple with the Drn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestedFinancialAccount) GetDrnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Drn.Get(), o.Drn.IsSet()
}

// HasDrn returns a boolean if a field has been set.
func (o *DataConsentRequestedFinancialAccount) HasDrn() bool {
	if o != nil && o.Drn.IsSet() {
		return true
	}

	return false
}

// SetDrn gets a reference to the given NullableString and assigns it to the Drn field.
func (o *DataConsentRequestedFinancialAccount) SetDrn(v string) {
	o.Drn.Set(&v)
}
// SetDrnNil sets the value for Drn to be an explicit nil
func (o *DataConsentRequestedFinancialAccount) SetDrnNil() {
	o.Drn.Set(nil)
}

// UnsetDrn ensures that no value is present for Drn, not even an explicit nil
func (o *DataConsentRequestedFinancialAccount) UnsetDrn() {
	o.Drn.Unset()
}

// GetFromDatetime returns the FromDatetime field value if set, zero value otherwise.
func (o *DataConsentRequestedFinancialAccount) GetFromDatetime() time.Time {
	if o == nil || o.FromDatetime == nil {
		var ret time.Time
		return ret
	}
	return *o.FromDatetime
}

// GetFromDatetimeOk returns a tuple with the FromDatetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestedFinancialAccount) GetFromDatetimeOk() (*time.Time, bool) {
	if o == nil || o.FromDatetime == nil {
		return nil, false
	}
	return o.FromDatetime, true
}

// HasFromDatetime returns a boolean if a field has been set.
func (o *DataConsentRequestedFinancialAccount) HasFromDatetime() bool {
	if o != nil && o.FromDatetime != nil {
		return true
	}

	return false
}

// SetFromDatetime gets a reference to the given time.Time and assigns it to the FromDatetime field.
func (o *DataConsentRequestedFinancialAccount) SetFromDatetime(v time.Time) {
	o.FromDatetime = &v
}

// GetToDatetime returns the ToDatetime field value if set, zero value otherwise.
func (o *DataConsentRequestedFinancialAccount) GetToDatetime() time.Time {
	if o == nil || o.ToDatetime == nil {
		var ret time.Time
		return ret
	}
	return *o.ToDatetime
}

// GetToDatetimeOk returns a tuple with the ToDatetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestedFinancialAccount) GetToDatetimeOk() (*time.Time, bool) {
	if o == nil || o.ToDatetime == nil {
		return nil, false
	}
	return o.ToDatetime, true
}

// HasToDatetime returns a boolean if a field has been set.
func (o *DataConsentRequestedFinancialAccount) HasToDatetime() bool {
	if o != nil && o.ToDatetime != nil {
		return true
	}

	return false
}

// SetToDatetime gets a reference to the given time.Time and assigns it to the ToDatetime field.
func (o *DataConsentRequestedFinancialAccount) SetToDatetime(v time.Time) {
	o.ToDatetime = &v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestedFinancialAccount) GetProviderId() string {
	if o == nil || o.ProviderId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProviderId.Get()
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestedFinancialAccount) GetProviderIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProviderId.Get(), o.ProviderId.IsSet()
}

// HasProviderId returns a boolean if a field has been set.
func (o *DataConsentRequestedFinancialAccount) HasProviderId() bool {
	if o != nil && o.ProviderId.IsSet() {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given NullableString and assigns it to the ProviderId field.
func (o *DataConsentRequestedFinancialAccount) SetProviderId(v string) {
	o.ProviderId.Set(&v)
}
// SetProviderIdNil sets the value for ProviderId to be an explicit nil
func (o *DataConsentRequestedFinancialAccount) SetProviderIdNil() {
	o.ProviderId.Set(nil)
}

// UnsetProviderId ensures that no value is present for ProviderId, not even an explicit nil
func (o *DataConsentRequestedFinancialAccount) UnsetProviderId() {
	o.ProviderId.Unset()
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *DataConsentRequestedFinancialAccount) GetAccountType() FinancialAccountTypes {
	if o == nil || o.AccountType == nil {
		var ret FinancialAccountTypes
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequestedFinancialAccount) GetAccountTypeOk() (*FinancialAccountTypes, bool) {
	if o == nil || o.AccountType == nil {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *DataConsentRequestedFinancialAccount) HasAccountType() bool {
	if o != nil && o.AccountType != nil {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given FinancialAccountTypes and assigns it to the AccountType field.
func (o *DataConsentRequestedFinancialAccount) SetAccountType(v FinancialAccountTypes) {
	o.AccountType = &v
}

// GetAccountIdentifier returns the AccountIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestedFinancialAccount) GetAccountIdentifier() string {
	if o == nil || o.AccountIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccountIdentifier.Get()
}

// GetAccountIdentifierOk returns a tuple with the AccountIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestedFinancialAccount) GetAccountIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountIdentifier.Get(), o.AccountIdentifier.IsSet()
}

// HasAccountIdentifier returns a boolean if a field has been set.
func (o *DataConsentRequestedFinancialAccount) HasAccountIdentifier() bool {
	if o != nil && o.AccountIdentifier.IsSet() {
		return true
	}

	return false
}

// SetAccountIdentifier gets a reference to the given NullableString and assigns it to the AccountIdentifier field.
func (o *DataConsentRequestedFinancialAccount) SetAccountIdentifier(v string) {
	o.AccountIdentifier.Set(&v)
}
// SetAccountIdentifierNil sets the value for AccountIdentifier to be an explicit nil
func (o *DataConsentRequestedFinancialAccount) SetAccountIdentifierNil() {
	o.AccountIdentifier.Set(nil)
}

// UnsetAccountIdentifier ensures that no value is present for AccountIdentifier, not even an explicit nil
func (o *DataConsentRequestedFinancialAccount) UnsetAccountIdentifier() {
	o.AccountIdentifier.Unset()
}

// GetFilters returns the Filters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequestedFinancialAccount) GetFilters() []DataConsentRfaFilter {
	if o == nil  {
		var ret []DataConsentRfaFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequestedFinancialAccount) GetFiltersOk() (*[]DataConsentRfaFilter, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return &o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *DataConsentRequestedFinancialAccount) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []DataConsentRfaFilter and assigns it to the Filters field.
func (o *DataConsentRequestedFinancialAccount) SetFilters(v []DataConsentRfaFilter) {
	o.Filters = v
}

func (o DataConsentRequestedFinancialAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Drn.IsSet() {
		toSerialize["drn"] = o.Drn.Get()
	}
	if o.FromDatetime != nil {
		toSerialize["fromDatetime"] = o.FromDatetime
	}
	if o.ToDatetime != nil {
		toSerialize["toDatetime"] = o.ToDatetime
	}
	if o.ProviderId.IsSet() {
		toSerialize["providerId"] = o.ProviderId.Get()
	}
	if o.AccountType != nil {
		toSerialize["accountType"] = o.AccountType
	}
	if o.AccountIdentifier.IsSet() {
		toSerialize["accountIdentifier"] = o.AccountIdentifier.Get()
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	return json.Marshal(toSerialize)
}

type NullableDataConsentRequestedFinancialAccount struct {
	value *DataConsentRequestedFinancialAccount
	isSet bool
}

func (v NullableDataConsentRequestedFinancialAccount) Get() *DataConsentRequestedFinancialAccount {
	return v.value
}

func (v *NullableDataConsentRequestedFinancialAccount) Set(val *DataConsentRequestedFinancialAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableDataConsentRequestedFinancialAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableDataConsentRequestedFinancialAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataConsentRequestedFinancialAccount(val *DataConsentRequestedFinancialAccount) *NullableDataConsentRequestedFinancialAccount {
	return &NullableDataConsentRequestedFinancialAccount{value: val, isSet: true}
}

func (v NullableDataConsentRequestedFinancialAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataConsentRequestedFinancialAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


