/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"fmt"
)

// CategoryIconFontFamily the model 'CategoryIconFontFamily'
type CategoryIconFontFamily string

// List of CategoryIconFontFamily
const (
	MATERIAL_ICONS CategoryIconFontFamily = "MaterialIcons"
	FONT_AWESOME_REGULAR CategoryIconFontFamily = "FontAwesomeRegular"
)

var allowedCategoryIconFontFamilyEnumValues = []CategoryIconFontFamily{
	"MaterialIcons",
	"FontAwesomeRegular",
}

func (v *CategoryIconFontFamily) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CategoryIconFontFamily(value)
	for _, existing := range allowedCategoryIconFontFamilyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CategoryIconFontFamily", value)
}

// NewCategoryIconFontFamilyFromValue returns a pointer to a valid CategoryIconFontFamily
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCategoryIconFontFamilyFromValue(v string) (*CategoryIconFontFamily, error) {
	ev := CategoryIconFontFamily(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CategoryIconFontFamily: valid values are %v", v, allowedCategoryIconFontFamilyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CategoryIconFontFamily) IsValid() bool {
	for _, existing := range allowedCategoryIconFontFamilyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CategoryIconFontFamily value
func (v CategoryIconFontFamily) Ptr() *CategoryIconFontFamily {
	return &v
}

type NullableCategoryIconFontFamily struct {
	value *CategoryIconFontFamily
	isSet bool
}

func (v NullableCategoryIconFontFamily) Get() *CategoryIconFontFamily {
	return v.value
}

func (v *NullableCategoryIconFontFamily) Set(val *CategoryIconFontFamily) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryIconFontFamily) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryIconFontFamily) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryIconFontFamily(val *CategoryIconFontFamily) *NullableCategoryIconFontFamily {
	return &NullableCategoryIconFontFamily{value: val, isSet: true}
}

func (v NullableCategoryIconFontFamily) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryIconFontFamily) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

