/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"fmt"
)

// IdentityClaim the model 'IdentityClaim'
type IdentityClaim string

// List of IdentityClaim
const (
	EMAIL IdentityClaim = "Email"
	FIRST_NAME IdentityClaim = "FirstName"
	LAST_NAME IdentityClaim = "LastName"
)

var allowedIdentityClaimEnumValues = []IdentityClaim{
	"Email",
	"FirstName",
	"LastName",
}

func (v *IdentityClaim) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentityClaim(value)
	for _, existing := range allowedIdentityClaimEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentityClaim", value)
}

// NewIdentityClaimFromValue returns a pointer to a valid IdentityClaim
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityClaimFromValue(v string) (*IdentityClaim, error) {
	ev := IdentityClaim(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityClaim: valid values are %v", v, allowedIdentityClaimEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityClaim) IsValid() bool {
	for _, existing := range allowedIdentityClaimEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentityClaim value
func (v IdentityClaim) Ptr() *IdentityClaim {
	return &v
}

type NullableIdentityClaim struct {
	value *IdentityClaim
	isSet bool
}

func (v NullableIdentityClaim) Get() *IdentityClaim {
	return v.value
}

func (v *NullableIdentityClaim) Set(val *IdentityClaim) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityClaim) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityClaim) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityClaim(val *IdentityClaim) *NullableIdentityClaim {
	return &NullableIdentityClaim{value: val, isSet: true}
}

func (v NullableIdentityClaim) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityClaim) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

