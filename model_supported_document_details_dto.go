/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// SupportedDocumentDetailsDto struct for SupportedDocumentDetailsDto
type SupportedDocumentDetailsDto struct {
	Id string `json:"id"`
	TypeId string `json:"typeId"`
	LogoUrl string `json:"logoUrl"`
	StorageUrl string `json:"storageUrl"`
	IssuedBy string `json:"issuedBy"`
	UploadedAtUtc time.Time `json:"uploadedAtUtc"`
}

// NewSupportedDocumentDetailsDto instantiates a new SupportedDocumentDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedDocumentDetailsDto(id string, typeId string, logoUrl string, storageUrl string, issuedBy string, uploadedAtUtc time.Time) *SupportedDocumentDetailsDto {
	this := SupportedDocumentDetailsDto{}
	this.Id = id
	this.TypeId = typeId
	this.LogoUrl = logoUrl
	this.StorageUrl = storageUrl
	this.IssuedBy = issuedBy
	this.UploadedAtUtc = uploadedAtUtc
	return &this
}

// NewSupportedDocumentDetailsDtoWithDefaults instantiates a new SupportedDocumentDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedDocumentDetailsDtoWithDefaults() *SupportedDocumentDetailsDto {
	this := SupportedDocumentDetailsDto{}
	return &this
}

// GetId returns the Id field value
func (o *SupportedDocumentDetailsDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SupportedDocumentDetailsDto) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SupportedDocumentDetailsDto) SetId(v string) {
	o.Id = v
}

// GetTypeId returns the TypeId field value
func (o *SupportedDocumentDetailsDto) GetTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *SupportedDocumentDetailsDto) GetTypeIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *SupportedDocumentDetailsDto) SetTypeId(v string) {
	o.TypeId = v
}

// GetLogoUrl returns the LogoUrl field value
func (o *SupportedDocumentDetailsDto) GetLogoUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value
// and a boolean to check if the value has been set.
func (o *SupportedDocumentDetailsDto) GetLogoUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LogoUrl, true
}

// SetLogoUrl sets field value
func (o *SupportedDocumentDetailsDto) SetLogoUrl(v string) {
	o.LogoUrl = v
}

// GetStorageUrl returns the StorageUrl field value
func (o *SupportedDocumentDetailsDto) GetStorageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageUrl
}

// GetStorageUrlOk returns a tuple with the StorageUrl field value
// and a boolean to check if the value has been set.
func (o *SupportedDocumentDetailsDto) GetStorageUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StorageUrl, true
}

// SetStorageUrl sets field value
func (o *SupportedDocumentDetailsDto) SetStorageUrl(v string) {
	o.StorageUrl = v
}

// GetIssuedBy returns the IssuedBy field value
func (o *SupportedDocumentDetailsDto) GetIssuedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuedBy
}

// GetIssuedByOk returns a tuple with the IssuedBy field value
// and a boolean to check if the value has been set.
func (o *SupportedDocumentDetailsDto) GetIssuedByOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IssuedBy, true
}

// SetIssuedBy sets field value
func (o *SupportedDocumentDetailsDto) SetIssuedBy(v string) {
	o.IssuedBy = v
}

// GetUploadedAtUtc returns the UploadedAtUtc field value
func (o *SupportedDocumentDetailsDto) GetUploadedAtUtc() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UploadedAtUtc
}

// GetUploadedAtUtcOk returns a tuple with the UploadedAtUtc field value
// and a boolean to check if the value has been set.
func (o *SupportedDocumentDetailsDto) GetUploadedAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UploadedAtUtc, true
}

// SetUploadedAtUtc sets field value
func (o *SupportedDocumentDetailsDto) SetUploadedAtUtc(v time.Time) {
	o.UploadedAtUtc = v
}

func (o SupportedDocumentDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["typeId"] = o.TypeId
	}
	if true {
		toSerialize["logoUrl"] = o.LogoUrl
	}
	if true {
		toSerialize["storageUrl"] = o.StorageUrl
	}
	if true {
		toSerialize["issuedBy"] = o.IssuedBy
	}
	if true {
		toSerialize["uploadedAtUtc"] = o.UploadedAtUtc
	}
	return json.Marshal(toSerialize)
}

type NullableSupportedDocumentDetailsDto struct {
	value *SupportedDocumentDetailsDto
	isSet bool
}

func (v NullableSupportedDocumentDetailsDto) Get() *SupportedDocumentDetailsDto {
	return v.value
}

func (v *NullableSupportedDocumentDetailsDto) Set(val *SupportedDocumentDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedDocumentDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedDocumentDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedDocumentDetailsDto(val *SupportedDocumentDetailsDto) *NullableSupportedDocumentDetailsDto {
	return &NullableSupportedDocumentDetailsDto{value: val, isSet: true}
}

func (v NullableSupportedDocumentDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedDocumentDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


