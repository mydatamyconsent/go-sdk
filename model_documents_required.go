/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// DocumentsRequired the model 'DocumentsRequired'
type DocumentsRequired string

// List of DocumentsRequired
const (
	ANYONE DocumentsRequired = "Anyone"
	ALL DocumentsRequired = "All"
)

// All allowed values of DocumentsRequired enum
var AllowedDocumentsRequiredEnumValues = []DocumentsRequired{
	"Anyone",
	"All",
}

func (v *DocumentsRequired) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DocumentsRequired(value)
	for _, existing := range AllowedDocumentsRequiredEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DocumentsRequired", value)
}

// NewDocumentsRequiredFromValue returns a pointer to a valid DocumentsRequired
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDocumentsRequiredFromValue(v string) (*DocumentsRequired, error) {
	ev := DocumentsRequired(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DocumentsRequired: valid values are %v", v, AllowedDocumentsRequiredEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DocumentsRequired) IsValid() bool {
	for _, existing := range AllowedDocumentsRequiredEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DocumentsRequired value
func (v DocumentsRequired) Ptr() *DocumentsRequired {
	return &v
}

type NullableDocumentsRequired struct {
	value *DocumentsRequired
	isSet bool
}

func (v NullableDocumentsRequired) Get() *DocumentsRequired {
	return v.value
}

func (v *NullableDocumentsRequired) Set(val *DocumentsRequired) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentsRequired) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentsRequired) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentsRequired(val *DocumentsRequired) *NullableDocumentsRequired {
	return &NullableDocumentsRequired{value: val, isSet: true}
}

func (v NullableDocumentsRequired) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentsRequired) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

