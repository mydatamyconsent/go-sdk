/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// TermDepositBankInformation struct for TermDepositBankInformation
type TermDepositBankInformation struct {
	BankName string `json:"bank_name"`
	Branch string `json:"branch"`
	Ifsc string `json:"ifsc"`
}

// NewTermDepositBankInformation instantiates a new TermDepositBankInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTermDepositBankInformation(bankName string, branch string, ifsc string) *TermDepositBankInformation {
	this := TermDepositBankInformation{}
	this.BankName = bankName
	this.Branch = branch
	this.Ifsc = ifsc
	return &this
}

// NewTermDepositBankInformationWithDefaults instantiates a new TermDepositBankInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTermDepositBankInformationWithDefaults() *TermDepositBankInformation {
	this := TermDepositBankInformation{}
	return &this
}

// GetBankName returns the BankName field value
func (o *TermDepositBankInformation) GetBankName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BankName
}

// GetBankNameOk returns a tuple with the BankName field value
// and a boolean to check if the value has been set.
func (o *TermDepositBankInformation) GetBankNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BankName, true
}

// SetBankName sets field value
func (o *TermDepositBankInformation) SetBankName(v string) {
	o.BankName = v
}

// GetBranch returns the Branch field value
func (o *TermDepositBankInformation) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *TermDepositBankInformation) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *TermDepositBankInformation) SetBranch(v string) {
	o.Branch = v
}

// GetIfsc returns the Ifsc field value
func (o *TermDepositBankInformation) GetIfsc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ifsc
}

// GetIfscOk returns a tuple with the Ifsc field value
// and a boolean to check if the value has been set.
func (o *TermDepositBankInformation) GetIfscOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ifsc, true
}

// SetIfsc sets field value
func (o *TermDepositBankInformation) SetIfsc(v string) {
	o.Ifsc = v
}

func (o TermDepositBankInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bank_name"] = o.BankName
	}
	if true {
		toSerialize["branch"] = o.Branch
	}
	if true {
		toSerialize["ifsc"] = o.Ifsc
	}
	return json.Marshal(toSerialize)
}

type NullableTermDepositBankInformation struct {
	value *TermDepositBankInformation
	isSet bool
}

func (v NullableTermDepositBankInformation) Get() *TermDepositBankInformation {
	return v.value
}

func (v *NullableTermDepositBankInformation) Set(val *TermDepositBankInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableTermDepositBankInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableTermDepositBankInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTermDepositBankInformation(val *TermDepositBankInformation) *NullableTermDepositBankInformation {
	return &NullableTermDepositBankInformation{value: val, isSet: true}
}

func (v NullableTermDepositBankInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTermDepositBankInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


