/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
	"fmt"
)

// FinancialAccountTransaction struct for FinancialAccountTransaction
type FinancialAccountTransaction struct {
	FinancialAccountAifTransaction *FinancialAccountAifTransaction
	FinancialAccountBillPaymentTransaction *FinancialAccountBillPaymentTransaction
	FinancialAccountBondTransaction *FinancialAccountBondTransaction
	FinancialAccountCISTransaction *FinancialAccountCISTransaction
	FinancialAccountCertificateOfDepositTransaction *FinancialAccountCertificateOfDepositTransaction
	FinancialAccountCommercialPaperTransaction *FinancialAccountCommercialPaperTransaction
	FinancialAccountCreditCardTransaction *FinancialAccountCreditCardTransaction
	FinancialAccountDebentureTransaction *FinancialAccountDebentureTransaction
	FinancialAccountDepositTransaction *FinancialAccountDepositTransaction
	FinancialAccountEpfTransaction *FinancialAccountEpfTransaction
	FinancialAccountEquityTransaction *FinancialAccountEquityTransaction
	FinancialAccountEtfTransaction *FinancialAccountEtfTransaction
	FinancialAccountGovtSecurityTransaction *FinancialAccountGovtSecurityTransaction
	FinancialAccountIdrTransaction *FinancialAccountIdrTransaction
	FinancialAccountInsurancePolicyTransaction *FinancialAccountInsurancePolicyTransaction
	FinancialAccountInvitTransaction *FinancialAccountInvitTransaction
	FinancialAccountLoanTransaction *FinancialAccountLoanTransaction
	FinancialAccountMutualFundTransaction *FinancialAccountMutualFundTransaction
	FinancialAccountNpsTransaction *FinancialAccountNpsTransaction
	FinancialAccountPpfTransaction *FinancialAccountPpfTransaction
	FinancialAccountRecurringDepositTransaction *FinancialAccountRecurringDepositTransaction
	FinancialAccountReitTransaction *FinancialAccountReitTransaction
	FinancialAccountSipTransaction *FinancialAccountSipTransaction
	FinancialAccountTermDepositTransaction *FinancialAccountTermDepositTransaction
	FinancialAccountUlipTransaction *FinancialAccountUlipTransaction
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *FinancialAccountTransaction) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'AifTransaction'
	if jsonDict["type"] == "AifTransaction" {
		// try to unmarshal JSON data into FinancialAccountAifTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountAifTransaction);
		if err == nil {
			jsonFinancialAccountAifTransaction, _ := json.Marshal(dst.FinancialAccountAifTransaction)
			if string(jsonFinancialAccountAifTransaction) == "{}" { // empty struct
				dst.FinancialAccountAifTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountAifTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountAifTransaction = nil
		}
	}

	// check if the discriminator value is 'BillPaymentTransaction'
	if jsonDict["type"] == "BillPaymentTransaction" {
		// try to unmarshal JSON data into FinancialAccountBillPaymentTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountBillPaymentTransaction);
		if err == nil {
			jsonFinancialAccountBillPaymentTransaction, _ := json.Marshal(dst.FinancialAccountBillPaymentTransaction)
			if string(jsonFinancialAccountBillPaymentTransaction) == "{}" { // empty struct
				dst.FinancialAccountBillPaymentTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountBillPaymentTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountBillPaymentTransaction = nil
		}
	}

	// check if the discriminator value is 'BondTransaction'
	if jsonDict["type"] == "BondTransaction" {
		// try to unmarshal JSON data into FinancialAccountBondTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountBondTransaction);
		if err == nil {
			jsonFinancialAccountBondTransaction, _ := json.Marshal(dst.FinancialAccountBondTransaction)
			if string(jsonFinancialAccountBondTransaction) == "{}" { // empty struct
				dst.FinancialAccountBondTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountBondTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountBondTransaction = nil
		}
	}

	// check if the discriminator value is 'CISTransaction'
	if jsonDict["type"] == "CISTransaction" {
		// try to unmarshal JSON data into FinancialAccountCISTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountCISTransaction);
		if err == nil {
			jsonFinancialAccountCISTransaction, _ := json.Marshal(dst.FinancialAccountCISTransaction)
			if string(jsonFinancialAccountCISTransaction) == "{}" { // empty struct
				dst.FinancialAccountCISTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountCISTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountCISTransaction = nil
		}
	}

	// check if the discriminator value is 'CertificateOfDepositTransaction'
	if jsonDict["type"] == "CertificateOfDepositTransaction" {
		// try to unmarshal JSON data into FinancialAccountCertificateOfDepositTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountCertificateOfDepositTransaction);
		if err == nil {
			jsonFinancialAccountCertificateOfDepositTransaction, _ := json.Marshal(dst.FinancialAccountCertificateOfDepositTransaction)
			if string(jsonFinancialAccountCertificateOfDepositTransaction) == "{}" { // empty struct
				dst.FinancialAccountCertificateOfDepositTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountCertificateOfDepositTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountCertificateOfDepositTransaction = nil
		}
	}

	// check if the discriminator value is 'CommercialPaperTransaction'
	if jsonDict["type"] == "CommercialPaperTransaction" {
		// try to unmarshal JSON data into FinancialAccountCommercialPaperTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountCommercialPaperTransaction);
		if err == nil {
			jsonFinancialAccountCommercialPaperTransaction, _ := json.Marshal(dst.FinancialAccountCommercialPaperTransaction)
			if string(jsonFinancialAccountCommercialPaperTransaction) == "{}" { // empty struct
				dst.FinancialAccountCommercialPaperTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountCommercialPaperTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountCommercialPaperTransaction = nil
		}
	}

	// check if the discriminator value is 'CreditCardTransaction'
	if jsonDict["type"] == "CreditCardTransaction" {
		// try to unmarshal JSON data into FinancialAccountCreditCardTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountCreditCardTransaction);
		if err == nil {
			jsonFinancialAccountCreditCardTransaction, _ := json.Marshal(dst.FinancialAccountCreditCardTransaction)
			if string(jsonFinancialAccountCreditCardTransaction) == "{}" { // empty struct
				dst.FinancialAccountCreditCardTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountCreditCardTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountCreditCardTransaction = nil
		}
	}

	// check if the discriminator value is 'DebentureTransaction'
	if jsonDict["type"] == "DebentureTransaction" {
		// try to unmarshal JSON data into FinancialAccountDebentureTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountDebentureTransaction);
		if err == nil {
			jsonFinancialAccountDebentureTransaction, _ := json.Marshal(dst.FinancialAccountDebentureTransaction)
			if string(jsonFinancialAccountDebentureTransaction) == "{}" { // empty struct
				dst.FinancialAccountDebentureTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountDebentureTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountDebentureTransaction = nil
		}
	}

	// check if the discriminator value is 'DepositTransaction'
	if jsonDict["type"] == "DepositTransaction" {
		// try to unmarshal JSON data into FinancialAccountDepositTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountDepositTransaction);
		if err == nil {
			jsonFinancialAccountDepositTransaction, _ := json.Marshal(dst.FinancialAccountDepositTransaction)
			if string(jsonFinancialAccountDepositTransaction) == "{}" { // empty struct
				dst.FinancialAccountDepositTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountDepositTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountDepositTransaction = nil
		}
	}

	// check if the discriminator value is 'EpfTransaction'
	if jsonDict["type"] == "EpfTransaction" {
		// try to unmarshal JSON data into FinancialAccountEpfTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountEpfTransaction);
		if err == nil {
			jsonFinancialAccountEpfTransaction, _ := json.Marshal(dst.FinancialAccountEpfTransaction)
			if string(jsonFinancialAccountEpfTransaction) == "{}" { // empty struct
				dst.FinancialAccountEpfTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountEpfTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountEpfTransaction = nil
		}
	}

	// check if the discriminator value is 'EquityTransaction'
	if jsonDict["type"] == "EquityTransaction" {
		// try to unmarshal JSON data into FinancialAccountEquityTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountEquityTransaction);
		if err == nil {
			jsonFinancialAccountEquityTransaction, _ := json.Marshal(dst.FinancialAccountEquityTransaction)
			if string(jsonFinancialAccountEquityTransaction) == "{}" { // empty struct
				dst.FinancialAccountEquityTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountEquityTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountEquityTransaction = nil
		}
	}

	// check if the discriminator value is 'EtfTransaction'
	if jsonDict["type"] == "EtfTransaction" {
		// try to unmarshal JSON data into FinancialAccountEtfTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountEtfTransaction);
		if err == nil {
			jsonFinancialAccountEtfTransaction, _ := json.Marshal(dst.FinancialAccountEtfTransaction)
			if string(jsonFinancialAccountEtfTransaction) == "{}" { // empty struct
				dst.FinancialAccountEtfTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountEtfTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountEtfTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountAifTransaction'
	if jsonDict["type"] == "FinancialAccountAifTransaction" {
		// try to unmarshal JSON data into FinancialAccountAifTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountAifTransaction);
		if err == nil {
			jsonFinancialAccountAifTransaction, _ := json.Marshal(dst.FinancialAccountAifTransaction)
			if string(jsonFinancialAccountAifTransaction) == "{}" { // empty struct
				dst.FinancialAccountAifTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountAifTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountAifTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountBillPaymentTransaction'
	if jsonDict["type"] == "FinancialAccountBillPaymentTransaction" {
		// try to unmarshal JSON data into FinancialAccountBillPaymentTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountBillPaymentTransaction);
		if err == nil {
			jsonFinancialAccountBillPaymentTransaction, _ := json.Marshal(dst.FinancialAccountBillPaymentTransaction)
			if string(jsonFinancialAccountBillPaymentTransaction) == "{}" { // empty struct
				dst.FinancialAccountBillPaymentTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountBillPaymentTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountBillPaymentTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountBondTransaction'
	if jsonDict["type"] == "FinancialAccountBondTransaction" {
		// try to unmarshal JSON data into FinancialAccountBondTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountBondTransaction);
		if err == nil {
			jsonFinancialAccountBondTransaction, _ := json.Marshal(dst.FinancialAccountBondTransaction)
			if string(jsonFinancialAccountBondTransaction) == "{}" { // empty struct
				dst.FinancialAccountBondTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountBondTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountBondTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountCISTransaction'
	if jsonDict["type"] == "FinancialAccountCISTransaction" {
		// try to unmarshal JSON data into FinancialAccountCISTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountCISTransaction);
		if err == nil {
			jsonFinancialAccountCISTransaction, _ := json.Marshal(dst.FinancialAccountCISTransaction)
			if string(jsonFinancialAccountCISTransaction) == "{}" { // empty struct
				dst.FinancialAccountCISTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountCISTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountCISTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountCertificateOfDepositTransaction'
	if jsonDict["type"] == "FinancialAccountCertificateOfDepositTransaction" {
		// try to unmarshal JSON data into FinancialAccountCertificateOfDepositTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountCertificateOfDepositTransaction);
		if err == nil {
			jsonFinancialAccountCertificateOfDepositTransaction, _ := json.Marshal(dst.FinancialAccountCertificateOfDepositTransaction)
			if string(jsonFinancialAccountCertificateOfDepositTransaction) == "{}" { // empty struct
				dst.FinancialAccountCertificateOfDepositTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountCertificateOfDepositTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountCertificateOfDepositTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountCommercialPaperTransaction'
	if jsonDict["type"] == "FinancialAccountCommercialPaperTransaction" {
		// try to unmarshal JSON data into FinancialAccountCommercialPaperTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountCommercialPaperTransaction);
		if err == nil {
			jsonFinancialAccountCommercialPaperTransaction, _ := json.Marshal(dst.FinancialAccountCommercialPaperTransaction)
			if string(jsonFinancialAccountCommercialPaperTransaction) == "{}" { // empty struct
				dst.FinancialAccountCommercialPaperTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountCommercialPaperTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountCommercialPaperTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountCreditCardTransaction'
	if jsonDict["type"] == "FinancialAccountCreditCardTransaction" {
		// try to unmarshal JSON data into FinancialAccountCreditCardTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountCreditCardTransaction);
		if err == nil {
			jsonFinancialAccountCreditCardTransaction, _ := json.Marshal(dst.FinancialAccountCreditCardTransaction)
			if string(jsonFinancialAccountCreditCardTransaction) == "{}" { // empty struct
				dst.FinancialAccountCreditCardTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountCreditCardTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountCreditCardTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountDebentureTransaction'
	if jsonDict["type"] == "FinancialAccountDebentureTransaction" {
		// try to unmarshal JSON data into FinancialAccountDebentureTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountDebentureTransaction);
		if err == nil {
			jsonFinancialAccountDebentureTransaction, _ := json.Marshal(dst.FinancialAccountDebentureTransaction)
			if string(jsonFinancialAccountDebentureTransaction) == "{}" { // empty struct
				dst.FinancialAccountDebentureTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountDebentureTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountDebentureTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountDepositTransaction'
	if jsonDict["type"] == "FinancialAccountDepositTransaction" {
		// try to unmarshal JSON data into FinancialAccountDepositTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountDepositTransaction);
		if err == nil {
			jsonFinancialAccountDepositTransaction, _ := json.Marshal(dst.FinancialAccountDepositTransaction)
			if string(jsonFinancialAccountDepositTransaction) == "{}" { // empty struct
				dst.FinancialAccountDepositTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountDepositTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountDepositTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountEpfTransaction'
	if jsonDict["type"] == "FinancialAccountEpfTransaction" {
		// try to unmarshal JSON data into FinancialAccountEpfTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountEpfTransaction);
		if err == nil {
			jsonFinancialAccountEpfTransaction, _ := json.Marshal(dst.FinancialAccountEpfTransaction)
			if string(jsonFinancialAccountEpfTransaction) == "{}" { // empty struct
				dst.FinancialAccountEpfTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountEpfTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountEpfTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountEquityTransaction'
	if jsonDict["type"] == "FinancialAccountEquityTransaction" {
		// try to unmarshal JSON data into FinancialAccountEquityTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountEquityTransaction);
		if err == nil {
			jsonFinancialAccountEquityTransaction, _ := json.Marshal(dst.FinancialAccountEquityTransaction)
			if string(jsonFinancialAccountEquityTransaction) == "{}" { // empty struct
				dst.FinancialAccountEquityTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountEquityTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountEquityTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountEtfTransaction'
	if jsonDict["type"] == "FinancialAccountEtfTransaction" {
		// try to unmarshal JSON data into FinancialAccountEtfTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountEtfTransaction);
		if err == nil {
			jsonFinancialAccountEtfTransaction, _ := json.Marshal(dst.FinancialAccountEtfTransaction)
			if string(jsonFinancialAccountEtfTransaction) == "{}" { // empty struct
				dst.FinancialAccountEtfTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountEtfTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountEtfTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountGovtSecurityTransaction'
	if jsonDict["type"] == "FinancialAccountGovtSecurityTransaction" {
		// try to unmarshal JSON data into FinancialAccountGovtSecurityTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountGovtSecurityTransaction);
		if err == nil {
			jsonFinancialAccountGovtSecurityTransaction, _ := json.Marshal(dst.FinancialAccountGovtSecurityTransaction)
			if string(jsonFinancialAccountGovtSecurityTransaction) == "{}" { // empty struct
				dst.FinancialAccountGovtSecurityTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountGovtSecurityTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountGovtSecurityTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountIdrTransaction'
	if jsonDict["type"] == "FinancialAccountIdrTransaction" {
		// try to unmarshal JSON data into FinancialAccountIdrTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountIdrTransaction);
		if err == nil {
			jsonFinancialAccountIdrTransaction, _ := json.Marshal(dst.FinancialAccountIdrTransaction)
			if string(jsonFinancialAccountIdrTransaction) == "{}" { // empty struct
				dst.FinancialAccountIdrTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountIdrTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountIdrTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountInsurancePolicyTransaction'
	if jsonDict["type"] == "FinancialAccountInsurancePolicyTransaction" {
		// try to unmarshal JSON data into FinancialAccountInsurancePolicyTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountInsurancePolicyTransaction);
		if err == nil {
			jsonFinancialAccountInsurancePolicyTransaction, _ := json.Marshal(dst.FinancialAccountInsurancePolicyTransaction)
			if string(jsonFinancialAccountInsurancePolicyTransaction) == "{}" { // empty struct
				dst.FinancialAccountInsurancePolicyTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountInsurancePolicyTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountInsurancePolicyTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountInvitTransaction'
	if jsonDict["type"] == "FinancialAccountInvitTransaction" {
		// try to unmarshal JSON data into FinancialAccountInvitTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountInvitTransaction);
		if err == nil {
			jsonFinancialAccountInvitTransaction, _ := json.Marshal(dst.FinancialAccountInvitTransaction)
			if string(jsonFinancialAccountInvitTransaction) == "{}" { // empty struct
				dst.FinancialAccountInvitTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountInvitTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountInvitTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountLoanTransaction'
	if jsonDict["type"] == "FinancialAccountLoanTransaction" {
		// try to unmarshal JSON data into FinancialAccountLoanTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountLoanTransaction);
		if err == nil {
			jsonFinancialAccountLoanTransaction, _ := json.Marshal(dst.FinancialAccountLoanTransaction)
			if string(jsonFinancialAccountLoanTransaction) == "{}" { // empty struct
				dst.FinancialAccountLoanTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountLoanTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountLoanTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountMutualFundTransaction'
	if jsonDict["type"] == "FinancialAccountMutualFundTransaction" {
		// try to unmarshal JSON data into FinancialAccountMutualFundTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountMutualFundTransaction);
		if err == nil {
			jsonFinancialAccountMutualFundTransaction, _ := json.Marshal(dst.FinancialAccountMutualFundTransaction)
			if string(jsonFinancialAccountMutualFundTransaction) == "{}" { // empty struct
				dst.FinancialAccountMutualFundTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountMutualFundTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountMutualFundTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountNpsTransaction'
	if jsonDict["type"] == "FinancialAccountNpsTransaction" {
		// try to unmarshal JSON data into FinancialAccountNpsTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountNpsTransaction);
		if err == nil {
			jsonFinancialAccountNpsTransaction, _ := json.Marshal(dst.FinancialAccountNpsTransaction)
			if string(jsonFinancialAccountNpsTransaction) == "{}" { // empty struct
				dst.FinancialAccountNpsTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountNpsTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountNpsTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountPpfTransaction'
	if jsonDict["type"] == "FinancialAccountPpfTransaction" {
		// try to unmarshal JSON data into FinancialAccountPpfTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountPpfTransaction);
		if err == nil {
			jsonFinancialAccountPpfTransaction, _ := json.Marshal(dst.FinancialAccountPpfTransaction)
			if string(jsonFinancialAccountPpfTransaction) == "{}" { // empty struct
				dst.FinancialAccountPpfTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountPpfTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountPpfTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountRecurringDepositTransaction'
	if jsonDict["type"] == "FinancialAccountRecurringDepositTransaction" {
		// try to unmarshal JSON data into FinancialAccountRecurringDepositTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountRecurringDepositTransaction);
		if err == nil {
			jsonFinancialAccountRecurringDepositTransaction, _ := json.Marshal(dst.FinancialAccountRecurringDepositTransaction)
			if string(jsonFinancialAccountRecurringDepositTransaction) == "{}" { // empty struct
				dst.FinancialAccountRecurringDepositTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountRecurringDepositTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountRecurringDepositTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountReitTransaction'
	if jsonDict["type"] == "FinancialAccountReitTransaction" {
		// try to unmarshal JSON data into FinancialAccountReitTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountReitTransaction);
		if err == nil {
			jsonFinancialAccountReitTransaction, _ := json.Marshal(dst.FinancialAccountReitTransaction)
			if string(jsonFinancialAccountReitTransaction) == "{}" { // empty struct
				dst.FinancialAccountReitTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountReitTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountReitTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountSipTransaction'
	if jsonDict["type"] == "FinancialAccountSipTransaction" {
		// try to unmarshal JSON data into FinancialAccountSipTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountSipTransaction);
		if err == nil {
			jsonFinancialAccountSipTransaction, _ := json.Marshal(dst.FinancialAccountSipTransaction)
			if string(jsonFinancialAccountSipTransaction) == "{}" { // empty struct
				dst.FinancialAccountSipTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountSipTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountSipTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountTermDepositTransaction'
	if jsonDict["type"] == "FinancialAccountTermDepositTransaction" {
		// try to unmarshal JSON data into FinancialAccountTermDepositTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountTermDepositTransaction);
		if err == nil {
			jsonFinancialAccountTermDepositTransaction, _ := json.Marshal(dst.FinancialAccountTermDepositTransaction)
			if string(jsonFinancialAccountTermDepositTransaction) == "{}" { // empty struct
				dst.FinancialAccountTermDepositTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountTermDepositTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountTermDepositTransaction = nil
		}
	}

	// check if the discriminator value is 'FinancialAccountUlipTransaction'
	if jsonDict["type"] == "FinancialAccountUlipTransaction" {
		// try to unmarshal JSON data into FinancialAccountUlipTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountUlipTransaction);
		if err == nil {
			jsonFinancialAccountUlipTransaction, _ := json.Marshal(dst.FinancialAccountUlipTransaction)
			if string(jsonFinancialAccountUlipTransaction) == "{}" { // empty struct
				dst.FinancialAccountUlipTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountUlipTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountUlipTransaction = nil
		}
	}

	// check if the discriminator value is 'GovtSecurityTransaction'
	if jsonDict["type"] == "GovtSecurityTransaction" {
		// try to unmarshal JSON data into FinancialAccountGovtSecurityTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountGovtSecurityTransaction);
		if err == nil {
			jsonFinancialAccountGovtSecurityTransaction, _ := json.Marshal(dst.FinancialAccountGovtSecurityTransaction)
			if string(jsonFinancialAccountGovtSecurityTransaction) == "{}" { // empty struct
				dst.FinancialAccountGovtSecurityTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountGovtSecurityTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountGovtSecurityTransaction = nil
		}
	}

	// check if the discriminator value is 'IdrTransaction'
	if jsonDict["type"] == "IdrTransaction" {
		// try to unmarshal JSON data into FinancialAccountIdrTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountIdrTransaction);
		if err == nil {
			jsonFinancialAccountIdrTransaction, _ := json.Marshal(dst.FinancialAccountIdrTransaction)
			if string(jsonFinancialAccountIdrTransaction) == "{}" { // empty struct
				dst.FinancialAccountIdrTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountIdrTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountIdrTransaction = nil
		}
	}

	// check if the discriminator value is 'InsurancePolicyTransaction'
	if jsonDict["type"] == "InsurancePolicyTransaction" {
		// try to unmarshal JSON data into FinancialAccountInsurancePolicyTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountInsurancePolicyTransaction);
		if err == nil {
			jsonFinancialAccountInsurancePolicyTransaction, _ := json.Marshal(dst.FinancialAccountInsurancePolicyTransaction)
			if string(jsonFinancialAccountInsurancePolicyTransaction) == "{}" { // empty struct
				dst.FinancialAccountInsurancePolicyTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountInsurancePolicyTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountInsurancePolicyTransaction = nil
		}
	}

	// check if the discriminator value is 'InvitTransaction'
	if jsonDict["type"] == "InvitTransaction" {
		// try to unmarshal JSON data into FinancialAccountInvitTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountInvitTransaction);
		if err == nil {
			jsonFinancialAccountInvitTransaction, _ := json.Marshal(dst.FinancialAccountInvitTransaction)
			if string(jsonFinancialAccountInvitTransaction) == "{}" { // empty struct
				dst.FinancialAccountInvitTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountInvitTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountInvitTransaction = nil
		}
	}

	// check if the discriminator value is 'LoanTransaction'
	if jsonDict["type"] == "LoanTransaction" {
		// try to unmarshal JSON data into FinancialAccountLoanTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountLoanTransaction);
		if err == nil {
			jsonFinancialAccountLoanTransaction, _ := json.Marshal(dst.FinancialAccountLoanTransaction)
			if string(jsonFinancialAccountLoanTransaction) == "{}" { // empty struct
				dst.FinancialAccountLoanTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountLoanTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountLoanTransaction = nil
		}
	}

	// check if the discriminator value is 'MutualFundTransaction'
	if jsonDict["type"] == "MutualFundTransaction" {
		// try to unmarshal JSON data into FinancialAccountMutualFundTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountMutualFundTransaction);
		if err == nil {
			jsonFinancialAccountMutualFundTransaction, _ := json.Marshal(dst.FinancialAccountMutualFundTransaction)
			if string(jsonFinancialAccountMutualFundTransaction) == "{}" { // empty struct
				dst.FinancialAccountMutualFundTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountMutualFundTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountMutualFundTransaction = nil
		}
	}

	// check if the discriminator value is 'NpsTransaction'
	if jsonDict["type"] == "NpsTransaction" {
		// try to unmarshal JSON data into FinancialAccountNpsTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountNpsTransaction);
		if err == nil {
			jsonFinancialAccountNpsTransaction, _ := json.Marshal(dst.FinancialAccountNpsTransaction)
			if string(jsonFinancialAccountNpsTransaction) == "{}" { // empty struct
				dst.FinancialAccountNpsTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountNpsTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountNpsTransaction = nil
		}
	}

	// check if the discriminator value is 'PpfTransaction'
	if jsonDict["type"] == "PpfTransaction" {
		// try to unmarshal JSON data into FinancialAccountPpfTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountPpfTransaction);
		if err == nil {
			jsonFinancialAccountPpfTransaction, _ := json.Marshal(dst.FinancialAccountPpfTransaction)
			if string(jsonFinancialAccountPpfTransaction) == "{}" { // empty struct
				dst.FinancialAccountPpfTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountPpfTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountPpfTransaction = nil
		}
	}

	// check if the discriminator value is 'RecurringDepositTransaction'
	if jsonDict["type"] == "RecurringDepositTransaction" {
		// try to unmarshal JSON data into FinancialAccountRecurringDepositTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountRecurringDepositTransaction);
		if err == nil {
			jsonFinancialAccountRecurringDepositTransaction, _ := json.Marshal(dst.FinancialAccountRecurringDepositTransaction)
			if string(jsonFinancialAccountRecurringDepositTransaction) == "{}" { // empty struct
				dst.FinancialAccountRecurringDepositTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountRecurringDepositTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountRecurringDepositTransaction = nil
		}
	}

	// check if the discriminator value is 'ReitTransaction'
	if jsonDict["type"] == "ReitTransaction" {
		// try to unmarshal JSON data into FinancialAccountReitTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountReitTransaction);
		if err == nil {
			jsonFinancialAccountReitTransaction, _ := json.Marshal(dst.FinancialAccountReitTransaction)
			if string(jsonFinancialAccountReitTransaction) == "{}" { // empty struct
				dst.FinancialAccountReitTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountReitTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountReitTransaction = nil
		}
	}

	// check if the discriminator value is 'SipTransaction'
	if jsonDict["type"] == "SipTransaction" {
		// try to unmarshal JSON data into FinancialAccountSipTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountSipTransaction);
		if err == nil {
			jsonFinancialAccountSipTransaction, _ := json.Marshal(dst.FinancialAccountSipTransaction)
			if string(jsonFinancialAccountSipTransaction) == "{}" { // empty struct
				dst.FinancialAccountSipTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountSipTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountSipTransaction = nil
		}
	}

	// check if the discriminator value is 'TermDepositTransaction'
	if jsonDict["type"] == "TermDepositTransaction" {
		// try to unmarshal JSON data into FinancialAccountTermDepositTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountTermDepositTransaction);
		if err == nil {
			jsonFinancialAccountTermDepositTransaction, _ := json.Marshal(dst.FinancialAccountTermDepositTransaction)
			if string(jsonFinancialAccountTermDepositTransaction) == "{}" { // empty struct
				dst.FinancialAccountTermDepositTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountTermDepositTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountTermDepositTransaction = nil
		}
	}

	// check if the discriminator value is 'UlipTransaction'
	if jsonDict["type"] == "UlipTransaction" {
		// try to unmarshal JSON data into FinancialAccountUlipTransaction
		err = json.Unmarshal(data, &dst.FinancialAccountUlipTransaction);
		if err == nil {
			jsonFinancialAccountUlipTransaction, _ := json.Marshal(dst.FinancialAccountUlipTransaction)
			if string(jsonFinancialAccountUlipTransaction) == "{}" { // empty struct
				dst.FinancialAccountUlipTransaction = nil
			} else {
				return nil // data stored in dst.FinancialAccountUlipTransaction, return on the first match
			}
		} else {
			dst.FinancialAccountUlipTransaction = nil
		}
	}

	// try to unmarshal JSON data into FinancialAccountAifTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountAifTransaction);
	if err == nil {
		jsonFinancialAccountAifTransaction, _ := json.Marshal(dst.FinancialAccountAifTransaction)
		if string(jsonFinancialAccountAifTransaction) == "{}" { // empty struct
			dst.FinancialAccountAifTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountAifTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountAifTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountBillPaymentTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountBillPaymentTransaction);
	if err == nil {
		jsonFinancialAccountBillPaymentTransaction, _ := json.Marshal(dst.FinancialAccountBillPaymentTransaction)
		if string(jsonFinancialAccountBillPaymentTransaction) == "{}" { // empty struct
			dst.FinancialAccountBillPaymentTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountBillPaymentTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountBillPaymentTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountBondTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountBondTransaction);
	if err == nil {
		jsonFinancialAccountBondTransaction, _ := json.Marshal(dst.FinancialAccountBondTransaction)
		if string(jsonFinancialAccountBondTransaction) == "{}" { // empty struct
			dst.FinancialAccountBondTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountBondTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountBondTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountCISTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountCISTransaction);
	if err == nil {
		jsonFinancialAccountCISTransaction, _ := json.Marshal(dst.FinancialAccountCISTransaction)
		if string(jsonFinancialAccountCISTransaction) == "{}" { // empty struct
			dst.FinancialAccountCISTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountCISTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountCISTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountCertificateOfDepositTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountCertificateOfDepositTransaction);
	if err == nil {
		jsonFinancialAccountCertificateOfDepositTransaction, _ := json.Marshal(dst.FinancialAccountCertificateOfDepositTransaction)
		if string(jsonFinancialAccountCertificateOfDepositTransaction) == "{}" { // empty struct
			dst.FinancialAccountCertificateOfDepositTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountCertificateOfDepositTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountCertificateOfDepositTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountCommercialPaperTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountCommercialPaperTransaction);
	if err == nil {
		jsonFinancialAccountCommercialPaperTransaction, _ := json.Marshal(dst.FinancialAccountCommercialPaperTransaction)
		if string(jsonFinancialAccountCommercialPaperTransaction) == "{}" { // empty struct
			dst.FinancialAccountCommercialPaperTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountCommercialPaperTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountCommercialPaperTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountCreditCardTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountCreditCardTransaction);
	if err == nil {
		jsonFinancialAccountCreditCardTransaction, _ := json.Marshal(dst.FinancialAccountCreditCardTransaction)
		if string(jsonFinancialAccountCreditCardTransaction) == "{}" { // empty struct
			dst.FinancialAccountCreditCardTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountCreditCardTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountCreditCardTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountDebentureTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountDebentureTransaction);
	if err == nil {
		jsonFinancialAccountDebentureTransaction, _ := json.Marshal(dst.FinancialAccountDebentureTransaction)
		if string(jsonFinancialAccountDebentureTransaction) == "{}" { // empty struct
			dst.FinancialAccountDebentureTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountDebentureTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountDebentureTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountDepositTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountDepositTransaction);
	if err == nil {
		jsonFinancialAccountDepositTransaction, _ := json.Marshal(dst.FinancialAccountDepositTransaction)
		if string(jsonFinancialAccountDepositTransaction) == "{}" { // empty struct
			dst.FinancialAccountDepositTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountDepositTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountDepositTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountEpfTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountEpfTransaction);
	if err == nil {
		jsonFinancialAccountEpfTransaction, _ := json.Marshal(dst.FinancialAccountEpfTransaction)
		if string(jsonFinancialAccountEpfTransaction) == "{}" { // empty struct
			dst.FinancialAccountEpfTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountEpfTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountEpfTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountEquityTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountEquityTransaction);
	if err == nil {
		jsonFinancialAccountEquityTransaction, _ := json.Marshal(dst.FinancialAccountEquityTransaction)
		if string(jsonFinancialAccountEquityTransaction) == "{}" { // empty struct
			dst.FinancialAccountEquityTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountEquityTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountEquityTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountEtfTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountEtfTransaction);
	if err == nil {
		jsonFinancialAccountEtfTransaction, _ := json.Marshal(dst.FinancialAccountEtfTransaction)
		if string(jsonFinancialAccountEtfTransaction) == "{}" { // empty struct
			dst.FinancialAccountEtfTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountEtfTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountEtfTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountGovtSecurityTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountGovtSecurityTransaction);
	if err == nil {
		jsonFinancialAccountGovtSecurityTransaction, _ := json.Marshal(dst.FinancialAccountGovtSecurityTransaction)
		if string(jsonFinancialAccountGovtSecurityTransaction) == "{}" { // empty struct
			dst.FinancialAccountGovtSecurityTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountGovtSecurityTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountGovtSecurityTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountIdrTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountIdrTransaction);
	if err == nil {
		jsonFinancialAccountIdrTransaction, _ := json.Marshal(dst.FinancialAccountIdrTransaction)
		if string(jsonFinancialAccountIdrTransaction) == "{}" { // empty struct
			dst.FinancialAccountIdrTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountIdrTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountIdrTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountInsurancePolicyTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountInsurancePolicyTransaction);
	if err == nil {
		jsonFinancialAccountInsurancePolicyTransaction, _ := json.Marshal(dst.FinancialAccountInsurancePolicyTransaction)
		if string(jsonFinancialAccountInsurancePolicyTransaction) == "{}" { // empty struct
			dst.FinancialAccountInsurancePolicyTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountInsurancePolicyTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountInsurancePolicyTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountInvitTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountInvitTransaction);
	if err == nil {
		jsonFinancialAccountInvitTransaction, _ := json.Marshal(dst.FinancialAccountInvitTransaction)
		if string(jsonFinancialAccountInvitTransaction) == "{}" { // empty struct
			dst.FinancialAccountInvitTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountInvitTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountInvitTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountLoanTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountLoanTransaction);
	if err == nil {
		jsonFinancialAccountLoanTransaction, _ := json.Marshal(dst.FinancialAccountLoanTransaction)
		if string(jsonFinancialAccountLoanTransaction) == "{}" { // empty struct
			dst.FinancialAccountLoanTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountLoanTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountLoanTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountMutualFundTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountMutualFundTransaction);
	if err == nil {
		jsonFinancialAccountMutualFundTransaction, _ := json.Marshal(dst.FinancialAccountMutualFundTransaction)
		if string(jsonFinancialAccountMutualFundTransaction) == "{}" { // empty struct
			dst.FinancialAccountMutualFundTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountMutualFundTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountMutualFundTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountNpsTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountNpsTransaction);
	if err == nil {
		jsonFinancialAccountNpsTransaction, _ := json.Marshal(dst.FinancialAccountNpsTransaction)
		if string(jsonFinancialAccountNpsTransaction) == "{}" { // empty struct
			dst.FinancialAccountNpsTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountNpsTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountNpsTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountPpfTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountPpfTransaction);
	if err == nil {
		jsonFinancialAccountPpfTransaction, _ := json.Marshal(dst.FinancialAccountPpfTransaction)
		if string(jsonFinancialAccountPpfTransaction) == "{}" { // empty struct
			dst.FinancialAccountPpfTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountPpfTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountPpfTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountRecurringDepositTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountRecurringDepositTransaction);
	if err == nil {
		jsonFinancialAccountRecurringDepositTransaction, _ := json.Marshal(dst.FinancialAccountRecurringDepositTransaction)
		if string(jsonFinancialAccountRecurringDepositTransaction) == "{}" { // empty struct
			dst.FinancialAccountRecurringDepositTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountRecurringDepositTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountRecurringDepositTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountReitTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountReitTransaction);
	if err == nil {
		jsonFinancialAccountReitTransaction, _ := json.Marshal(dst.FinancialAccountReitTransaction)
		if string(jsonFinancialAccountReitTransaction) == "{}" { // empty struct
			dst.FinancialAccountReitTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountReitTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountReitTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountSipTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountSipTransaction);
	if err == nil {
		jsonFinancialAccountSipTransaction, _ := json.Marshal(dst.FinancialAccountSipTransaction)
		if string(jsonFinancialAccountSipTransaction) == "{}" { // empty struct
			dst.FinancialAccountSipTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountSipTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountSipTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountTermDepositTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountTermDepositTransaction);
	if err == nil {
		jsonFinancialAccountTermDepositTransaction, _ := json.Marshal(dst.FinancialAccountTermDepositTransaction)
		if string(jsonFinancialAccountTermDepositTransaction) == "{}" { // empty struct
			dst.FinancialAccountTermDepositTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountTermDepositTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountTermDepositTransaction = nil
	}

	// try to unmarshal JSON data into FinancialAccountUlipTransaction
	err = json.Unmarshal(data, &dst.FinancialAccountUlipTransaction);
	if err == nil {
		jsonFinancialAccountUlipTransaction, _ := json.Marshal(dst.FinancialAccountUlipTransaction)
		if string(jsonFinancialAccountUlipTransaction) == "{}" { // empty struct
			dst.FinancialAccountUlipTransaction = nil
		} else {
			return nil // data stored in dst.FinancialAccountUlipTransaction, return on the first match
		}
	} else {
		dst.FinancialAccountUlipTransaction = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(FinancialAccountTransaction)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *FinancialAccountTransaction) MarshalJSON() ([]byte, error) {
	if src.FinancialAccountAifTransaction != nil {
		return json.Marshal(&src.FinancialAccountAifTransaction)
	}

	if src.FinancialAccountBillPaymentTransaction != nil {
		return json.Marshal(&src.FinancialAccountBillPaymentTransaction)
	}

	if src.FinancialAccountBondTransaction != nil {
		return json.Marshal(&src.FinancialAccountBondTransaction)
	}

	if src.FinancialAccountCISTransaction != nil {
		return json.Marshal(&src.FinancialAccountCISTransaction)
	}

	if src.FinancialAccountCertificateOfDepositTransaction != nil {
		return json.Marshal(&src.FinancialAccountCertificateOfDepositTransaction)
	}

	if src.FinancialAccountCommercialPaperTransaction != nil {
		return json.Marshal(&src.FinancialAccountCommercialPaperTransaction)
	}

	if src.FinancialAccountCreditCardTransaction != nil {
		return json.Marshal(&src.FinancialAccountCreditCardTransaction)
	}

	if src.FinancialAccountDebentureTransaction != nil {
		return json.Marshal(&src.FinancialAccountDebentureTransaction)
	}

	if src.FinancialAccountDepositTransaction != nil {
		return json.Marshal(&src.FinancialAccountDepositTransaction)
	}

	if src.FinancialAccountEpfTransaction != nil {
		return json.Marshal(&src.FinancialAccountEpfTransaction)
	}

	if src.FinancialAccountEquityTransaction != nil {
		return json.Marshal(&src.FinancialAccountEquityTransaction)
	}

	if src.FinancialAccountEtfTransaction != nil {
		return json.Marshal(&src.FinancialAccountEtfTransaction)
	}

	if src.FinancialAccountGovtSecurityTransaction != nil {
		return json.Marshal(&src.FinancialAccountGovtSecurityTransaction)
	}

	if src.FinancialAccountIdrTransaction != nil {
		return json.Marshal(&src.FinancialAccountIdrTransaction)
	}

	if src.FinancialAccountInsurancePolicyTransaction != nil {
		return json.Marshal(&src.FinancialAccountInsurancePolicyTransaction)
	}

	if src.FinancialAccountInvitTransaction != nil {
		return json.Marshal(&src.FinancialAccountInvitTransaction)
	}

	if src.FinancialAccountLoanTransaction != nil {
		return json.Marshal(&src.FinancialAccountLoanTransaction)
	}

	if src.FinancialAccountMutualFundTransaction != nil {
		return json.Marshal(&src.FinancialAccountMutualFundTransaction)
	}

	if src.FinancialAccountNpsTransaction != nil {
		return json.Marshal(&src.FinancialAccountNpsTransaction)
	}

	if src.FinancialAccountPpfTransaction != nil {
		return json.Marshal(&src.FinancialAccountPpfTransaction)
	}

	if src.FinancialAccountRecurringDepositTransaction != nil {
		return json.Marshal(&src.FinancialAccountRecurringDepositTransaction)
	}

	if src.FinancialAccountReitTransaction != nil {
		return json.Marshal(&src.FinancialAccountReitTransaction)
	}

	if src.FinancialAccountSipTransaction != nil {
		return json.Marshal(&src.FinancialAccountSipTransaction)
	}

	if src.FinancialAccountTermDepositTransaction != nil {
		return json.Marshal(&src.FinancialAccountTermDepositTransaction)
	}

	if src.FinancialAccountUlipTransaction != nil {
		return json.Marshal(&src.FinancialAccountUlipTransaction)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableFinancialAccountTransaction struct {
	value *FinancialAccountTransaction
	isSet bool
}

func (v NullableFinancialAccountTransaction) Get() *FinancialAccountTransaction {
	return v.value
}

func (v *NullableFinancialAccountTransaction) Set(val *FinancialAccountTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialAccountTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialAccountTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialAccountTransaction(val *FinancialAccountTransaction) *NullableFinancialAccountTransaction {
	return &NullableFinancialAccountTransaction{value: val, isSet: true}
}

func (v NullableFinancialAccountTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialAccountTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


