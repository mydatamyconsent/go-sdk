/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// HoldingNominee the model 'HoldingNominee'
type HoldingNominee string

// List of HoldingNominee
const (
	REGISTERED HoldingNominee = "Registered"
	NOT_REGISTERED HoldingNominee = "NotRegistered"
)

// All allowed values of HoldingNominee enum
var AllowedHoldingNomineeEnumValues = []HoldingNominee{
	"Registered",
	"NotRegistered",
}

func (v *HoldingNominee) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HoldingNominee(value)
	for _, existing := range AllowedHoldingNomineeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HoldingNominee", value)
}

// NewHoldingNomineeFromValue returns a pointer to a valid HoldingNominee
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHoldingNomineeFromValue(v string) (*HoldingNominee, error) {
	ev := HoldingNominee(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HoldingNominee: valid values are %v", v, AllowedHoldingNomineeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HoldingNominee) IsValid() bool {
	for _, existing := range AllowedHoldingNomineeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HoldingNominee value
func (v HoldingNominee) Ptr() *HoldingNominee {
	return &v
}

type NullableHoldingNominee struct {
	value *HoldingNominee
	isSet bool
}

func (v NullableHoldingNominee) Get() *HoldingNominee {
	return v.value
}

func (v *NullableHoldingNominee) Set(val *HoldingNominee) {
	v.value = val
	v.isSet = true
}

func (v NullableHoldingNominee) IsSet() bool {
	return v.isSet
}

func (v *NullableHoldingNominee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHoldingNominee(val *HoldingNominee) *NullableHoldingNominee {
	return &NullableHoldingNominee{value: val, isSet: true}
}

func (v NullableHoldingNominee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHoldingNominee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

