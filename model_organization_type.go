/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
)

// OrganizationType struct for OrganizationType
type OrganizationType struct {
	Id *string `json:"id,omitempty"`
	CountryId *string `json:"countryId,omitempty"`
	TypeName NullableString `json:"typeName,omitempty"`
	ElfCode NullableString `json:"elfCode,omitempty"`
	Country *Country `json:"country,omitempty"`
}

// NewOrganizationType instantiates a new OrganizationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationType() *OrganizationType {
	this := OrganizationType{}
	return &this
}

// NewOrganizationTypeWithDefaults instantiates a new OrganizationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationTypeWithDefaults() *OrganizationType {
	this := OrganizationType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrganizationType) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationType) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrganizationType) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrganizationType) SetId(v string) {
	o.Id = &v
}

// GetCountryId returns the CountryId field value if set, zero value otherwise.
func (o *OrganizationType) GetCountryId() string {
	if o == nil || o.CountryId == nil {
		var ret string
		return ret
	}
	return *o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationType) GetCountryIdOk() (*string, bool) {
	if o == nil || o.CountryId == nil {
		return nil, false
	}
	return o.CountryId, true
}

// HasCountryId returns a boolean if a field has been set.
func (o *OrganizationType) HasCountryId() bool {
	if o != nil && o.CountryId != nil {
		return true
	}

	return false
}

// SetCountryId gets a reference to the given string and assigns it to the CountryId field.
func (o *OrganizationType) SetCountryId(v string) {
	o.CountryId = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationType) GetTypeName() string {
	if o == nil || o.TypeName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TypeName.Get()
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationType) GetTypeNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TypeName.Get(), o.TypeName.IsSet()
}

// HasTypeName returns a boolean if a field has been set.
func (o *OrganizationType) HasTypeName() bool {
	if o != nil && o.TypeName.IsSet() {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given NullableString and assigns it to the TypeName field.
func (o *OrganizationType) SetTypeName(v string) {
	o.TypeName.Set(&v)
}
// SetTypeNameNil sets the value for TypeName to be an explicit nil
func (o *OrganizationType) SetTypeNameNil() {
	o.TypeName.Set(nil)
}

// UnsetTypeName ensures that no value is present for TypeName, not even an explicit nil
func (o *OrganizationType) UnsetTypeName() {
	o.TypeName.Unset()
}

// GetElfCode returns the ElfCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrganizationType) GetElfCode() string {
	if o == nil || o.ElfCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.ElfCode.Get()
}

// GetElfCodeOk returns a tuple with the ElfCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrganizationType) GetElfCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ElfCode.Get(), o.ElfCode.IsSet()
}

// HasElfCode returns a boolean if a field has been set.
func (o *OrganizationType) HasElfCode() bool {
	if o != nil && o.ElfCode.IsSet() {
		return true
	}

	return false
}

// SetElfCode gets a reference to the given NullableString and assigns it to the ElfCode field.
func (o *OrganizationType) SetElfCode(v string) {
	o.ElfCode.Set(&v)
}
// SetElfCodeNil sets the value for ElfCode to be an explicit nil
func (o *OrganizationType) SetElfCodeNil() {
	o.ElfCode.Set(nil)
}

// UnsetElfCode ensures that no value is present for ElfCode, not even an explicit nil
func (o *OrganizationType) UnsetElfCode() {
	o.ElfCode.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *OrganizationType) GetCountry() Country {
	if o == nil || o.Country == nil {
		var ret Country
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationType) GetCountryOk() (*Country, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *OrganizationType) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given Country and assigns it to the Country field.
func (o *OrganizationType) SetCountry(v Country) {
	o.Country = &v
}

func (o OrganizationType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CountryId != nil {
		toSerialize["countryId"] = o.CountryId
	}
	if o.TypeName.IsSet() {
		toSerialize["typeName"] = o.TypeName.Get()
	}
	if o.ElfCode.IsSet() {
		toSerialize["elfCode"] = o.ElfCode.Get()
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationType struct {
	value *OrganizationType
	isSet bool
}

func (v NullableOrganizationType) Get() *OrganizationType {
	return v.value
}

func (v *NullableOrganizationType) Set(val *OrganizationType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationType(val *OrganizationType) *NullableOrganizationType {
	return &NullableOrganizationType{value: val, isSet: true}
}

func (v NullableOrganizationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


