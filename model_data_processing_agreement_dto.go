/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/go-sdk

import (
	"encoding/json"
)

// DataProcessingAgreementDto struct for DataProcessingAgreementDto
type DataProcessingAgreementDto struct {
	Id string `json:"id"`
	Version string `json:"version"`
	Body string `json:"body"`
	AttachmentUrl string `json:"attachmentUrl"`
}

// NewDataProcessingAgreementDto instantiates a new DataProcessingAgreementDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataProcessingAgreementDto(id string, version string, body string, attachmentUrl string) *DataProcessingAgreementDto {
	this := DataProcessingAgreementDto{}
	this.Id = id
	this.Version = version
	this.Body = body
	this.AttachmentUrl = attachmentUrl
	return &this
}

// NewDataProcessingAgreementDtoWithDefaults instantiates a new DataProcessingAgreementDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataProcessingAgreementDtoWithDefaults() *DataProcessingAgreementDto {
	this := DataProcessingAgreementDto{}
	return &this
}

// GetId returns the Id field value
func (o *DataProcessingAgreementDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DataProcessingAgreementDto) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DataProcessingAgreementDto) SetId(v string) {
	o.Id = v
}

// GetVersion returns the Version field value
func (o *DataProcessingAgreementDto) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DataProcessingAgreementDto) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DataProcessingAgreementDto) SetVersion(v string) {
	o.Version = v
}

// GetBody returns the Body field value
func (o *DataProcessingAgreementDto) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *DataProcessingAgreementDto) GetBodyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *DataProcessingAgreementDto) SetBody(v string) {
	o.Body = v
}

// GetAttachmentUrl returns the AttachmentUrl field value
func (o *DataProcessingAgreementDto) GetAttachmentUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttachmentUrl
}

// GetAttachmentUrlOk returns a tuple with the AttachmentUrl field value
// and a boolean to check if the value has been set.
func (o *DataProcessingAgreementDto) GetAttachmentUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AttachmentUrl, true
}

// SetAttachmentUrl sets field value
func (o *DataProcessingAgreementDto) SetAttachmentUrl(v string) {
	o.AttachmentUrl = v
}

func (o DataProcessingAgreementDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["body"] = o.Body
	}
	if true {
		toSerialize["attachmentUrl"] = o.AttachmentUrl
	}
	return json.Marshal(toSerialize)
}

type NullableDataProcessingAgreementDto struct {
	value *DataProcessingAgreementDto
	isSet bool
}

func (v NullableDataProcessingAgreementDto) Get() *DataProcessingAgreementDto {
	return v.value
}

func (v *NullableDataProcessingAgreementDto) Set(val *DataProcessingAgreementDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataProcessingAgreementDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataProcessingAgreementDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataProcessingAgreementDto(val *DataProcessingAgreementDto) *NullableDataProcessingAgreementDto {
	return &NullableDataProcessingAgreementDto{value: val, isSet: true}
}

func (v NullableDataProcessingAgreementDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataProcessingAgreementDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


