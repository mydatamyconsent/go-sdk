/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// FinancialAccounts struct for FinancialAccounts
type FinancialAccounts struct {
	Drn NullableString `json:"drn,omitempty"`
	RequiredDetails []FinancialAccountDetailsRequired `json:"required_details,omitempty"`
	StartDate NullableTime `json:"start_date,omitempty"`
	EndDate NullableTime `json:"end_date,omitempty"`
}

// NewFinancialAccounts instantiates a new FinancialAccounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancialAccounts() *FinancialAccounts {
	this := FinancialAccounts{}
	return &this
}

// NewFinancialAccountsWithDefaults instantiates a new FinancialAccounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialAccountsWithDefaults() *FinancialAccounts {
	this := FinancialAccounts{}
	return &this
}

// GetDrn returns the Drn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccounts) GetDrn() string {
	if o == nil || o.Drn.Get() == nil {
		var ret string
		return ret
	}
	return *o.Drn.Get()
}

// GetDrnOk returns a tuple with the Drn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccounts) GetDrnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Drn.Get(), o.Drn.IsSet()
}

// HasDrn returns a boolean if a field has been set.
func (o *FinancialAccounts) HasDrn() bool {
	if o != nil && o.Drn.IsSet() {
		return true
	}

	return false
}

// SetDrn gets a reference to the given NullableString and assigns it to the Drn field.
func (o *FinancialAccounts) SetDrn(v string) {
	o.Drn.Set(&v)
}
// SetDrnNil sets the value for Drn to be an explicit nil
func (o *FinancialAccounts) SetDrnNil() {
	o.Drn.Set(nil)
}

// UnsetDrn ensures that no value is present for Drn, not even an explicit nil
func (o *FinancialAccounts) UnsetDrn() {
	o.Drn.Unset()
}

// GetRequiredDetails returns the RequiredDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccounts) GetRequiredDetails() []FinancialAccountDetailsRequired {
	if o == nil {
		var ret []FinancialAccountDetailsRequired
		return ret
	}
	return o.RequiredDetails
}

// GetRequiredDetailsOk returns a tuple with the RequiredDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccounts) GetRequiredDetailsOk() ([]FinancialAccountDetailsRequired, bool) {
	if o == nil || o.RequiredDetails == nil {
		return nil, false
	}
	return o.RequiredDetails, true
}

// HasRequiredDetails returns a boolean if a field has been set.
func (o *FinancialAccounts) HasRequiredDetails() bool {
	if o != nil && o.RequiredDetails != nil {
		return true
	}

	return false
}

// SetRequiredDetails gets a reference to the given []FinancialAccountDetailsRequired and assigns it to the RequiredDetails field.
func (o *FinancialAccounts) SetRequiredDetails(v []FinancialAccountDetailsRequired) {
	o.RequiredDetails = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccounts) GetStartDate() time.Time {
	if o == nil || o.StartDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccounts) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *FinancialAccounts) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableTime and assigns it to the StartDate field.
func (o *FinancialAccounts) SetStartDate(v time.Time) {
	o.StartDate.Set(&v)
}
// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *FinancialAccounts) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *FinancialAccounts) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccounts) GetEndDate() time.Time {
	if o == nil || o.EndDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccounts) GetEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *FinancialAccounts) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableTime and assigns it to the EndDate field.
func (o *FinancialAccounts) SetEndDate(v time.Time) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *FinancialAccounts) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *FinancialAccounts) UnsetEndDate() {
	o.EndDate.Unset()
}

func (o FinancialAccounts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Drn.IsSet() {
		toSerialize["drn"] = o.Drn.Get()
	}
	if o.RequiredDetails != nil {
		toSerialize["required_details"] = o.RequiredDetails
	}
	if o.StartDate.IsSet() {
		toSerialize["start_date"] = o.StartDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["end_date"] = o.EndDate.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFinancialAccounts struct {
	value *FinancialAccounts
	isSet bool
}

func (v NullableFinancialAccounts) Get() *FinancialAccounts {
	return v.value
}

func (v *NullableFinancialAccounts) Set(val *FinancialAccounts) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialAccounts) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialAccounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialAccounts(val *FinancialAccounts) *NullableFinancialAccounts {
	return &NullableFinancialAccounts{value: val, isSet: true}
}

func (v NullableFinancialAccounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialAccounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


