/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// Ppf struct for Ppf
type Ppf struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Identifier string `json:"identifier"`
	Amount float64 `json:"amount"`
}

// NewPpf instantiates a new Ppf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPpf(id string, name string, identifier string, amount float64) *Ppf {
	this := Ppf{}
	this.Id = id
	this.Name = name
	this.Identifier = identifier
	this.Amount = amount
	return &this
}

// NewPpfWithDefaults instantiates a new Ppf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPpfWithDefaults() *Ppf {
	this := Ppf{}
	return &this
}

// GetId returns the Id field value
func (o *Ppf) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Ppf) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Ppf) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Ppf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Ppf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Ppf) SetName(v string) {
	o.Name = v
}

// GetIdentifier returns the Identifier field value
func (o *Ppf) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *Ppf) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *Ppf) SetIdentifier(v string) {
	o.Identifier = v
}

// GetAmount returns the Amount field value
func (o *Ppf) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Ppf) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Ppf) SetAmount(v float64) {
	o.Amount = v
}

func (o Ppf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	return json.Marshal(toSerialize)
}

type NullablePpf struct {
	value *Ppf
	isSet bool
}

func (v NullablePpf) Get() *Ppf {
	return v.value
}

func (v *NullablePpf) Set(val *Ppf) {
	v.value = val
	v.isSet = true
}

func (v NullablePpf) IsSet() bool {
	return v.isSet
}

func (v *NullablePpf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePpf(val *Ppf) *NullablePpf {
	return &NullablePpf{value: val, isSet: true}
}

func (v NullablePpf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePpf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


