/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// TermDepositAccountDetails struct for TermDepositAccountDetails
type TermDepositAccountDetails struct {
	Info TermDepositInformation `json:"info"`
	Holder Holder `json:"holder"`
	Bank TermDepositBankInformation `json:"bank"`
}

// NewTermDepositAccountDetails instantiates a new TermDepositAccountDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTermDepositAccountDetails(info TermDepositInformation, holder Holder, bank TermDepositBankInformation) *TermDepositAccountDetails {
	this := TermDepositAccountDetails{}
	this.Info = info
	this.Holder = holder
	this.Bank = bank
	return &this
}

// NewTermDepositAccountDetailsWithDefaults instantiates a new TermDepositAccountDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTermDepositAccountDetailsWithDefaults() *TermDepositAccountDetails {
	this := TermDepositAccountDetails{}
	return &this
}

// GetInfo returns the Info field value
func (o *TermDepositAccountDetails) GetInfo() TermDepositInformation {
	if o == nil {
		var ret TermDepositInformation
		return ret
	}

	return o.Info
}

// GetInfoOk returns a tuple with the Info field value
// and a boolean to check if the value has been set.
func (o *TermDepositAccountDetails) GetInfoOk() (*TermDepositInformation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Info, true
}

// SetInfo sets field value
func (o *TermDepositAccountDetails) SetInfo(v TermDepositInformation) {
	o.Info = v
}

// GetHolder returns the Holder field value
func (o *TermDepositAccountDetails) GetHolder() Holder {
	if o == nil {
		var ret Holder
		return ret
	}

	return o.Holder
}

// GetHolderOk returns a tuple with the Holder field value
// and a boolean to check if the value has been set.
func (o *TermDepositAccountDetails) GetHolderOk() (*Holder, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Holder, true
}

// SetHolder sets field value
func (o *TermDepositAccountDetails) SetHolder(v Holder) {
	o.Holder = v
}

// GetBank returns the Bank field value
func (o *TermDepositAccountDetails) GetBank() TermDepositBankInformation {
	if o == nil {
		var ret TermDepositBankInformation
		return ret
	}

	return o.Bank
}

// GetBankOk returns a tuple with the Bank field value
// and a boolean to check if the value has been set.
func (o *TermDepositAccountDetails) GetBankOk() (*TermDepositBankInformation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bank, true
}

// SetBank sets field value
func (o *TermDepositAccountDetails) SetBank(v TermDepositBankInformation) {
	o.Bank = v
}

func (o TermDepositAccountDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["info"] = o.Info
	}
	if true {
		toSerialize["holder"] = o.Holder
	}
	if true {
		toSerialize["bank"] = o.Bank
	}
	return json.Marshal(toSerialize)
}

type NullableTermDepositAccountDetails struct {
	value *TermDepositAccountDetails
	isSet bool
}

func (v NullableTermDepositAccountDetails) Get() *TermDepositAccountDetails {
	return v.value
}

func (v *NullableTermDepositAccountDetails) Set(val *TermDepositAccountDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableTermDepositAccountDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableTermDepositAccountDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTermDepositAccountDetails(val *TermDepositAccountDetails) *NullableTermDepositAccountDetails {
	return &NullableTermDepositAccountDetails{value: val, isSet: true}
}

func (v NullableTermDepositAccountDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTermDepositAccountDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


