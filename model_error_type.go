/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// ErrorType the model 'ErrorType'
type ErrorType string

// List of ErrorType
const (
	INVALID_ACCESS_TOKEN ErrorType = "InvalidAccessToken"
	INVALID_REFRESH_TOKEN ErrorType = "InvalidRefreshToken"
	INSUFFICIENT_PERMISSION ErrorType = "InsufficientPermission"
	INTERNAL_SERVER_ERROR ErrorType = "InternalServerError"
	BAD_REQUEST ErrorType = "BadRequest"
	NOT_FOUND ErrorType = "NotFound"
	INVALID_ORGANIZATION ErrorType = "InvalidOrganization"
	INVALID_FILE_UPLOAD_TYPE ErrorType = "InvalidFileUploadType"
)

// All allowed values of ErrorType enum
var AllowedErrorTypeEnumValues = []ErrorType{
	"InvalidAccessToken",
	"InvalidRefreshToken",
	"InsufficientPermission",
	"InternalServerError",
	"BadRequest",
	"NotFound",
	"InvalidOrganization",
	"InvalidFileUploadType",
}

func (v *ErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ErrorType(value)
	for _, existing := range AllowedErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ErrorType", value)
}

// NewErrorTypeFromValue returns a pointer to a valid ErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErrorTypeFromValue(v string) (*ErrorType, error) {
	ev := ErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErrorType: valid values are %v", v, AllowedErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErrorType) IsValid() bool {
	for _, existing := range AllowedErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ErrorType value
func (v ErrorType) Ptr() *ErrorType {
	return &v
}

type NullableErrorType struct {
	value *ErrorType
	isSet bool
}

func (v NullableErrorType) Get() *ErrorType {
	return v.value
}

func (v *NullableErrorType) Set(val *ErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorType(val *ErrorType) *NullableErrorType {
	return &NullableErrorType{value: val, isSet: true}
}

func (v NullableErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

