/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// DocumentDigitalSignature Document digital signature.
type DocumentDigitalSignature struct {
	// Name.
	Name string `json:"name"`
	// Signature issued by.
	IssuedBy string `json:"issuedBy"`
	// Signature issuer name.
	IssuerName string `json:"issuerName"`
	// Signature valid from datatime in UTC timezone.
	ValidFromUtc time.Time `json:"validFromUtc"`
	// Signature valid to datatime in UTC timezone.
	ValidToUtc time.Time `json:"validToUtc"`
}

// NewDocumentDigitalSignature instantiates a new DocumentDigitalSignature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentDigitalSignature(name string, issuedBy string, issuerName string, validFromUtc time.Time, validToUtc time.Time) *DocumentDigitalSignature {
	this := DocumentDigitalSignature{}
	this.Name = name
	this.IssuedBy = issuedBy
	this.IssuerName = issuerName
	this.ValidFromUtc = validFromUtc
	this.ValidToUtc = validToUtc
	return &this
}

// NewDocumentDigitalSignatureWithDefaults instantiates a new DocumentDigitalSignature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentDigitalSignatureWithDefaults() *DocumentDigitalSignature {
	this := DocumentDigitalSignature{}
	return &this
}

// GetName returns the Name field value
func (o *DocumentDigitalSignature) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DocumentDigitalSignature) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DocumentDigitalSignature) SetName(v string) {
	o.Name = v
}

// GetIssuedBy returns the IssuedBy field value
func (o *DocumentDigitalSignature) GetIssuedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuedBy
}

// GetIssuedByOk returns a tuple with the IssuedBy field value
// and a boolean to check if the value has been set.
func (o *DocumentDigitalSignature) GetIssuedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuedBy, true
}

// SetIssuedBy sets field value
func (o *DocumentDigitalSignature) SetIssuedBy(v string) {
	o.IssuedBy = v
}

// GetIssuerName returns the IssuerName field value
func (o *DocumentDigitalSignature) GetIssuerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuerName
}

// GetIssuerNameOk returns a tuple with the IssuerName field value
// and a boolean to check if the value has been set.
func (o *DocumentDigitalSignature) GetIssuerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuerName, true
}

// SetIssuerName sets field value
func (o *DocumentDigitalSignature) SetIssuerName(v string) {
	o.IssuerName = v
}

// GetValidFromUtc returns the ValidFromUtc field value
func (o *DocumentDigitalSignature) GetValidFromUtc() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ValidFromUtc
}

// GetValidFromUtcOk returns a tuple with the ValidFromUtc field value
// and a boolean to check if the value has been set.
func (o *DocumentDigitalSignature) GetValidFromUtcOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidFromUtc, true
}

// SetValidFromUtc sets field value
func (o *DocumentDigitalSignature) SetValidFromUtc(v time.Time) {
	o.ValidFromUtc = v
}

// GetValidToUtc returns the ValidToUtc field value
func (o *DocumentDigitalSignature) GetValidToUtc() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ValidToUtc
}

// GetValidToUtcOk returns a tuple with the ValidToUtc field value
// and a boolean to check if the value has been set.
func (o *DocumentDigitalSignature) GetValidToUtcOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidToUtc, true
}

// SetValidToUtc sets field value
func (o *DocumentDigitalSignature) SetValidToUtc(v time.Time) {
	o.ValidToUtc = v
}

func (o DocumentDigitalSignature) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["issuedBy"] = o.IssuedBy
	}
	if true {
		toSerialize["issuerName"] = o.IssuerName
	}
	if true {
		toSerialize["validFromUtc"] = o.ValidFromUtc
	}
	if true {
		toSerialize["validToUtc"] = o.ValidToUtc
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentDigitalSignature struct {
	value *DocumentDigitalSignature
	isSet bool
}

func (v NullableDocumentDigitalSignature) Get() *DocumentDigitalSignature {
	return v.value
}

func (v *NullableDocumentDigitalSignature) Set(val *DocumentDigitalSignature) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentDigitalSignature) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentDigitalSignature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentDigitalSignature(val *DocumentDigitalSignature) *NullableDocumentDigitalSignature {
	return &NullableDocumentDigitalSignature{value: val, isSet: true}
}

func (v NullableDocumentDigitalSignature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentDigitalSignature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


