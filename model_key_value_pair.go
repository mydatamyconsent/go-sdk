/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// KeyValuePair struct for KeyValuePair
type KeyValuePair struct {
	Key string `json:"key"`
	Value string `json:"value"`
}

// NewKeyValuePair instantiates a new KeyValuePair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyValuePair(key string, value string) *KeyValuePair {
	this := KeyValuePair{}
	this.Key = key
	this.Value = value
	return &this
}

// NewKeyValuePairWithDefaults instantiates a new KeyValuePair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyValuePairWithDefaults() *KeyValuePair {
	this := KeyValuePair{}
	return &this
}

// GetKey returns the Key field value
func (o *KeyValuePair) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *KeyValuePair) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *KeyValuePair) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *KeyValuePair) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *KeyValuePair) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *KeyValuePair) SetValue(v string) {
	o.Value = v
}

func (o KeyValuePair) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableKeyValuePair struct {
	value *KeyValuePair
	isSet bool
}

func (v NullableKeyValuePair) Get() *KeyValuePair {
	return v.value
}

func (v *NullableKeyValuePair) Set(val *KeyValuePair) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyValuePair) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyValuePair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyValuePair(val *KeyValuePair) *NullableKeyValuePair {
	return &NullableKeyValuePair{value: val, isSet: true}
}

func (v NullableKeyValuePair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyValuePair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


