/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// DataConsentDocumentDetailsDto struct for DataConsentDocumentDetailsDto
type DataConsentDocumentDetailsDto struct {
	FieldTitle string `json:"fieldTitle"`
	FieldSlug string `json:"fieldSlug"`
	SupportedDocumentTypeCategoryDetails []SupportedDocumentTypeCategoryDetailsDto `json:"supportedDocumentTypeCategoryDetails"`
	Requirement DocumentsRequired `json:"requirement"`
}

// NewDataConsentDocumentDetailsDto instantiates a new DataConsentDocumentDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataConsentDocumentDetailsDto(fieldTitle string, fieldSlug string, supportedDocumentTypeCategoryDetails []SupportedDocumentTypeCategoryDetailsDto, requirement DocumentsRequired) *DataConsentDocumentDetailsDto {
	this := DataConsentDocumentDetailsDto{}
	this.FieldTitle = fieldTitle
	this.FieldSlug = fieldSlug
	this.SupportedDocumentTypeCategoryDetails = supportedDocumentTypeCategoryDetails
	this.Requirement = requirement
	return &this
}

// NewDataConsentDocumentDetailsDtoWithDefaults instantiates a new DataConsentDocumentDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataConsentDocumentDetailsDtoWithDefaults() *DataConsentDocumentDetailsDto {
	this := DataConsentDocumentDetailsDto{}
	return &this
}

// GetFieldTitle returns the FieldTitle field value
func (o *DataConsentDocumentDetailsDto) GetFieldTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldTitle
}

// GetFieldTitleOk returns a tuple with the FieldTitle field value
// and a boolean to check if the value has been set.
func (o *DataConsentDocumentDetailsDto) GetFieldTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FieldTitle, true
}

// SetFieldTitle sets field value
func (o *DataConsentDocumentDetailsDto) SetFieldTitle(v string) {
	o.FieldTitle = v
}

// GetFieldSlug returns the FieldSlug field value
func (o *DataConsentDocumentDetailsDto) GetFieldSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldSlug
}

// GetFieldSlugOk returns a tuple with the FieldSlug field value
// and a boolean to check if the value has been set.
func (o *DataConsentDocumentDetailsDto) GetFieldSlugOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FieldSlug, true
}

// SetFieldSlug sets field value
func (o *DataConsentDocumentDetailsDto) SetFieldSlug(v string) {
	o.FieldSlug = v
}

// GetSupportedDocumentTypeCategoryDetails returns the SupportedDocumentTypeCategoryDetails field value
func (o *DataConsentDocumentDetailsDto) GetSupportedDocumentTypeCategoryDetails() []SupportedDocumentTypeCategoryDetailsDto {
	if o == nil {
		var ret []SupportedDocumentTypeCategoryDetailsDto
		return ret
	}

	return o.SupportedDocumentTypeCategoryDetails
}

// GetSupportedDocumentTypeCategoryDetailsOk returns a tuple with the SupportedDocumentTypeCategoryDetails field value
// and a boolean to check if the value has been set.
func (o *DataConsentDocumentDetailsDto) GetSupportedDocumentTypeCategoryDetailsOk() ([]SupportedDocumentTypeCategoryDetailsDto, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SupportedDocumentTypeCategoryDetails, true
}

// SetSupportedDocumentTypeCategoryDetails sets field value
func (o *DataConsentDocumentDetailsDto) SetSupportedDocumentTypeCategoryDetails(v []SupportedDocumentTypeCategoryDetailsDto) {
	o.SupportedDocumentTypeCategoryDetails = v
}

// GetRequirement returns the Requirement field value
func (o *DataConsentDocumentDetailsDto) GetRequirement() DocumentsRequired {
	if o == nil {
		var ret DocumentsRequired
		return ret
	}

	return o.Requirement
}

// GetRequirementOk returns a tuple with the Requirement field value
// and a boolean to check if the value has been set.
func (o *DataConsentDocumentDetailsDto) GetRequirementOk() (*DocumentsRequired, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Requirement, true
}

// SetRequirement sets field value
func (o *DataConsentDocumentDetailsDto) SetRequirement(v DocumentsRequired) {
	o.Requirement = v
}

func (o DataConsentDocumentDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["fieldTitle"] = o.FieldTitle
	}
	if true {
		toSerialize["fieldSlug"] = o.FieldSlug
	}
	if true {
		toSerialize["supportedDocumentTypeCategoryDetails"] = o.SupportedDocumentTypeCategoryDetails
	}
	if true {
		toSerialize["requirement"] = o.Requirement
	}
	return json.Marshal(toSerialize)
}

type NullableDataConsentDocumentDetailsDto struct {
	value *DataConsentDocumentDetailsDto
	isSet bool
}

func (v NullableDataConsentDocumentDetailsDto) Get() *DataConsentDocumentDetailsDto {
	return v.value
}

func (v *NullableDataConsentDocumentDetailsDto) Set(val *DataConsentDocumentDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataConsentDocumentDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataConsentDocumentDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataConsentDocumentDetailsDto(val *DataConsentDocumentDetailsDto) *NullableDataConsentDocumentDetailsDto {
	return &NullableDataConsentDocumentDetailsDto{value: val, isSet: true}
}

func (v NullableDataConsentDocumentDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataConsentDocumentDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


