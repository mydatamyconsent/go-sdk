/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// DataConsentRequest Data consent request details.
type DataConsentRequest struct {
	// Data consent request id.
	Id string `json:"id"`
	// Data consent template id.
	TemplateId NullableString `json:"templateId,omitempty"`
	// Data consent id.
	ConsentId NullableString `json:"consentId,omitempty"`
	// Data consent title.
	Title string `json:"title"`
	// Data consent description.
	Description string `json:"description"`
	// Data consent purpose.
	Purpose NullableString `json:"purpose,omitempty"`
	DataLife *Life `json:"dataLife,omitempty"`
	// List of supported collectables.
	Collectables []CollectibleTypes `json:"collectables"`
	Receiver ConsentRequestReceiver `json:"receiver"`
	Status DataConsentStatus `json:"status"`
	// Request creation datetime in UTC timezone.
	CreatedAtUtc time.Time `json:"createdAtUtc"`
	// Request expiration datetime in UTC timezone.
	ExpiresAtUtc time.Time `json:"expiresAtUtc"`
	// Request approval datetime in UTC timezone.
	ApprovedAtUtc NullableTime `json:"approvedAtUtc,omitempty"`
	// Data access expiration datetime in UTC timezone.
	DataAccessExpiresAtUtc NullableTime `json:"dataAccessExpiresAtUtc,omitempty"`
	// Request rejection datetime in UTC timezone.
	RejectedAtUtc NullableTime `json:"rejectedAtUtc,omitempty"`
	// Request revocation datetime in UTC timezone.
	RevokedAtUtc NullableTime `json:"revokedAtUtc,omitempty"`
}

// NewDataConsentRequest instantiates a new DataConsentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataConsentRequest(id string, title string, description string, collectables []CollectibleTypes, receiver ConsentRequestReceiver, status DataConsentStatus, createdAtUtc time.Time, expiresAtUtc time.Time) *DataConsentRequest {
	this := DataConsentRequest{}
	this.Id = id
	this.Title = title
	this.Description = description
	this.Collectables = collectables
	this.Receiver = receiver
	this.Status = status
	this.CreatedAtUtc = createdAtUtc
	this.ExpiresAtUtc = expiresAtUtc
	return &this
}

// NewDataConsentRequestWithDefaults instantiates a new DataConsentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataConsentRequestWithDefaults() *DataConsentRequest {
	this := DataConsentRequest{}
	return &this
}

// GetId returns the Id field value
func (o *DataConsentRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DataConsentRequest) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DataConsentRequest) SetId(v string) {
	o.Id = v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequest) GetTemplateId() string {
	if o == nil || o.TemplateId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TemplateId.Get()
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequest) GetTemplateIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TemplateId.Get(), o.TemplateId.IsSet()
}

// HasTemplateId returns a boolean if a field has been set.
func (o *DataConsentRequest) HasTemplateId() bool {
	if o != nil && o.TemplateId.IsSet() {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given NullableString and assigns it to the TemplateId field.
func (o *DataConsentRequest) SetTemplateId(v string) {
	o.TemplateId.Set(&v)
}
// SetTemplateIdNil sets the value for TemplateId to be an explicit nil
func (o *DataConsentRequest) SetTemplateIdNil() {
	o.TemplateId.Set(nil)
}

// UnsetTemplateId ensures that no value is present for TemplateId, not even an explicit nil
func (o *DataConsentRequest) UnsetTemplateId() {
	o.TemplateId.Unset()
}

// GetConsentId returns the ConsentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequest) GetConsentId() string {
	if o == nil || o.ConsentId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConsentId.Get()
}

// GetConsentIdOk returns a tuple with the ConsentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequest) GetConsentIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConsentId.Get(), o.ConsentId.IsSet()
}

// HasConsentId returns a boolean if a field has been set.
func (o *DataConsentRequest) HasConsentId() bool {
	if o != nil && o.ConsentId.IsSet() {
		return true
	}

	return false
}

// SetConsentId gets a reference to the given NullableString and assigns it to the ConsentId field.
func (o *DataConsentRequest) SetConsentId(v string) {
	o.ConsentId.Set(&v)
}
// SetConsentIdNil sets the value for ConsentId to be an explicit nil
func (o *DataConsentRequest) SetConsentIdNil() {
	o.ConsentId.Set(nil)
}

// UnsetConsentId ensures that no value is present for ConsentId, not even an explicit nil
func (o *DataConsentRequest) UnsetConsentId() {
	o.ConsentId.Unset()
}

// GetTitle returns the Title field value
func (o *DataConsentRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *DataConsentRequest) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *DataConsentRequest) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *DataConsentRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DataConsentRequest) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DataConsentRequest) SetDescription(v string) {
	o.Description = v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequest) GetPurpose() string {
	if o == nil || o.Purpose.Get() == nil {
		var ret string
		return ret
	}
	return *o.Purpose.Get()
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequest) GetPurposeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Purpose.Get(), o.Purpose.IsSet()
}

// HasPurpose returns a boolean if a field has been set.
func (o *DataConsentRequest) HasPurpose() bool {
	if o != nil && o.Purpose.IsSet() {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given NullableString and assigns it to the Purpose field.
func (o *DataConsentRequest) SetPurpose(v string) {
	o.Purpose.Set(&v)
}
// SetPurposeNil sets the value for Purpose to be an explicit nil
func (o *DataConsentRequest) SetPurposeNil() {
	o.Purpose.Set(nil)
}

// UnsetPurpose ensures that no value is present for Purpose, not even an explicit nil
func (o *DataConsentRequest) UnsetPurpose() {
	o.Purpose.Unset()
}

// GetDataLife returns the DataLife field value if set, zero value otherwise.
func (o *DataConsentRequest) GetDataLife() Life {
	if o == nil || o.DataLife == nil {
		var ret Life
		return ret
	}
	return *o.DataLife
}

// GetDataLifeOk returns a tuple with the DataLife field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequest) GetDataLifeOk() (*Life, bool) {
	if o == nil || o.DataLife == nil {
		return nil, false
	}
	return o.DataLife, true
}

// HasDataLife returns a boolean if a field has been set.
func (o *DataConsentRequest) HasDataLife() bool {
	if o != nil && o.DataLife != nil {
		return true
	}

	return false
}

// SetDataLife gets a reference to the given Life and assigns it to the DataLife field.
func (o *DataConsentRequest) SetDataLife(v Life) {
	o.DataLife = &v
}

// GetCollectables returns the Collectables field value
func (o *DataConsentRequest) GetCollectables() []CollectibleTypes {
	if o == nil {
		var ret []CollectibleTypes
		return ret
	}

	return o.Collectables
}

// GetCollectablesOk returns a tuple with the Collectables field value
// and a boolean to check if the value has been set.
func (o *DataConsentRequest) GetCollectablesOk() ([]CollectibleTypes, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Collectables, true
}

// SetCollectables sets field value
func (o *DataConsentRequest) SetCollectables(v []CollectibleTypes) {
	o.Collectables = v
}

// GetReceiver returns the Receiver field value
func (o *DataConsentRequest) GetReceiver() ConsentRequestReceiver {
	if o == nil {
		var ret ConsentRequestReceiver
		return ret
	}

	return o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value
// and a boolean to check if the value has been set.
func (o *DataConsentRequest) GetReceiverOk() (*ConsentRequestReceiver, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Receiver, true
}

// SetReceiver sets field value
func (o *DataConsentRequest) SetReceiver(v ConsentRequestReceiver) {
	o.Receiver = v
}

// GetStatus returns the Status field value
func (o *DataConsentRequest) GetStatus() DataConsentStatus {
	if o == nil {
		var ret DataConsentStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DataConsentRequest) GetStatusOk() (*DataConsentStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DataConsentRequest) SetStatus(v DataConsentStatus) {
	o.Status = v
}

// GetCreatedAtUtc returns the CreatedAtUtc field value
func (o *DataConsentRequest) GetCreatedAtUtc() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAtUtc
}

// GetCreatedAtUtcOk returns a tuple with the CreatedAtUtc field value
// and a boolean to check if the value has been set.
func (o *DataConsentRequest) GetCreatedAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAtUtc, true
}

// SetCreatedAtUtc sets field value
func (o *DataConsentRequest) SetCreatedAtUtc(v time.Time) {
	o.CreatedAtUtc = v
}

// GetExpiresAtUtc returns the ExpiresAtUtc field value
func (o *DataConsentRequest) GetExpiresAtUtc() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAtUtc
}

// GetExpiresAtUtcOk returns a tuple with the ExpiresAtUtc field value
// and a boolean to check if the value has been set.
func (o *DataConsentRequest) GetExpiresAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ExpiresAtUtc, true
}

// SetExpiresAtUtc sets field value
func (o *DataConsentRequest) SetExpiresAtUtc(v time.Time) {
	o.ExpiresAtUtc = v
}

// GetApprovedAtUtc returns the ApprovedAtUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequest) GetApprovedAtUtc() time.Time {
	if o == nil || o.ApprovedAtUtc.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ApprovedAtUtc.Get()
}

// GetApprovedAtUtcOk returns a tuple with the ApprovedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequest) GetApprovedAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApprovedAtUtc.Get(), o.ApprovedAtUtc.IsSet()
}

// HasApprovedAtUtc returns a boolean if a field has been set.
func (o *DataConsentRequest) HasApprovedAtUtc() bool {
	if o != nil && o.ApprovedAtUtc.IsSet() {
		return true
	}

	return false
}

// SetApprovedAtUtc gets a reference to the given NullableTime and assigns it to the ApprovedAtUtc field.
func (o *DataConsentRequest) SetApprovedAtUtc(v time.Time) {
	o.ApprovedAtUtc.Set(&v)
}
// SetApprovedAtUtcNil sets the value for ApprovedAtUtc to be an explicit nil
func (o *DataConsentRequest) SetApprovedAtUtcNil() {
	o.ApprovedAtUtc.Set(nil)
}

// UnsetApprovedAtUtc ensures that no value is present for ApprovedAtUtc, not even an explicit nil
func (o *DataConsentRequest) UnsetApprovedAtUtc() {
	o.ApprovedAtUtc.Unset()
}

// GetDataAccessExpiresAtUtc returns the DataAccessExpiresAtUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequest) GetDataAccessExpiresAtUtc() time.Time {
	if o == nil || o.DataAccessExpiresAtUtc.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DataAccessExpiresAtUtc.Get()
}

// GetDataAccessExpiresAtUtcOk returns a tuple with the DataAccessExpiresAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequest) GetDataAccessExpiresAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataAccessExpiresAtUtc.Get(), o.DataAccessExpiresAtUtc.IsSet()
}

// HasDataAccessExpiresAtUtc returns a boolean if a field has been set.
func (o *DataConsentRequest) HasDataAccessExpiresAtUtc() bool {
	if o != nil && o.DataAccessExpiresAtUtc.IsSet() {
		return true
	}

	return false
}

// SetDataAccessExpiresAtUtc gets a reference to the given NullableTime and assigns it to the DataAccessExpiresAtUtc field.
func (o *DataConsentRequest) SetDataAccessExpiresAtUtc(v time.Time) {
	o.DataAccessExpiresAtUtc.Set(&v)
}
// SetDataAccessExpiresAtUtcNil sets the value for DataAccessExpiresAtUtc to be an explicit nil
func (o *DataConsentRequest) SetDataAccessExpiresAtUtcNil() {
	o.DataAccessExpiresAtUtc.Set(nil)
}

// UnsetDataAccessExpiresAtUtc ensures that no value is present for DataAccessExpiresAtUtc, not even an explicit nil
func (o *DataConsentRequest) UnsetDataAccessExpiresAtUtc() {
	o.DataAccessExpiresAtUtc.Unset()
}

// GetRejectedAtUtc returns the RejectedAtUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequest) GetRejectedAtUtc() time.Time {
	if o == nil || o.RejectedAtUtc.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.RejectedAtUtc.Get()
}

// GetRejectedAtUtcOk returns a tuple with the RejectedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequest) GetRejectedAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RejectedAtUtc.Get(), o.RejectedAtUtc.IsSet()
}

// HasRejectedAtUtc returns a boolean if a field has been set.
func (o *DataConsentRequest) HasRejectedAtUtc() bool {
	if o != nil && o.RejectedAtUtc.IsSet() {
		return true
	}

	return false
}

// SetRejectedAtUtc gets a reference to the given NullableTime and assigns it to the RejectedAtUtc field.
func (o *DataConsentRequest) SetRejectedAtUtc(v time.Time) {
	o.RejectedAtUtc.Set(&v)
}
// SetRejectedAtUtcNil sets the value for RejectedAtUtc to be an explicit nil
func (o *DataConsentRequest) SetRejectedAtUtcNil() {
	o.RejectedAtUtc.Set(nil)
}

// UnsetRejectedAtUtc ensures that no value is present for RejectedAtUtc, not even an explicit nil
func (o *DataConsentRequest) UnsetRejectedAtUtc() {
	o.RejectedAtUtc.Unset()
}

// GetRevokedAtUtc returns the RevokedAtUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequest) GetRevokedAtUtc() time.Time {
	if o == nil || o.RevokedAtUtc.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.RevokedAtUtc.Get()
}

// GetRevokedAtUtcOk returns a tuple with the RevokedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequest) GetRevokedAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RevokedAtUtc.Get(), o.RevokedAtUtc.IsSet()
}

// HasRevokedAtUtc returns a boolean if a field has been set.
func (o *DataConsentRequest) HasRevokedAtUtc() bool {
	if o != nil && o.RevokedAtUtc.IsSet() {
		return true
	}

	return false
}

// SetRevokedAtUtc gets a reference to the given NullableTime and assigns it to the RevokedAtUtc field.
func (o *DataConsentRequest) SetRevokedAtUtc(v time.Time) {
	o.RevokedAtUtc.Set(&v)
}
// SetRevokedAtUtcNil sets the value for RevokedAtUtc to be an explicit nil
func (o *DataConsentRequest) SetRevokedAtUtcNil() {
	o.RevokedAtUtc.Set(nil)
}

// UnsetRevokedAtUtc ensures that no value is present for RevokedAtUtc, not even an explicit nil
func (o *DataConsentRequest) UnsetRevokedAtUtc() {
	o.RevokedAtUtc.Unset()
}

func (o DataConsentRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.TemplateId.IsSet() {
		toSerialize["templateId"] = o.TemplateId.Get()
	}
	if o.ConsentId.IsSet() {
		toSerialize["consentId"] = o.ConsentId.Get()
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.Purpose.IsSet() {
		toSerialize["purpose"] = o.Purpose.Get()
	}
	if o.DataLife != nil {
		toSerialize["dataLife"] = o.DataLife
	}
	if true {
		toSerialize["collectables"] = o.Collectables
	}
	if true {
		toSerialize["receiver"] = o.Receiver
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["createdAtUtc"] = o.CreatedAtUtc
	}
	if true {
		toSerialize["expiresAtUtc"] = o.ExpiresAtUtc
	}
	if o.ApprovedAtUtc.IsSet() {
		toSerialize["approvedAtUtc"] = o.ApprovedAtUtc.Get()
	}
	if o.DataAccessExpiresAtUtc.IsSet() {
		toSerialize["dataAccessExpiresAtUtc"] = o.DataAccessExpiresAtUtc.Get()
	}
	if o.RejectedAtUtc.IsSet() {
		toSerialize["rejectedAtUtc"] = o.RejectedAtUtc.Get()
	}
	if o.RevokedAtUtc.IsSet() {
		toSerialize["revokedAtUtc"] = o.RevokedAtUtc.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDataConsentRequest struct {
	value *DataConsentRequest
	isSet bool
}

func (v NullableDataConsentRequest) Get() *DataConsentRequest {
	return v.value
}

func (v *NullableDataConsentRequest) Set(val *DataConsentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDataConsentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDataConsentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataConsentRequest(val *DataConsentRequest) *NullableDataConsentRequest {
	return &NullableDataConsentRequest{value: val, isSet: true}
}

func (v NullableDataConsentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataConsentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


