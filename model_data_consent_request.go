/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// DataConsentRequest struct for DataConsentRequest
type DataConsentRequest struct {
	Id *string `json:"id,omitempty"`
	TemplateId NullableString `json:"templateId,omitempty"`
	RequestedAtUtc *time.Time `json:"requestedAtUtc,omitempty"`
	RequestExpiredAtUtc *time.Time `json:"requestExpiredAtUtc,omitempty"`
	TransactionId NullableString `json:"transactionId,omitempty"`
}

// NewDataConsentRequest instantiates a new DataConsentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataConsentRequest() *DataConsentRequest {
	this := DataConsentRequest{}
	return &this
}

// NewDataConsentRequestWithDefaults instantiates a new DataConsentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataConsentRequestWithDefaults() *DataConsentRequest {
	this := DataConsentRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataConsentRequest) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequest) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataConsentRequest) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataConsentRequest) SetId(v string) {
	o.Id = &v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequest) GetTemplateId() string {
	if o == nil || o.TemplateId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TemplateId.Get()
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequest) GetTemplateIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TemplateId.Get(), o.TemplateId.IsSet()
}

// HasTemplateId returns a boolean if a field has been set.
func (o *DataConsentRequest) HasTemplateId() bool {
	if o != nil && o.TemplateId.IsSet() {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given NullableString and assigns it to the TemplateId field.
func (o *DataConsentRequest) SetTemplateId(v string) {
	o.TemplateId.Set(&v)
}
// SetTemplateIdNil sets the value for TemplateId to be an explicit nil
func (o *DataConsentRequest) SetTemplateIdNil() {
	o.TemplateId.Set(nil)
}

// UnsetTemplateId ensures that no value is present for TemplateId, not even an explicit nil
func (o *DataConsentRequest) UnsetTemplateId() {
	o.TemplateId.Unset()
}

// GetRequestedAtUtc returns the RequestedAtUtc field value if set, zero value otherwise.
func (o *DataConsentRequest) GetRequestedAtUtc() time.Time {
	if o == nil || o.RequestedAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.RequestedAtUtc
}

// GetRequestedAtUtcOk returns a tuple with the RequestedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequest) GetRequestedAtUtcOk() (*time.Time, bool) {
	if o == nil || o.RequestedAtUtc == nil {
		return nil, false
	}
	return o.RequestedAtUtc, true
}

// HasRequestedAtUtc returns a boolean if a field has been set.
func (o *DataConsentRequest) HasRequestedAtUtc() bool {
	if o != nil && o.RequestedAtUtc != nil {
		return true
	}

	return false
}

// SetRequestedAtUtc gets a reference to the given time.Time and assigns it to the RequestedAtUtc field.
func (o *DataConsentRequest) SetRequestedAtUtc(v time.Time) {
	o.RequestedAtUtc = &v
}

// GetRequestExpiredAtUtc returns the RequestExpiredAtUtc field value if set, zero value otherwise.
func (o *DataConsentRequest) GetRequestExpiredAtUtc() time.Time {
	if o == nil || o.RequestExpiredAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.RequestExpiredAtUtc
}

// GetRequestExpiredAtUtcOk returns a tuple with the RequestExpiredAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentRequest) GetRequestExpiredAtUtcOk() (*time.Time, bool) {
	if o == nil || o.RequestExpiredAtUtc == nil {
		return nil, false
	}
	return o.RequestExpiredAtUtc, true
}

// HasRequestExpiredAtUtc returns a boolean if a field has been set.
func (o *DataConsentRequest) HasRequestExpiredAtUtc() bool {
	if o != nil && o.RequestExpiredAtUtc != nil {
		return true
	}

	return false
}

// SetRequestExpiredAtUtc gets a reference to the given time.Time and assigns it to the RequestExpiredAtUtc field.
func (o *DataConsentRequest) SetRequestExpiredAtUtc(v time.Time) {
	o.RequestExpiredAtUtc = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentRequest) GetTransactionId() string {
	if o == nil || o.TransactionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TransactionId.Get()
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentRequest) GetTransactionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TransactionId.Get(), o.TransactionId.IsSet()
}

// HasTransactionId returns a boolean if a field has been set.
func (o *DataConsentRequest) HasTransactionId() bool {
	if o != nil && o.TransactionId.IsSet() {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given NullableString and assigns it to the TransactionId field.
func (o *DataConsentRequest) SetTransactionId(v string) {
	o.TransactionId.Set(&v)
}
// SetTransactionIdNil sets the value for TransactionId to be an explicit nil
func (o *DataConsentRequest) SetTransactionIdNil() {
	o.TransactionId.Set(nil)
}

// UnsetTransactionId ensures that no value is present for TransactionId, not even an explicit nil
func (o *DataConsentRequest) UnsetTransactionId() {
	o.TransactionId.Unset()
}

func (o DataConsentRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.TemplateId.IsSet() {
		toSerialize["templateId"] = o.TemplateId.Get()
	}
	if o.RequestedAtUtc != nil {
		toSerialize["requestedAtUtc"] = o.RequestedAtUtc
	}
	if o.RequestExpiredAtUtc != nil {
		toSerialize["requestExpiredAtUtc"] = o.RequestExpiredAtUtc
	}
	if o.TransactionId.IsSet() {
		toSerialize["transactionId"] = o.TransactionId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDataConsentRequest struct {
	value *DataConsentRequest
	isSet bool
}

func (v NullableDataConsentRequest) Get() *DataConsentRequest {
	return v.value
}

func (v *NullableDataConsentRequest) Set(val *DataConsentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDataConsentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDataConsentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataConsentRequest(val *DataConsentRequest) *NullableDataConsentRequest {
	return &NullableDataConsentRequest{value: val, isSet: true}
}

func (v NullableDataConsentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataConsentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


