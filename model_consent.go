/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// Consent Consent : Consent details.
type Consent struct {
	// Consent id.
	Id string `json:"id"`
	// Consent request id.
	RequestId string `json:"requestId"`
	// Consent request template id.
	TemplateId *string `json:"templateId,omitempty"`
	// Consent title.
	Title string `json:"title"`
	// Consent description.
	Description string `json:"description"`
	// Consent purpose.
	Purpose *string `json:"purpose,omitempty"`
	Status DataConsentStatus `json:"status"`
	// Transaction id.
	TransactionId *string `json:"transactionId,omitempty"`
	// Consent requested datetime in UTC timezone.
	RequestedAtUtc time.Time `json:"requestedAtUtc"`
	// Consent approval datetime in UTC timezone.
	ApprovedAtUtc *time.Time `json:"approvedAtUtc,omitempty"`
	// Data access expiration datetime in UTC timezone.
	DataAccessExpiresAtUtc *time.Time `json:"dataAccessExpiresAtUtc,omitempty"`
	// Consent revocation datetime in UTC timezone.
	RevokedAtUtc *time.Time `json:"revokedAtUtc,omitempty"`
}

// NewConsent instantiates a new Consent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsent(id string, requestId string, title string, description string, status DataConsentStatus, requestedAtUtc time.Time) *Consent {
	this := Consent{}
	this.Id = id
	this.RequestId = requestId
	this.Title = title
	this.Description = description
	this.Status = status
	this.RequestedAtUtc = requestedAtUtc
	return &this
}

// NewConsentWithDefaults instantiates a new Consent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentWithDefaults() *Consent {
	this := Consent{}
	return &this
}

// GetId returns the Id field value
func (o *Consent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Consent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Consent) SetId(v string) {
	o.Id = v
}

// GetRequestId returns the RequestId field value
func (o *Consent) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *Consent) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *Consent) SetRequestId(v string) {
	o.RequestId = v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *Consent) GetTemplateId() string {
	if o == nil || o.TemplateId == nil {
		var ret string
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetTemplateIdOk() (*string, bool) {
	if o == nil || o.TemplateId == nil {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *Consent) HasTemplateId() bool {
	if o != nil && o.TemplateId != nil {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given string and assigns it to the TemplateId field.
func (o *Consent) SetTemplateId(v string) {
	o.TemplateId = &v
}

// GetTitle returns the Title field value
func (o *Consent) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Consent) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Consent) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *Consent) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Consent) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Consent) SetDescription(v string) {
	o.Description = v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *Consent) GetPurpose() string {
	if o == nil || o.Purpose == nil {
		var ret string
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetPurposeOk() (*string, bool) {
	if o == nil || o.Purpose == nil {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *Consent) HasPurpose() bool {
	if o != nil && o.Purpose != nil {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given string and assigns it to the Purpose field.
func (o *Consent) SetPurpose(v string) {
	o.Purpose = &v
}

// GetStatus returns the Status field value
func (o *Consent) GetStatus() DataConsentStatus {
	if o == nil {
		var ret DataConsentStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Consent) GetStatusOk() (*DataConsentStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Consent) SetStatus(v DataConsentStatus) {
	o.Status = v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *Consent) GetTransactionId() string {
	if o == nil || o.TransactionId == nil {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetTransactionIdOk() (*string, bool) {
	if o == nil || o.TransactionId == nil {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *Consent) HasTransactionId() bool {
	if o != nil && o.TransactionId != nil {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *Consent) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetRequestedAtUtc returns the RequestedAtUtc field value
func (o *Consent) GetRequestedAtUtc() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RequestedAtUtc
}

// GetRequestedAtUtcOk returns a tuple with the RequestedAtUtc field value
// and a boolean to check if the value has been set.
func (o *Consent) GetRequestedAtUtcOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestedAtUtc, true
}

// SetRequestedAtUtc sets field value
func (o *Consent) SetRequestedAtUtc(v time.Time) {
	o.RequestedAtUtc = v
}

// GetApprovedAtUtc returns the ApprovedAtUtc field value if set, zero value otherwise.
func (o *Consent) GetApprovedAtUtc() time.Time {
	if o == nil || o.ApprovedAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.ApprovedAtUtc
}

// GetApprovedAtUtcOk returns a tuple with the ApprovedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetApprovedAtUtcOk() (*time.Time, bool) {
	if o == nil || o.ApprovedAtUtc == nil {
		return nil, false
	}
	return o.ApprovedAtUtc, true
}

// HasApprovedAtUtc returns a boolean if a field has been set.
func (o *Consent) HasApprovedAtUtc() bool {
	if o != nil && o.ApprovedAtUtc != nil {
		return true
	}

	return false
}

// SetApprovedAtUtc gets a reference to the given time.Time and assigns it to the ApprovedAtUtc field.
func (o *Consent) SetApprovedAtUtc(v time.Time) {
	o.ApprovedAtUtc = &v
}

// GetDataAccessExpiresAtUtc returns the DataAccessExpiresAtUtc field value if set, zero value otherwise.
func (o *Consent) GetDataAccessExpiresAtUtc() time.Time {
	if o == nil || o.DataAccessExpiresAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.DataAccessExpiresAtUtc
}

// GetDataAccessExpiresAtUtcOk returns a tuple with the DataAccessExpiresAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetDataAccessExpiresAtUtcOk() (*time.Time, bool) {
	if o == nil || o.DataAccessExpiresAtUtc == nil {
		return nil, false
	}
	return o.DataAccessExpiresAtUtc, true
}

// HasDataAccessExpiresAtUtc returns a boolean if a field has been set.
func (o *Consent) HasDataAccessExpiresAtUtc() bool {
	if o != nil && o.DataAccessExpiresAtUtc != nil {
		return true
	}

	return false
}

// SetDataAccessExpiresAtUtc gets a reference to the given time.Time and assigns it to the DataAccessExpiresAtUtc field.
func (o *Consent) SetDataAccessExpiresAtUtc(v time.Time) {
	o.DataAccessExpiresAtUtc = &v
}

// GetRevokedAtUtc returns the RevokedAtUtc field value if set, zero value otherwise.
func (o *Consent) GetRevokedAtUtc() time.Time {
	if o == nil || o.RevokedAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.RevokedAtUtc
}

// GetRevokedAtUtcOk returns a tuple with the RevokedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Consent) GetRevokedAtUtcOk() (*time.Time, bool) {
	if o == nil || o.RevokedAtUtc == nil {
		return nil, false
	}
	return o.RevokedAtUtc, true
}

// HasRevokedAtUtc returns a boolean if a field has been set.
func (o *Consent) HasRevokedAtUtc() bool {
	if o != nil && o.RevokedAtUtc != nil {
		return true
	}

	return false
}

// SetRevokedAtUtc gets a reference to the given time.Time and assigns it to the RevokedAtUtc field.
func (o *Consent) SetRevokedAtUtc(v time.Time) {
	o.RevokedAtUtc = &v
}

func (o Consent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["requestId"] = o.RequestId
	}
	if o.TemplateId != nil {
		toSerialize["templateId"] = o.TemplateId
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.Purpose != nil {
		toSerialize["purpose"] = o.Purpose
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.TransactionId != nil {
		toSerialize["transactionId"] = o.TransactionId
	}
	if true {
		toSerialize["requestedAtUtc"] = o.RequestedAtUtc
	}
	if o.ApprovedAtUtc != nil {
		toSerialize["approvedAtUtc"] = o.ApprovedAtUtc
	}
	if o.DataAccessExpiresAtUtc != nil {
		toSerialize["dataAccessExpiresAtUtc"] = o.DataAccessExpiresAtUtc
	}
	if o.RevokedAtUtc != nil {
		toSerialize["revokedAtUtc"] = o.RevokedAtUtc
	}
	return json.Marshal(toSerialize)
}

type NullableConsent struct {
	value *Consent
	isSet bool
}

func (v NullableConsent) Get() *Consent {
	return v.value
}

func (v *NullableConsent) Set(val *Consent) {
	v.value = val
	v.isSet = true
}

func (v NullableConsent) IsSet() bool {
	return v.isSet
}

func (v *NullableConsent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsent(val *Consent) *NullableConsent {
	return &NullableConsent{value: val, isSet: true}
}

func (v NullableConsent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


