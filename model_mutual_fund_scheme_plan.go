/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// MutualFundSchemePlan the model 'MutualFundSchemePlan'
type MutualFundSchemePlan string

// List of MutualFundSchemePlan
const (
	DIRECT MutualFundSchemePlan = "Direct"
	REGULAR MutualFundSchemePlan = "Regular"
)

// All allowed values of MutualFundSchemePlan enum
var AllowedMutualFundSchemePlanEnumValues = []MutualFundSchemePlan{
	"Direct",
	"Regular",
}

func (v *MutualFundSchemePlan) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MutualFundSchemePlan(value)
	for _, existing := range AllowedMutualFundSchemePlanEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MutualFundSchemePlan", value)
}

// NewMutualFundSchemePlanFromValue returns a pointer to a valid MutualFundSchemePlan
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMutualFundSchemePlanFromValue(v string) (*MutualFundSchemePlan, error) {
	ev := MutualFundSchemePlan(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MutualFundSchemePlan: valid values are %v", v, AllowedMutualFundSchemePlanEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MutualFundSchemePlan) IsValid() bool {
	for _, existing := range AllowedMutualFundSchemePlanEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MutualFundSchemePlan value
func (v MutualFundSchemePlan) Ptr() *MutualFundSchemePlan {
	return &v
}

type NullableMutualFundSchemePlan struct {
	value *MutualFundSchemePlan
	isSet bool
}

func (v NullableMutualFundSchemePlan) Get() *MutualFundSchemePlan {
	return v.value
}

func (v *NullableMutualFundSchemePlan) Set(val *MutualFundSchemePlan) {
	v.value = val
	v.isSet = true
}

func (v NullableMutualFundSchemePlan) IsSet() bool {
	return v.isSet
}

func (v *NullableMutualFundSchemePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutualFundSchemePlan(val *MutualFundSchemePlan) *NullableMutualFundSchemePlan {
	return &NullableMutualFundSchemePlan{value: val, isSet: true}
}

func (v NullableMutualFundSchemePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutualFundSchemePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

