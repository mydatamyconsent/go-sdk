/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// CodeableConcept struct for CodeableConcept
type CodeableConcept struct {
	Coding []Coding `json:"coding,omitempty"`
	Id *string `json:"id,omitempty"`
	Text *string `json:"text,omitempty"`
}

// NewCodeableConcept instantiates a new CodeableConcept object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeableConcept() *CodeableConcept {
	this := CodeableConcept{}
	return &this
}

// NewCodeableConceptWithDefaults instantiates a new CodeableConcept object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeableConceptWithDefaults() *CodeableConcept {
	this := CodeableConcept{}
	return &this
}

// GetCoding returns the Coding field value if set, zero value otherwise.
func (o *CodeableConcept) GetCoding() []Coding {
	if o == nil || o.Coding == nil {
		var ret []Coding
		return ret
	}
	return o.Coding
}

// GetCodingOk returns a tuple with the Coding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeableConcept) GetCodingOk() ([]Coding, bool) {
	if o == nil || o.Coding == nil {
		return nil, false
	}
	return o.Coding, true
}

// HasCoding returns a boolean if a field has been set.
func (o *CodeableConcept) HasCoding() bool {
	if o != nil && o.Coding != nil {
		return true
	}

	return false
}

// SetCoding gets a reference to the given []Coding and assigns it to the Coding field.
func (o *CodeableConcept) SetCoding(v []Coding) {
	o.Coding = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CodeableConcept) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeableConcept) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CodeableConcept) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CodeableConcept) SetId(v string) {
	o.Id = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *CodeableConcept) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeableConcept) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *CodeableConcept) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *CodeableConcept) SetText(v string) {
	o.Text = &v
}

func (o CodeableConcept) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Coding != nil {
		toSerialize["coding"] = o.Coding
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableCodeableConcept struct {
	value *CodeableConcept
	isSet bool
}

func (v NullableCodeableConcept) Get() *CodeableConcept {
	return v.value
}

func (v *NullableCodeableConcept) Set(val *CodeableConcept) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeableConcept) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeableConcept) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeableConcept(val *CodeableConcept) *NullableCodeableConcept {
	return &NullableCodeableConcept{value: val, isSet: true}
}

func (v NullableCodeableConcept) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeableConcept) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


