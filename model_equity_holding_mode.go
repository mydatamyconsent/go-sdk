/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// EquityHoldingMode the model 'EquityHoldingMode'
type EquityHoldingMode string

// List of EquityHoldingMode
const (
	DEMAT EquityHoldingMode = "Demat"
	PHYSICAL EquityHoldingMode = "Physical"
)

// All allowed values of EquityHoldingMode enum
var AllowedEquityHoldingModeEnumValues = []EquityHoldingMode{
	"Demat",
	"Physical",
}

func (v *EquityHoldingMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EquityHoldingMode(value)
	for _, existing := range AllowedEquityHoldingModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EquityHoldingMode", value)
}

// NewEquityHoldingModeFromValue returns a pointer to a valid EquityHoldingMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEquityHoldingModeFromValue(v string) (*EquityHoldingMode, error) {
	ev := EquityHoldingMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EquityHoldingMode: valid values are %v", v, AllowedEquityHoldingModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EquityHoldingMode) IsValid() bool {
	for _, existing := range AllowedEquityHoldingModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EquityHoldingMode value
func (v EquityHoldingMode) Ptr() *EquityHoldingMode {
	return &v
}

type NullableEquityHoldingMode struct {
	value *EquityHoldingMode
	isSet bool
}

func (v NullableEquityHoldingMode) Get() *EquityHoldingMode {
	return v.value
}

func (v *NullableEquityHoldingMode) Set(val *EquityHoldingMode) {
	v.value = val
	v.isSet = true
}

func (v NullableEquityHoldingMode) IsSet() bool {
	return v.isSet
}

func (v *NullableEquityHoldingMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquityHoldingMode(val *EquityHoldingMode) *NullableEquityHoldingMode {
	return &NullableEquityHoldingMode{value: val, isSet: true}
}

func (v NullableEquityHoldingMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquityHoldingMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

