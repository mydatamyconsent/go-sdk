/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/go-sdk

import (
	"encoding/json"
	"time"
)

// FinancialAccount struct for FinancialAccount
type FinancialAccount struct {
	Id *string `json:"id,omitempty"`
	Issuer NullableString `json:"issuer,omitempty"`
	LogoUrl NullableString `json:"logoUrl,omitempty"`
	CategoryId NullableString `json:"categoryId,omitempty"`
	CategoryName NullableString `json:"categoryName,omitempty"`
	AccountName NullableString `json:"accountName,omitempty"`
	AccountLogoUrl NullableString `json:"accountLogoUrl,omitempty"`
	Balance NullableString `json:"balance,omitempty"`
	BalanceType NullableString `json:"balanceType,omitempty"`
	IsShared *bool `json:"isShared,omitempty"`
	SharedWith []SharedWith `json:"sharedWith,omitempty"`
	IsReceived *bool `json:"isReceived,omitempty"`
	ExpiresAtUtc *time.Time `json:"expiresAtUtc,omitempty"`
	Activities []Activity `json:"activities,omitempty"`
	ApprovedConsentRequests []ApprovedConsentRequest `json:"approvedConsentRequests,omitempty"`
}

// NewFinancialAccount instantiates a new FinancialAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinancialAccount() *FinancialAccount {
	this := FinancialAccount{}
	return &this
}

// NewFinancialAccountWithDefaults instantiates a new FinancialAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinancialAccountWithDefaults() *FinancialAccount {
	this := FinancialAccount{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FinancialAccount) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialAccount) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FinancialAccount) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FinancialAccount) SetId(v string) {
	o.Id = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccount) GetIssuer() string {
	if o == nil || o.Issuer.Get() == nil {
		var ret string
		return ret
	}
	return *o.Issuer.Get()
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccount) GetIssuerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Issuer.Get(), o.Issuer.IsSet()
}

// HasIssuer returns a boolean if a field has been set.
func (o *FinancialAccount) HasIssuer() bool {
	if o != nil && o.Issuer.IsSet() {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given NullableString and assigns it to the Issuer field.
func (o *FinancialAccount) SetIssuer(v string) {
	o.Issuer.Set(&v)
}
// SetIssuerNil sets the value for Issuer to be an explicit nil
func (o *FinancialAccount) SetIssuerNil() {
	o.Issuer.Set(nil)
}

// UnsetIssuer ensures that no value is present for Issuer, not even an explicit nil
func (o *FinancialAccount) UnsetIssuer() {
	o.Issuer.Unset()
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccount) GetLogoUrl() string {
	if o == nil || o.LogoUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.LogoUrl.Get()
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccount) GetLogoUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogoUrl.Get(), o.LogoUrl.IsSet()
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *FinancialAccount) HasLogoUrl() bool {
	if o != nil && o.LogoUrl.IsSet() {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given NullableString and assigns it to the LogoUrl field.
func (o *FinancialAccount) SetLogoUrl(v string) {
	o.LogoUrl.Set(&v)
}
// SetLogoUrlNil sets the value for LogoUrl to be an explicit nil
func (o *FinancialAccount) SetLogoUrlNil() {
	o.LogoUrl.Set(nil)
}

// UnsetLogoUrl ensures that no value is present for LogoUrl, not even an explicit nil
func (o *FinancialAccount) UnsetLogoUrl() {
	o.LogoUrl.Unset()
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccount) GetCategoryId() string {
	if o == nil || o.CategoryId.Get() == nil {
		var ret string
		return ret
	}
	return *o.CategoryId.Get()
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccount) GetCategoryIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CategoryId.Get(), o.CategoryId.IsSet()
}

// HasCategoryId returns a boolean if a field has been set.
func (o *FinancialAccount) HasCategoryId() bool {
	if o != nil && o.CategoryId.IsSet() {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given NullableString and assigns it to the CategoryId field.
func (o *FinancialAccount) SetCategoryId(v string) {
	o.CategoryId.Set(&v)
}
// SetCategoryIdNil sets the value for CategoryId to be an explicit nil
func (o *FinancialAccount) SetCategoryIdNil() {
	o.CategoryId.Set(nil)
}

// UnsetCategoryId ensures that no value is present for CategoryId, not even an explicit nil
func (o *FinancialAccount) UnsetCategoryId() {
	o.CategoryId.Unset()
}

// GetCategoryName returns the CategoryName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccount) GetCategoryName() string {
	if o == nil || o.CategoryName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CategoryName.Get()
}

// GetCategoryNameOk returns a tuple with the CategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccount) GetCategoryNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CategoryName.Get(), o.CategoryName.IsSet()
}

// HasCategoryName returns a boolean if a field has been set.
func (o *FinancialAccount) HasCategoryName() bool {
	if o != nil && o.CategoryName.IsSet() {
		return true
	}

	return false
}

// SetCategoryName gets a reference to the given NullableString and assigns it to the CategoryName field.
func (o *FinancialAccount) SetCategoryName(v string) {
	o.CategoryName.Set(&v)
}
// SetCategoryNameNil sets the value for CategoryName to be an explicit nil
func (o *FinancialAccount) SetCategoryNameNil() {
	o.CategoryName.Set(nil)
}

// UnsetCategoryName ensures that no value is present for CategoryName, not even an explicit nil
func (o *FinancialAccount) UnsetCategoryName() {
	o.CategoryName.Unset()
}

// GetAccountName returns the AccountName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccount) GetAccountName() string {
	if o == nil || o.AccountName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccountName.Get()
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccount) GetAccountNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountName.Get(), o.AccountName.IsSet()
}

// HasAccountName returns a boolean if a field has been set.
func (o *FinancialAccount) HasAccountName() bool {
	if o != nil && o.AccountName.IsSet() {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given NullableString and assigns it to the AccountName field.
func (o *FinancialAccount) SetAccountName(v string) {
	o.AccountName.Set(&v)
}
// SetAccountNameNil sets the value for AccountName to be an explicit nil
func (o *FinancialAccount) SetAccountNameNil() {
	o.AccountName.Set(nil)
}

// UnsetAccountName ensures that no value is present for AccountName, not even an explicit nil
func (o *FinancialAccount) UnsetAccountName() {
	o.AccountName.Unset()
}

// GetAccountLogoUrl returns the AccountLogoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccount) GetAccountLogoUrl() string {
	if o == nil || o.AccountLogoUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccountLogoUrl.Get()
}

// GetAccountLogoUrlOk returns a tuple with the AccountLogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccount) GetAccountLogoUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountLogoUrl.Get(), o.AccountLogoUrl.IsSet()
}

// HasAccountLogoUrl returns a boolean if a field has been set.
func (o *FinancialAccount) HasAccountLogoUrl() bool {
	if o != nil && o.AccountLogoUrl.IsSet() {
		return true
	}

	return false
}

// SetAccountLogoUrl gets a reference to the given NullableString and assigns it to the AccountLogoUrl field.
func (o *FinancialAccount) SetAccountLogoUrl(v string) {
	o.AccountLogoUrl.Set(&v)
}
// SetAccountLogoUrlNil sets the value for AccountLogoUrl to be an explicit nil
func (o *FinancialAccount) SetAccountLogoUrlNil() {
	o.AccountLogoUrl.Set(nil)
}

// UnsetAccountLogoUrl ensures that no value is present for AccountLogoUrl, not even an explicit nil
func (o *FinancialAccount) UnsetAccountLogoUrl() {
	o.AccountLogoUrl.Unset()
}

// GetBalance returns the Balance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccount) GetBalance() string {
	if o == nil || o.Balance.Get() == nil {
		var ret string
		return ret
	}
	return *o.Balance.Get()
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccount) GetBalanceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Balance.Get(), o.Balance.IsSet()
}

// HasBalance returns a boolean if a field has been set.
func (o *FinancialAccount) HasBalance() bool {
	if o != nil && o.Balance.IsSet() {
		return true
	}

	return false
}

// SetBalance gets a reference to the given NullableString and assigns it to the Balance field.
func (o *FinancialAccount) SetBalance(v string) {
	o.Balance.Set(&v)
}
// SetBalanceNil sets the value for Balance to be an explicit nil
func (o *FinancialAccount) SetBalanceNil() {
	o.Balance.Set(nil)
}

// UnsetBalance ensures that no value is present for Balance, not even an explicit nil
func (o *FinancialAccount) UnsetBalance() {
	o.Balance.Unset()
}

// GetBalanceType returns the BalanceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccount) GetBalanceType() string {
	if o == nil || o.BalanceType.Get() == nil {
		var ret string
		return ret
	}
	return *o.BalanceType.Get()
}

// GetBalanceTypeOk returns a tuple with the BalanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccount) GetBalanceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BalanceType.Get(), o.BalanceType.IsSet()
}

// HasBalanceType returns a boolean if a field has been set.
func (o *FinancialAccount) HasBalanceType() bool {
	if o != nil && o.BalanceType.IsSet() {
		return true
	}

	return false
}

// SetBalanceType gets a reference to the given NullableString and assigns it to the BalanceType field.
func (o *FinancialAccount) SetBalanceType(v string) {
	o.BalanceType.Set(&v)
}
// SetBalanceTypeNil sets the value for BalanceType to be an explicit nil
func (o *FinancialAccount) SetBalanceTypeNil() {
	o.BalanceType.Set(nil)
}

// UnsetBalanceType ensures that no value is present for BalanceType, not even an explicit nil
func (o *FinancialAccount) UnsetBalanceType() {
	o.BalanceType.Unset()
}

// GetIsShared returns the IsShared field value if set, zero value otherwise.
func (o *FinancialAccount) GetIsShared() bool {
	if o == nil || o.IsShared == nil {
		var ret bool
		return ret
	}
	return *o.IsShared
}

// GetIsSharedOk returns a tuple with the IsShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialAccount) GetIsSharedOk() (*bool, bool) {
	if o == nil || o.IsShared == nil {
		return nil, false
	}
	return o.IsShared, true
}

// HasIsShared returns a boolean if a field has been set.
func (o *FinancialAccount) HasIsShared() bool {
	if o != nil && o.IsShared != nil {
		return true
	}

	return false
}

// SetIsShared gets a reference to the given bool and assigns it to the IsShared field.
func (o *FinancialAccount) SetIsShared(v bool) {
	o.IsShared = &v
}

// GetSharedWith returns the SharedWith field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccount) GetSharedWith() []SharedWith {
	if o == nil  {
		var ret []SharedWith
		return ret
	}
	return o.SharedWith
}

// GetSharedWithOk returns a tuple with the SharedWith field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccount) GetSharedWithOk() ([]SharedWith, bool) {
	if o == nil || o.SharedWith == nil {
		return nil, false
	}
	return o.SharedWith, true
}

// HasSharedWith returns a boolean if a field has been set.
func (o *FinancialAccount) HasSharedWith() bool {
	if o != nil && o.SharedWith != nil {
		return true
	}

	return false
}

// SetSharedWith gets a reference to the given []SharedWith and assigns it to the SharedWith field.
func (o *FinancialAccount) SetSharedWith(v []SharedWith) {
	o.SharedWith = v
}

// GetIsReceived returns the IsReceived field value if set, zero value otherwise.
func (o *FinancialAccount) GetIsReceived() bool {
	if o == nil || o.IsReceived == nil {
		var ret bool
		return ret
	}
	return *o.IsReceived
}

// GetIsReceivedOk returns a tuple with the IsReceived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialAccount) GetIsReceivedOk() (*bool, bool) {
	if o == nil || o.IsReceived == nil {
		return nil, false
	}
	return o.IsReceived, true
}

// HasIsReceived returns a boolean if a field has been set.
func (o *FinancialAccount) HasIsReceived() bool {
	if o != nil && o.IsReceived != nil {
		return true
	}

	return false
}

// SetIsReceived gets a reference to the given bool and assigns it to the IsReceived field.
func (o *FinancialAccount) SetIsReceived(v bool) {
	o.IsReceived = &v
}

// GetExpiresAtUtc returns the ExpiresAtUtc field value if set, zero value otherwise.
func (o *FinancialAccount) GetExpiresAtUtc() time.Time {
	if o == nil || o.ExpiresAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAtUtc
}

// GetExpiresAtUtcOk returns a tuple with the ExpiresAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinancialAccount) GetExpiresAtUtcOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAtUtc == nil {
		return nil, false
	}
	return o.ExpiresAtUtc, true
}

// HasExpiresAtUtc returns a boolean if a field has been set.
func (o *FinancialAccount) HasExpiresAtUtc() bool {
	if o != nil && o.ExpiresAtUtc != nil {
		return true
	}

	return false
}

// SetExpiresAtUtc gets a reference to the given time.Time and assigns it to the ExpiresAtUtc field.
func (o *FinancialAccount) SetExpiresAtUtc(v time.Time) {
	o.ExpiresAtUtc = &v
}

// GetActivities returns the Activities field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccount) GetActivities() []Activity {
	if o == nil  {
		var ret []Activity
		return ret
	}
	return o.Activities
}

// GetActivitiesOk returns a tuple with the Activities field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccount) GetActivitiesOk() ([]Activity, bool) {
	if o == nil || o.Activities == nil {
		return nil, false
	}
	return o.Activities, true
}

// HasActivities returns a boolean if a field has been set.
func (o *FinancialAccount) HasActivities() bool {
	if o != nil && o.Activities != nil {
		return true
	}

	return false
}

// SetActivities gets a reference to the given []Activity and assigns it to the Activities field.
func (o *FinancialAccount) SetActivities(v []Activity) {
	o.Activities = v
}

// GetApprovedConsentRequests returns the ApprovedConsentRequests field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FinancialAccount) GetApprovedConsentRequests() []ApprovedConsentRequest {
	if o == nil  {
		var ret []ApprovedConsentRequest
		return ret
	}
	return o.ApprovedConsentRequests
}

// GetApprovedConsentRequestsOk returns a tuple with the ApprovedConsentRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FinancialAccount) GetApprovedConsentRequestsOk() ([]ApprovedConsentRequest, bool) {
	if o == nil || o.ApprovedConsentRequests == nil {
		return nil, false
	}
	return o.ApprovedConsentRequests, true
}

// HasApprovedConsentRequests returns a boolean if a field has been set.
func (o *FinancialAccount) HasApprovedConsentRequests() bool {
	if o != nil && o.ApprovedConsentRequests != nil {
		return true
	}

	return false
}

// SetApprovedConsentRequests gets a reference to the given []ApprovedConsentRequest and assigns it to the ApprovedConsentRequests field.
func (o *FinancialAccount) SetApprovedConsentRequests(v []ApprovedConsentRequest) {
	o.ApprovedConsentRequests = v
}

func (o FinancialAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Issuer.IsSet() {
		toSerialize["issuer"] = o.Issuer.Get()
	}
	if o.LogoUrl.IsSet() {
		toSerialize["logoUrl"] = o.LogoUrl.Get()
	}
	if o.CategoryId.IsSet() {
		toSerialize["categoryId"] = o.CategoryId.Get()
	}
	if o.CategoryName.IsSet() {
		toSerialize["categoryName"] = o.CategoryName.Get()
	}
	if o.AccountName.IsSet() {
		toSerialize["accountName"] = o.AccountName.Get()
	}
	if o.AccountLogoUrl.IsSet() {
		toSerialize["accountLogoUrl"] = o.AccountLogoUrl.Get()
	}
	if o.Balance.IsSet() {
		toSerialize["balance"] = o.Balance.Get()
	}
	if o.BalanceType.IsSet() {
		toSerialize["balanceType"] = o.BalanceType.Get()
	}
	if o.IsShared != nil {
		toSerialize["isShared"] = o.IsShared
	}
	if o.SharedWith != nil {
		toSerialize["sharedWith"] = o.SharedWith
	}
	if o.IsReceived != nil {
		toSerialize["isReceived"] = o.IsReceived
	}
	if o.ExpiresAtUtc != nil {
		toSerialize["expiresAtUtc"] = o.ExpiresAtUtc
	}
	if o.Activities != nil {
		toSerialize["activities"] = o.Activities
	}
	if o.ApprovedConsentRequests != nil {
		toSerialize["approvedConsentRequests"] = o.ApprovedConsentRequests
	}
	return json.Marshal(toSerialize)
}

type NullableFinancialAccount struct {
	value *FinancialAccount
	isSet bool
}

func (v NullableFinancialAccount) Get() *FinancialAccount {
	return v.value
}

func (v *NullableFinancialAccount) Set(val *FinancialAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialAccount(val *FinancialAccount) *NullableFinancialAccount {
	return &NullableFinancialAccount{value: val, isSet: true}
}

func (v NullableFinancialAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


