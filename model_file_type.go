/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"fmt"
)

// FileType the model 'FileType'
type FileType string

// List of FileType
const (
	PDF FileType = "Pdf"
	IMAGE FileType = "Image"
)

var allowedFileTypeEnumValues = []FileType{
	"Pdf",
	"Image",
}

func (v *FileType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FileType(value)
	for _, existing := range allowedFileTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FileType", value)
}

// NewFileTypeFromValue returns a pointer to a valid FileType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileTypeFromValue(v string) (*FileType, error) {
	ev := FileType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FileType: valid values are %v", v, allowedFileTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileType) IsValid() bool {
	for _, existing := range allowedFileTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FileType value
func (v FileType) Ptr() *FileType {
	return &v
}

type NullableFileType struct {
	value *FileType
	isSet bool
}

func (v NullableFileType) Get() *FileType {
	return v.value
}

func (v *NullableFileType) Set(val *FileType) {
	v.value = val
	v.isSet = true
}

func (v NullableFileType) IsSet() bool {
	return v.isSet
}

func (v *NullableFileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileType(val *FileType) *NullableFileType {
	return &NullableFileType{value: val, isSet: true}
}

func (v NullableFileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

