/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// EquitySummary struct for EquitySummary
type EquitySummary struct {
	Investment EquityInvestment `json:"investment"`
	InvestmentValue float64 `json:"investmentValue"`
	CurrentValue float64 `json:"currentValue"`
}

// NewEquitySummary instantiates a new EquitySummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEquitySummary(investment EquityInvestment, investmentValue float64, currentValue float64) *EquitySummary {
	this := EquitySummary{}
	this.Investment = investment
	this.InvestmentValue = investmentValue
	this.CurrentValue = currentValue
	return &this
}

// NewEquitySummaryWithDefaults instantiates a new EquitySummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEquitySummaryWithDefaults() *EquitySummary {
	this := EquitySummary{}
	return &this
}

// GetInvestment returns the Investment field value
func (o *EquitySummary) GetInvestment() EquityInvestment {
	if o == nil {
		var ret EquityInvestment
		return ret
	}

	return o.Investment
}

// GetInvestmentOk returns a tuple with the Investment field value
// and a boolean to check if the value has been set.
func (o *EquitySummary) GetInvestmentOk() (*EquityInvestment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Investment, true
}

// SetInvestment sets field value
func (o *EquitySummary) SetInvestment(v EquityInvestment) {
	o.Investment = v
}

// GetInvestmentValue returns the InvestmentValue field value
func (o *EquitySummary) GetInvestmentValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.InvestmentValue
}

// GetInvestmentValueOk returns a tuple with the InvestmentValue field value
// and a boolean to check if the value has been set.
func (o *EquitySummary) GetInvestmentValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvestmentValue, true
}

// SetInvestmentValue sets field value
func (o *EquitySummary) SetInvestmentValue(v float64) {
	o.InvestmentValue = v
}

// GetCurrentValue returns the CurrentValue field value
func (o *EquitySummary) GetCurrentValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CurrentValue
}

// GetCurrentValueOk returns a tuple with the CurrentValue field value
// and a boolean to check if the value has been set.
func (o *EquitySummary) GetCurrentValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentValue, true
}

// SetCurrentValue sets field value
func (o *EquitySummary) SetCurrentValue(v float64) {
	o.CurrentValue = v
}

func (o EquitySummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["investment"] = o.Investment
	}
	if true {
		toSerialize["investmentValue"] = o.InvestmentValue
	}
	if true {
		toSerialize["currentValue"] = o.CurrentValue
	}
	return json.Marshal(toSerialize)
}

type NullableEquitySummary struct {
	value *EquitySummary
	isSet bool
}

func (v NullableEquitySummary) Get() *EquitySummary {
	return v.value
}

func (v *NullableEquitySummary) Set(val *EquitySummary) {
	v.value = val
	v.isSet = true
}

func (v NullableEquitySummary) IsSet() bool {
	return v.isSet
}

func (v *NullableEquitySummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquitySummary(val *EquitySummary) *NullableEquitySummary {
	return &NullableEquitySummary{value: val, isSet: true}
}

func (v NullableEquitySummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquitySummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


