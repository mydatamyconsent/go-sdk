/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"fmt"
)

// OrganizationAddressType the model 'OrganizationAddressType'
type OrganizationAddressType string

// List of OrganizationAddressType
const (
	REGISTERED_ADDRESS OrganizationAddressType = "RegisteredAddress"
	OPERATING_ADDRESS OrganizationAddressType = "OperatingAddress"
)

var allowedOrganizationAddressTypeEnumValues = []OrganizationAddressType{
	"RegisteredAddress",
	"OperatingAddress",
}

func (v *OrganizationAddressType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationAddressType(value)
	for _, existing := range allowedOrganizationAddressTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationAddressType", value)
}

// NewOrganizationAddressTypeFromValue returns a pointer to a valid OrganizationAddressType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationAddressTypeFromValue(v string) (*OrganizationAddressType, error) {
	ev := OrganizationAddressType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationAddressType: valid values are %v", v, allowedOrganizationAddressTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationAddressType) IsValid() bool {
	for _, existing := range allowedOrganizationAddressTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationAddressType value
func (v OrganizationAddressType) Ptr() *OrganizationAddressType {
	return &v
}

type NullableOrganizationAddressType struct {
	value *OrganizationAddressType
	isSet bool
}

func (v NullableOrganizationAddressType) Get() *OrganizationAddressType {
	return v.value
}

func (v *NullableOrganizationAddressType) Set(val *OrganizationAddressType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationAddressType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationAddressType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationAddressType(val *OrganizationAddressType) *NullableOrganizationAddressType {
	return &NullableOrganizationAddressType{value: val, isSet: true}
}

func (v NullableOrganizationAddressType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationAddressType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

