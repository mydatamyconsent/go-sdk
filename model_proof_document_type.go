/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"fmt"
)

// ProofDocumentType the model 'ProofDocumentType'
type ProofDocumentType string

// List of ProofDocumentType
const (
	LEASE_AGREEMENT ProofDocumentType = "LeaseAgreement"
	CERTIFICATE_OF_REGISTRATION ProofDocumentType = "CertificateOfRegistration"
	RECENT_ELECTRICITY_BILL ProofDocumentType = "RecentElectricityBill"
	RECENT_WATER_BILL ProofDocumentType = "RecentWaterBill"
)

var allowedProofDocumentTypeEnumValues = []ProofDocumentType{
	"LeaseAgreement",
	"CertificateOfRegistration",
	"RecentElectricityBill",
	"RecentWaterBill",
}

func (v *ProofDocumentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProofDocumentType(value)
	for _, existing := range allowedProofDocumentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProofDocumentType", value)
}

// NewProofDocumentTypeFromValue returns a pointer to a valid ProofDocumentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProofDocumentTypeFromValue(v string) (*ProofDocumentType, error) {
	ev := ProofDocumentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProofDocumentType: valid values are %v", v, allowedProofDocumentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProofDocumentType) IsValid() bool {
	for _, existing := range allowedProofDocumentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProofDocumentType value
func (v ProofDocumentType) Ptr() *ProofDocumentType {
	return &v
}

type NullableProofDocumentType struct {
	value *ProofDocumentType
	isSet bool
}

func (v NullableProofDocumentType) Get() *ProofDocumentType {
	return v.value
}

func (v *NullableProofDocumentType) Set(val *ProofDocumentType) {
	v.value = val
	v.isSet = true
}

func (v NullableProofDocumentType) IsSet() bool {
	return v.isSet
}

func (v *NullableProofDocumentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProofDocumentType(val *ProofDocumentType) *NullableProofDocumentType {
	return &NullableProofDocumentType{value: val, isSet: true}
}

func (v NullableProofDocumentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProofDocumentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

