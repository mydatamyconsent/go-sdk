/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// ConsentRequestTemplateStatus Consent request template status.
type ConsentRequestTemplateStatus string

// List of ConsentRequestTemplateStatus
const (
	CREATION_PENDING ConsentRequestTemplateStatus = "CreationPending"
	UNDER_REVIEW ConsentRequestTemplateStatus = "UnderReview"
	ACTIVE ConsentRequestTemplateStatus = "Active"
	INACTIVE ConsentRequestTemplateStatus = "Inactive"
	REJECTED ConsentRequestTemplateStatus = "Rejected"
)

// All allowed values of ConsentRequestTemplateStatus enum
var AllowedConsentRequestTemplateStatusEnumValues = []ConsentRequestTemplateStatus{
	"CreationPending",
	"UnderReview",
	"Active",
	"Inactive",
	"Rejected",
}

func (v *ConsentRequestTemplateStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConsentRequestTemplateStatus(value)
	for _, existing := range AllowedConsentRequestTemplateStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConsentRequestTemplateStatus", value)
}

// NewConsentRequestTemplateStatusFromValue returns a pointer to a valid ConsentRequestTemplateStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConsentRequestTemplateStatusFromValue(v string) (*ConsentRequestTemplateStatus, error) {
	ev := ConsentRequestTemplateStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConsentRequestTemplateStatus: valid values are %v", v, AllowedConsentRequestTemplateStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConsentRequestTemplateStatus) IsValid() bool {
	for _, existing := range AllowedConsentRequestTemplateStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConsentRequestTemplateStatus value
func (v ConsentRequestTemplateStatus) Ptr() *ConsentRequestTemplateStatus {
	return &v
}

type NullableConsentRequestTemplateStatus struct {
	value *ConsentRequestTemplateStatus
	isSet bool
}

func (v NullableConsentRequestTemplateStatus) Get() *ConsentRequestTemplateStatus {
	return v.value
}

func (v *NullableConsentRequestTemplateStatus) Set(val *ConsentRequestTemplateStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentRequestTemplateStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentRequestTemplateStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentRequestTemplateStatus(val *ConsentRequestTemplateStatus) *NullableConsentRequestTemplateStatus {
	return &NullableConsentRequestTemplateStatus{value: val, isSet: true}
}

func (v NullableConsentRequestTemplateStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentRequestTemplateStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

