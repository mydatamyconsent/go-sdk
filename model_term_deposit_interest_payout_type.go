/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// TermDepositInterestPayoutType the model 'TermDepositInterestPayoutType'
type TermDepositInterestPayoutType string

// List of TermDepositInterestPayoutType
const (
	MONTHLY TermDepositInterestPayoutType = "Monthly"
	QUARTERLY TermDepositInterestPayoutType = "Quarterly"
	HALF_YEARLY TermDepositInterestPayoutType = "HalfYearly"
	YEARLY TermDepositInterestPayoutType = "Yearly"
	ON_MATURITY TermDepositInterestPayoutType = "OnMaturity"
)

// All allowed values of TermDepositInterestPayoutType enum
var AllowedTermDepositInterestPayoutTypeEnumValues = []TermDepositInterestPayoutType{
	"Monthly",
	"Quarterly",
	"HalfYearly",
	"Yearly",
	"OnMaturity",
}

func (v *TermDepositInterestPayoutType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TermDepositInterestPayoutType(value)
	for _, existing := range AllowedTermDepositInterestPayoutTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TermDepositInterestPayoutType", value)
}

// NewTermDepositInterestPayoutTypeFromValue returns a pointer to a valid TermDepositInterestPayoutType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTermDepositInterestPayoutTypeFromValue(v string) (*TermDepositInterestPayoutType, error) {
	ev := TermDepositInterestPayoutType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TermDepositInterestPayoutType: valid values are %v", v, AllowedTermDepositInterestPayoutTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TermDepositInterestPayoutType) IsValid() bool {
	for _, existing := range AllowedTermDepositInterestPayoutTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TermDepositInterestPayoutType value
func (v TermDepositInterestPayoutType) Ptr() *TermDepositInterestPayoutType {
	return &v
}

type NullableTermDepositInterestPayoutType struct {
	value *TermDepositInterestPayoutType
	isSet bool
}

func (v NullableTermDepositInterestPayoutType) Get() *TermDepositInterestPayoutType {
	return v.value
}

func (v *NullableTermDepositInterestPayoutType) Set(val *TermDepositInterestPayoutType) {
	v.value = val
	v.isSet = true
}

func (v NullableTermDepositInterestPayoutType) IsSet() bool {
	return v.isSet
}

func (v *NullableTermDepositInterestPayoutType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTermDepositInterestPayoutType(val *TermDepositInterestPayoutType) *NullableTermDepositInterestPayoutType {
	return &NullableTermDepositInterestPayoutType{value: val, isSet: true}
}

func (v NullableTermDepositInterestPayoutType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTermDepositInterestPayoutType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

