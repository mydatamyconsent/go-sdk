/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// TermDepositCompoundingFrequency the model 'TermDepositCompoundingFrequency'
type TermDepositCompoundingFrequency string

// List of TermDepositCompoundingFrequency
const (
	MONTHLY TermDepositCompoundingFrequency = "Monthly"
	QUARTERLY TermDepositCompoundingFrequency = "Quarterly"
	HALF_YEARLY TermDepositCompoundingFrequency = "HalfYearly"
	YEARLY TermDepositCompoundingFrequency = "Yearly"
)

// All allowed values of TermDepositCompoundingFrequency enum
var AllowedTermDepositCompoundingFrequencyEnumValues = []TermDepositCompoundingFrequency{
	"Monthly",
	"Quarterly",
	"HalfYearly",
	"Yearly",
}

func (v *TermDepositCompoundingFrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TermDepositCompoundingFrequency(value)
	for _, existing := range AllowedTermDepositCompoundingFrequencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TermDepositCompoundingFrequency", value)
}

// NewTermDepositCompoundingFrequencyFromValue returns a pointer to a valid TermDepositCompoundingFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTermDepositCompoundingFrequencyFromValue(v string) (*TermDepositCompoundingFrequency, error) {
	ev := TermDepositCompoundingFrequency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TermDepositCompoundingFrequency: valid values are %v", v, AllowedTermDepositCompoundingFrequencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TermDepositCompoundingFrequency) IsValid() bool {
	for _, existing := range AllowedTermDepositCompoundingFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TermDepositCompoundingFrequency value
func (v TermDepositCompoundingFrequency) Ptr() *TermDepositCompoundingFrequency {
	return &v
}

type NullableTermDepositCompoundingFrequency struct {
	value *TermDepositCompoundingFrequency
	isSet bool
}

func (v NullableTermDepositCompoundingFrequency) Get() *TermDepositCompoundingFrequency {
	return v.value
}

func (v *NullableTermDepositCompoundingFrequency) Set(val *TermDepositCompoundingFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableTermDepositCompoundingFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableTermDepositCompoundingFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTermDepositCompoundingFrequency(val *TermDepositCompoundingFrequency) *NullableTermDepositCompoundingFrequency {
	return &NullableTermDepositCompoundingFrequency{value: val, isSet: true}
}

func (v NullableTermDepositCompoundingFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTermDepositCompoundingFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

