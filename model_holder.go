/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// Holder struct for Holder
type Holder struct {
	Name string `json:"name"`
	DateOfBirth *time.Time `json:"date_of_birth,omitempty"`
	Mobile *string `json:"mobile,omitempty"`
	DematId string `json:"demat_id"`
	Email string `json:"email"`
	Pan *string `json:"pan,omitempty"`
}

// NewHolder instantiates a new Holder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHolder(name string, dematId string, email string) *Holder {
	this := Holder{}
	this.Name = name
	this.DematId = dematId
	this.Email = email
	return &this
}

// NewHolderWithDefaults instantiates a new Holder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHolderWithDefaults() *Holder {
	this := Holder{}
	return &this
}

// GetName returns the Name field value
func (o *Holder) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Holder) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Holder) SetName(v string) {
	o.Name = v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *Holder) GetDateOfBirth() time.Time {
	if o == nil || o.DateOfBirth == nil {
		var ret time.Time
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Holder) GetDateOfBirthOk() (*time.Time, bool) {
	if o == nil || o.DateOfBirth == nil {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *Holder) HasDateOfBirth() bool {
	if o != nil && o.DateOfBirth != nil {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given time.Time and assigns it to the DateOfBirth field.
func (o *Holder) SetDateOfBirth(v time.Time) {
	o.DateOfBirth = &v
}

// GetMobile returns the Mobile field value if set, zero value otherwise.
func (o *Holder) GetMobile() string {
	if o == nil || o.Mobile == nil {
		var ret string
		return ret
	}
	return *o.Mobile
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Holder) GetMobileOk() (*string, bool) {
	if o == nil || o.Mobile == nil {
		return nil, false
	}
	return o.Mobile, true
}

// HasMobile returns a boolean if a field has been set.
func (o *Holder) HasMobile() bool {
	if o != nil && o.Mobile != nil {
		return true
	}

	return false
}

// SetMobile gets a reference to the given string and assigns it to the Mobile field.
func (o *Holder) SetMobile(v string) {
	o.Mobile = &v
}

// GetDematId returns the DematId field value
func (o *Holder) GetDematId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DematId
}

// GetDematIdOk returns a tuple with the DematId field value
// and a boolean to check if the value has been set.
func (o *Holder) GetDematIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DematId, true
}

// SetDematId sets field value
func (o *Holder) SetDematId(v string) {
	o.DematId = v
}

// GetEmail returns the Email field value
func (o *Holder) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *Holder) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *Holder) SetEmail(v string) {
	o.Email = v
}

// GetPan returns the Pan field value if set, zero value otherwise.
func (o *Holder) GetPan() string {
	if o == nil || o.Pan == nil {
		var ret string
		return ret
	}
	return *o.Pan
}

// GetPanOk returns a tuple with the Pan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Holder) GetPanOk() (*string, bool) {
	if o == nil || o.Pan == nil {
		return nil, false
	}
	return o.Pan, true
}

// HasPan returns a boolean if a field has been set.
func (o *Holder) HasPan() bool {
	if o != nil && o.Pan != nil {
		return true
	}

	return false
}

// SetPan gets a reference to the given string and assigns it to the Pan field.
func (o *Holder) SetPan(v string) {
	o.Pan = &v
}

func (o Holder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.DateOfBirth != nil {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	if o.Mobile != nil {
		toSerialize["mobile"] = o.Mobile
	}
	if true {
		toSerialize["demat_id"] = o.DematId
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.Pan != nil {
		toSerialize["pan"] = o.Pan
	}
	return json.Marshal(toSerialize)
}

type NullableHolder struct {
	value *Holder
	isSet bool
}

func (v NullableHolder) Get() *Holder {
	return v.value
}

func (v *NullableHolder) Set(val *Holder) {
	v.value = val
	v.isSet = true
}

func (v NullableHolder) IsSet() bool {
	return v.isSet
}

func (v *NullableHolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHolder(val *Holder) *NullableHolder {
	return &NullableHolder{value: val, isSet: true}
}

func (v NullableHolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


