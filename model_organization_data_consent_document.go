/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// OrganizationDataConsentDocument Organization data consent document details.
type OrganizationDataConsentDocument struct {
	// Name of consent approver organization.
	Approver string `json:"approver"`
	// Document id.
	Id string `json:"id"`
	// Data consent id.
	ConsentId string `json:"consentId"`
	// Document name.
	Name string `json:"name"`
	// Document identifier.
	Identifier string `json:"identifier"`
}

// NewOrganizationDataConsentDocument instantiates a new OrganizationDataConsentDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationDataConsentDocument(approver string, id string, consentId string, name string, identifier string) *OrganizationDataConsentDocument {
	this := OrganizationDataConsentDocument{}
	this.Id = id
	this.ConsentId = consentId
	this.Name = name
	this.Identifier = identifier
	return &this
}

// NewOrganizationDataConsentDocumentWithDefaults instantiates a new OrganizationDataConsentDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationDataConsentDocumentWithDefaults() *OrganizationDataConsentDocument {
	this := OrganizationDataConsentDocument{}
	return &this
}

// GetApprover returns the Approver field value
func (o *OrganizationDataConsentDocument) GetApprover() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Approver
}

// GetApproverOk returns a tuple with the Approver field value
// and a boolean to check if the value has been set.
func (o *OrganizationDataConsentDocument) GetApproverOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Approver, true
}

// SetApprover sets field value
func (o *OrganizationDataConsentDocument) SetApprover(v string) {
	o.Approver = v
}

// GetId returns the Id field value
func (o *OrganizationDataConsentDocument) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrganizationDataConsentDocument) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrganizationDataConsentDocument) SetId(v string) {
	o.Id = v
}

// GetConsentId returns the ConsentId field value
func (o *OrganizationDataConsentDocument) GetConsentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsentId
}

// GetConsentIdOk returns a tuple with the ConsentId field value
// and a boolean to check if the value has been set.
func (o *OrganizationDataConsentDocument) GetConsentIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConsentId, true
}

// SetConsentId sets field value
func (o *OrganizationDataConsentDocument) SetConsentId(v string) {
	o.ConsentId = v
}

// GetName returns the Name field value
func (o *OrganizationDataConsentDocument) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrganizationDataConsentDocument) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrganizationDataConsentDocument) SetName(v string) {
	o.Name = v
}

// GetIdentifier returns the Identifier field value
func (o *OrganizationDataConsentDocument) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *OrganizationDataConsentDocument) GetIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *OrganizationDataConsentDocument) SetIdentifier(v string) {
	o.Identifier = v
}

func (o OrganizationDataConsentDocument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["approver"] = o.Approver
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["consentId"] = o.ConsentId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationDataConsentDocument struct {
	value *OrganizationDataConsentDocument
	isSet bool
}

func (v NullableOrganizationDataConsentDocument) Get() *OrganizationDataConsentDocument {
	return v.value
}

func (v *NullableOrganizationDataConsentDocument) Set(val *OrganizationDataConsentDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationDataConsentDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationDataConsentDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationDataConsentDocument(val *OrganizationDataConsentDocument) *NullableOrganizationDataConsentDocument {
	return &NullableOrganizationDataConsentDocument{value: val, isSet: true}
}

func (v NullableOrganizationDataConsentDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationDataConsentDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


