/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// SupportedDocumentProviderDetailsDto struct for SupportedDocumentProviderDetailsDto
type SupportedDocumentProviderDetailsDto struct {
	Id string `json:"id"`
	Name string `json:"name"`
	LogoUrl NullableString `json:"logoUrl,omitempty"`
}

// NewSupportedDocumentProviderDetailsDto instantiates a new SupportedDocumentProviderDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedDocumentProviderDetailsDto(id string, name string) *SupportedDocumentProviderDetailsDto {
	this := SupportedDocumentProviderDetailsDto{}
	this.Id = id
	this.Name = name
	return &this
}

// NewSupportedDocumentProviderDetailsDtoWithDefaults instantiates a new SupportedDocumentProviderDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedDocumentProviderDetailsDtoWithDefaults() *SupportedDocumentProviderDetailsDto {
	this := SupportedDocumentProviderDetailsDto{}
	return &this
}

// GetId returns the Id field value
func (o *SupportedDocumentProviderDetailsDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SupportedDocumentProviderDetailsDto) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SupportedDocumentProviderDetailsDto) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *SupportedDocumentProviderDetailsDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SupportedDocumentProviderDetailsDto) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SupportedDocumentProviderDetailsDto) SetName(v string) {
	o.Name = v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportedDocumentProviderDetailsDto) GetLogoUrl() string {
	if o == nil || o.LogoUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.LogoUrl.Get()
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportedDocumentProviderDetailsDto) GetLogoUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogoUrl.Get(), o.LogoUrl.IsSet()
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *SupportedDocumentProviderDetailsDto) HasLogoUrl() bool {
	if o != nil && o.LogoUrl.IsSet() {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given NullableString and assigns it to the LogoUrl field.
func (o *SupportedDocumentProviderDetailsDto) SetLogoUrl(v string) {
	o.LogoUrl.Set(&v)
}
// SetLogoUrlNil sets the value for LogoUrl to be an explicit nil
func (o *SupportedDocumentProviderDetailsDto) SetLogoUrlNil() {
	o.LogoUrl.Set(nil)
}

// UnsetLogoUrl ensures that no value is present for LogoUrl, not even an explicit nil
func (o *SupportedDocumentProviderDetailsDto) UnsetLogoUrl() {
	o.LogoUrl.Unset()
}

func (o SupportedDocumentProviderDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.LogoUrl.IsSet() {
		toSerialize["logoUrl"] = o.LogoUrl.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSupportedDocumentProviderDetailsDto struct {
	value *SupportedDocumentProviderDetailsDto
	isSet bool
}

func (v NullableSupportedDocumentProviderDetailsDto) Get() *SupportedDocumentProviderDetailsDto {
	return v.value
}

func (v *NullableSupportedDocumentProviderDetailsDto) Set(val *SupportedDocumentProviderDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedDocumentProviderDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedDocumentProviderDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedDocumentProviderDetailsDto(val *SupportedDocumentProviderDetailsDto) *NullableSupportedDocumentProviderDetailsDto {
	return &NullableSupportedDocumentProviderDetailsDto{value: val, isSet: true}
}

func (v NullableSupportedDocumentProviderDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedDocumentProviderDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


