/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// TermDepositTransactionMode the model 'TermDepositTransactionMode'
type TermDepositTransactionMode string

// List of TermDepositTransactionMode
const (
	CASH TermDepositTransactionMode = "Cash"
	ATM TermDepositTransactionMode = "Atm"
	CARD_PAYMENT TermDepositTransactionMode = "CardPayment"
	UPI TermDepositTransactionMode = "Upi"
	FT TermDepositTransactionMode = "Ft"
	OTHERS TermDepositTransactionMode = "Others"
)

// All allowed values of TermDepositTransactionMode enum
var AllowedTermDepositTransactionModeEnumValues = []TermDepositTransactionMode{
	"Cash",
	"Atm",
	"CardPayment",
	"Upi",
	"Ft",
	"Others",
}

func (v *TermDepositTransactionMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TermDepositTransactionMode(value)
	for _, existing := range AllowedTermDepositTransactionModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TermDepositTransactionMode", value)
}

// NewTermDepositTransactionModeFromValue returns a pointer to a valid TermDepositTransactionMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTermDepositTransactionModeFromValue(v string) (*TermDepositTransactionMode, error) {
	ev := TermDepositTransactionMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TermDepositTransactionMode: valid values are %v", v, AllowedTermDepositTransactionModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TermDepositTransactionMode) IsValid() bool {
	for _, existing := range AllowedTermDepositTransactionModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TermDepositTransactionMode value
func (v TermDepositTransactionMode) Ptr() *TermDepositTransactionMode {
	return &v
}

type NullableTermDepositTransactionMode struct {
	value *TermDepositTransactionMode
	isSet bool
}

func (v NullableTermDepositTransactionMode) Get() *TermDepositTransactionMode {
	return v.value
}

func (v *NullableTermDepositTransactionMode) Set(val *TermDepositTransactionMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTermDepositTransactionMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTermDepositTransactionMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTermDepositTransactionMode(val *TermDepositTransactionMode) *NullableTermDepositTransactionMode {
	return &NullableTermDepositTransactionMode{value: val, isSet: true}
}

func (v NullableTermDepositTransactionMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTermDepositTransactionMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

