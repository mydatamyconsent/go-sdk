/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/go-sdk

import (
	"encoding/json"
	"fmt"
)

// Identifier the model 'Identifier'
type Identifier string

// List of Identifier
const (
	EMAIL Identifier = "Email"
	PERMANENT_ACCOUNT_NUMBER Identifier = "PermanentAccountNumber"
	AADHAAR_NUMBER Identifier = "AadhaarNumber"
	MOBILE_NUMBER Identifier = "MobileNumber"
	CORPORATE_IDENTIFICATION_NUMBER Identifier = "CorporateIdentificationNumber"
	TAX_DEDUCTION_ACCOUNT_NUMBER Identifier = "TaxDeductionAccountNumber"
	GOODS_AND_SERVICES_TAX_IDENTIFICATION_NUMBER Identifier = "GoodsAndServicesTaxIdentificationNumber"
)

// All allowed values of Identifier enum
var AllowedIdentifierEnumValues = []Identifier{
	"Email",
	"PermanentAccountNumber",
	"AadhaarNumber",
	"MobileNumber",
	"CorporateIdentificationNumber",
	"TaxDeductionAccountNumber",
	"GoodsAndServicesTaxIdentificationNumber",
}

func (v *Identifier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Identifier(value)
	for _, existing := range AllowedIdentifierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Identifier", value)
}

// NewIdentifierFromValue returns a pointer to a valid Identifier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentifierFromValue(v string) (*Identifier, error) {
	ev := Identifier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Identifier: valid values are %v", v, AllowedIdentifierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Identifier) IsValid() bool {
	for _, existing := range AllowedIdentifierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Identifier value
func (v Identifier) Ptr() *Identifier {
	return &v
}

type NullableIdentifier struct {
	value *Identifier
	isSet bool
}

func (v NullableIdentifier) Get() *Identifier {
	return v.value
}

func (v *NullableIdentifier) Set(val *Identifier) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentifier(val *Identifier) *NullableIdentifier {
	return &NullableIdentifier{value: val, isSet: true}
}

func (v NullableIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

