/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/go-sdk

import (
	"encoding/json"
)

// UserDocumentDetailsDto struct for UserDocumentDetailsDto
type UserDocumentDetailsDto struct {
	Id *string `json:"id,omitempty"`
	CategoryType *DocumentCategoryType `json:"categoryType,omitempty"`
	TypeId *string `json:"typeId,omitempty"`
	TypeName NullableString `json:"typeName,omitempty"`
	FullName NullableString `json:"fullName,omitempty"`
	Identifier NullableString `json:"identifier,omitempty"`
	AccountId NullableString `json:"accountId,omitempty"`
	IssuerId *string `json:"issuerId,omitempty"`
	IssuerName NullableString `json:"issuerName,omitempty"`
	StorageUrl NullableString `json:"storageUrl,omitempty"`
	IsQuickAccessEnabled *bool `json:"isQuickAccessEnabled,omitempty"`
	IsOwner *bool `json:"isOwner,omitempty"`
	DigitalSignatureDetails []DigitalSignature `json:"digitalSignatureDetails,omitempty"`
	OwnerId *string `json:"ownerId,omitempty"`
}

// NewUserDocumentDetailsDto instantiates a new UserDocumentDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDocumentDetailsDto() *UserDocumentDetailsDto {
	this := UserDocumentDetailsDto{}
	return &this
}

// NewUserDocumentDetailsDtoWithDefaults instantiates a new UserDocumentDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDocumentDetailsDtoWithDefaults() *UserDocumentDetailsDto {
	this := UserDocumentDetailsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserDocumentDetailsDto) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDocumentDetailsDto) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserDocumentDetailsDto) SetId(v string) {
	o.Id = &v
}

// GetCategoryType returns the CategoryType field value if set, zero value otherwise.
func (o *UserDocumentDetailsDto) GetCategoryType() DocumentCategoryType {
	if o == nil || o.CategoryType == nil {
		var ret DocumentCategoryType
		return ret
	}
	return *o.CategoryType
}

// GetCategoryTypeOk returns a tuple with the CategoryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDocumentDetailsDto) GetCategoryTypeOk() (*DocumentCategoryType, bool) {
	if o == nil || o.CategoryType == nil {
		return nil, false
	}
	return o.CategoryType, true
}

// HasCategoryType returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasCategoryType() bool {
	if o != nil && o.CategoryType != nil {
		return true
	}

	return false
}

// SetCategoryType gets a reference to the given DocumentCategoryType and assigns it to the CategoryType field.
func (o *UserDocumentDetailsDto) SetCategoryType(v DocumentCategoryType) {
	o.CategoryType = &v
}

// GetTypeId returns the TypeId field value if set, zero value otherwise.
func (o *UserDocumentDetailsDto) GetTypeId() string {
	if o == nil || o.TypeId == nil {
		var ret string
		return ret
	}
	return *o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDocumentDetailsDto) GetTypeIdOk() (*string, bool) {
	if o == nil || o.TypeId == nil {
		return nil, false
	}
	return o.TypeId, true
}

// HasTypeId returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasTypeId() bool {
	if o != nil && o.TypeId != nil {
		return true
	}

	return false
}

// SetTypeId gets a reference to the given string and assigns it to the TypeId field.
func (o *UserDocumentDetailsDto) SetTypeId(v string) {
	o.TypeId = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDocumentDetailsDto) GetTypeName() string {
	if o == nil || o.TypeName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TypeName.Get()
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDocumentDetailsDto) GetTypeNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TypeName.Get(), o.TypeName.IsSet()
}

// HasTypeName returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasTypeName() bool {
	if o != nil && o.TypeName.IsSet() {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given NullableString and assigns it to the TypeName field.
func (o *UserDocumentDetailsDto) SetTypeName(v string) {
	o.TypeName.Set(&v)
}
// SetTypeNameNil sets the value for TypeName to be an explicit nil
func (o *UserDocumentDetailsDto) SetTypeNameNil() {
	o.TypeName.Set(nil)
}

// UnsetTypeName ensures that no value is present for TypeName, not even an explicit nil
func (o *UserDocumentDetailsDto) UnsetTypeName() {
	o.TypeName.Unset()
}

// GetFullName returns the FullName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDocumentDetailsDto) GetFullName() string {
	if o == nil || o.FullName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullName.Get()
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDocumentDetailsDto) GetFullNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FullName.Get(), o.FullName.IsSet()
}

// HasFullName returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasFullName() bool {
	if o != nil && o.FullName.IsSet() {
		return true
	}

	return false
}

// SetFullName gets a reference to the given NullableString and assigns it to the FullName field.
func (o *UserDocumentDetailsDto) SetFullName(v string) {
	o.FullName.Set(&v)
}
// SetFullNameNil sets the value for FullName to be an explicit nil
func (o *UserDocumentDetailsDto) SetFullNameNil() {
	o.FullName.Set(nil)
}

// UnsetFullName ensures that no value is present for FullName, not even an explicit nil
func (o *UserDocumentDetailsDto) UnsetFullName() {
	o.FullName.Unset()
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDocumentDetailsDto) GetIdentifier() string {
	if o == nil || o.Identifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.Identifier.Get()
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDocumentDetailsDto) GetIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Identifier.Get(), o.Identifier.IsSet()
}

// HasIdentifier returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasIdentifier() bool {
	if o != nil && o.Identifier.IsSet() {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given NullableString and assigns it to the Identifier field.
func (o *UserDocumentDetailsDto) SetIdentifier(v string) {
	o.Identifier.Set(&v)
}
// SetIdentifierNil sets the value for Identifier to be an explicit nil
func (o *UserDocumentDetailsDto) SetIdentifierNil() {
	o.Identifier.Set(nil)
}

// UnsetIdentifier ensures that no value is present for Identifier, not even an explicit nil
func (o *UserDocumentDetailsDto) UnsetIdentifier() {
	o.Identifier.Unset()
}

// GetAccountId returns the AccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDocumentDetailsDto) GetAccountId() string {
	if o == nil || o.AccountId.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDocumentDetailsDto) GetAccountIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// HasAccountId returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasAccountId() bool {
	if o != nil && o.AccountId.IsSet() {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given NullableString and assigns it to the AccountId field.
func (o *UserDocumentDetailsDto) SetAccountId(v string) {
	o.AccountId.Set(&v)
}
// SetAccountIdNil sets the value for AccountId to be an explicit nil
func (o *UserDocumentDetailsDto) SetAccountIdNil() {
	o.AccountId.Set(nil)
}

// UnsetAccountId ensures that no value is present for AccountId, not even an explicit nil
func (o *UserDocumentDetailsDto) UnsetAccountId() {
	o.AccountId.Unset()
}

// GetIssuerId returns the IssuerId field value if set, zero value otherwise.
func (o *UserDocumentDetailsDto) GetIssuerId() string {
	if o == nil || o.IssuerId == nil {
		var ret string
		return ret
	}
	return *o.IssuerId
}

// GetIssuerIdOk returns a tuple with the IssuerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDocumentDetailsDto) GetIssuerIdOk() (*string, bool) {
	if o == nil || o.IssuerId == nil {
		return nil, false
	}
	return o.IssuerId, true
}

// HasIssuerId returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasIssuerId() bool {
	if o != nil && o.IssuerId != nil {
		return true
	}

	return false
}

// SetIssuerId gets a reference to the given string and assigns it to the IssuerId field.
func (o *UserDocumentDetailsDto) SetIssuerId(v string) {
	o.IssuerId = &v
}

// GetIssuerName returns the IssuerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDocumentDetailsDto) GetIssuerName() string {
	if o == nil || o.IssuerName.Get() == nil {
		var ret string
		return ret
	}
	return *o.IssuerName.Get()
}

// GetIssuerNameOk returns a tuple with the IssuerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDocumentDetailsDto) GetIssuerNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IssuerName.Get(), o.IssuerName.IsSet()
}

// HasIssuerName returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasIssuerName() bool {
	if o != nil && o.IssuerName.IsSet() {
		return true
	}

	return false
}

// SetIssuerName gets a reference to the given NullableString and assigns it to the IssuerName field.
func (o *UserDocumentDetailsDto) SetIssuerName(v string) {
	o.IssuerName.Set(&v)
}
// SetIssuerNameNil sets the value for IssuerName to be an explicit nil
func (o *UserDocumentDetailsDto) SetIssuerNameNil() {
	o.IssuerName.Set(nil)
}

// UnsetIssuerName ensures that no value is present for IssuerName, not even an explicit nil
func (o *UserDocumentDetailsDto) UnsetIssuerName() {
	o.IssuerName.Unset()
}

// GetStorageUrl returns the StorageUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDocumentDetailsDto) GetStorageUrl() string {
	if o == nil || o.StorageUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageUrl.Get()
}

// GetStorageUrlOk returns a tuple with the StorageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDocumentDetailsDto) GetStorageUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageUrl.Get(), o.StorageUrl.IsSet()
}

// HasStorageUrl returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasStorageUrl() bool {
	if o != nil && o.StorageUrl.IsSet() {
		return true
	}

	return false
}

// SetStorageUrl gets a reference to the given NullableString and assigns it to the StorageUrl field.
func (o *UserDocumentDetailsDto) SetStorageUrl(v string) {
	o.StorageUrl.Set(&v)
}
// SetStorageUrlNil sets the value for StorageUrl to be an explicit nil
func (o *UserDocumentDetailsDto) SetStorageUrlNil() {
	o.StorageUrl.Set(nil)
}

// UnsetStorageUrl ensures that no value is present for StorageUrl, not even an explicit nil
func (o *UserDocumentDetailsDto) UnsetStorageUrl() {
	o.StorageUrl.Unset()
}

// GetIsQuickAccessEnabled returns the IsQuickAccessEnabled field value if set, zero value otherwise.
func (o *UserDocumentDetailsDto) GetIsQuickAccessEnabled() bool {
	if o == nil || o.IsQuickAccessEnabled == nil {
		var ret bool
		return ret
	}
	return *o.IsQuickAccessEnabled
}

// GetIsQuickAccessEnabledOk returns a tuple with the IsQuickAccessEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDocumentDetailsDto) GetIsQuickAccessEnabledOk() (*bool, bool) {
	if o == nil || o.IsQuickAccessEnabled == nil {
		return nil, false
	}
	return o.IsQuickAccessEnabled, true
}

// HasIsQuickAccessEnabled returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasIsQuickAccessEnabled() bool {
	if o != nil && o.IsQuickAccessEnabled != nil {
		return true
	}

	return false
}

// SetIsQuickAccessEnabled gets a reference to the given bool and assigns it to the IsQuickAccessEnabled field.
func (o *UserDocumentDetailsDto) SetIsQuickAccessEnabled(v bool) {
	o.IsQuickAccessEnabled = &v
}

// GetIsOwner returns the IsOwner field value if set, zero value otherwise.
func (o *UserDocumentDetailsDto) GetIsOwner() bool {
	if o == nil || o.IsOwner == nil {
		var ret bool
		return ret
	}
	return *o.IsOwner
}

// GetIsOwnerOk returns a tuple with the IsOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDocumentDetailsDto) GetIsOwnerOk() (*bool, bool) {
	if o == nil || o.IsOwner == nil {
		return nil, false
	}
	return o.IsOwner, true
}

// HasIsOwner returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasIsOwner() bool {
	if o != nil && o.IsOwner != nil {
		return true
	}

	return false
}

// SetIsOwner gets a reference to the given bool and assigns it to the IsOwner field.
func (o *UserDocumentDetailsDto) SetIsOwner(v bool) {
	o.IsOwner = &v
}

// GetDigitalSignatureDetails returns the DigitalSignatureDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDocumentDetailsDto) GetDigitalSignatureDetails() []DigitalSignature {
	if o == nil  {
		var ret []DigitalSignature
		return ret
	}
	return o.DigitalSignatureDetails
}

// GetDigitalSignatureDetailsOk returns a tuple with the DigitalSignatureDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDocumentDetailsDto) GetDigitalSignatureDetailsOk() ([]DigitalSignature, bool) {
	if o == nil || o.DigitalSignatureDetails == nil {
		return nil, false
	}
	return o.DigitalSignatureDetails, true
}

// HasDigitalSignatureDetails returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasDigitalSignatureDetails() bool {
	if o != nil && o.DigitalSignatureDetails != nil {
		return true
	}

	return false
}

// SetDigitalSignatureDetails gets a reference to the given []DigitalSignature and assigns it to the DigitalSignatureDetails field.
func (o *UserDocumentDetailsDto) SetDigitalSignatureDetails(v []DigitalSignature) {
	o.DigitalSignatureDetails = v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *UserDocumentDetailsDto) GetOwnerId() string {
	if o == nil || o.OwnerId == nil {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDocumentDetailsDto) GetOwnerIdOk() (*string, bool) {
	if o == nil || o.OwnerId == nil {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *UserDocumentDetailsDto) HasOwnerId() bool {
	if o != nil && o.OwnerId != nil {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
func (o *UserDocumentDetailsDto) SetOwnerId(v string) {
	o.OwnerId = &v
}

func (o UserDocumentDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CategoryType != nil {
		toSerialize["categoryType"] = o.CategoryType
	}
	if o.TypeId != nil {
		toSerialize["typeId"] = o.TypeId
	}
	if o.TypeName.IsSet() {
		toSerialize["typeName"] = o.TypeName.Get()
	}
	if o.FullName.IsSet() {
		toSerialize["fullName"] = o.FullName.Get()
	}
	if o.Identifier.IsSet() {
		toSerialize["identifier"] = o.Identifier.Get()
	}
	if o.AccountId.IsSet() {
		toSerialize["accountId"] = o.AccountId.Get()
	}
	if o.IssuerId != nil {
		toSerialize["issuerId"] = o.IssuerId
	}
	if o.IssuerName.IsSet() {
		toSerialize["issuerName"] = o.IssuerName.Get()
	}
	if o.StorageUrl.IsSet() {
		toSerialize["storageUrl"] = o.StorageUrl.Get()
	}
	if o.IsQuickAccessEnabled != nil {
		toSerialize["isQuickAccessEnabled"] = o.IsQuickAccessEnabled
	}
	if o.IsOwner != nil {
		toSerialize["isOwner"] = o.IsOwner
	}
	if o.DigitalSignatureDetails != nil {
		toSerialize["digitalSignatureDetails"] = o.DigitalSignatureDetails
	}
	if o.OwnerId != nil {
		toSerialize["ownerId"] = o.OwnerId
	}
	return json.Marshal(toSerialize)
}

type NullableUserDocumentDetailsDto struct {
	value *UserDocumentDetailsDto
	isSet bool
}

func (v NullableUserDocumentDetailsDto) Get() *UserDocumentDetailsDto {
	return v.value
}

func (v *NullableUserDocumentDetailsDto) Set(val *UserDocumentDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDocumentDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDocumentDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDocumentDetailsDto(val *UserDocumentDetailsDto) *NullableUserDocumentDetailsDto {
	return &NullableUserDocumentDetailsDto{value: val, isSet: true}
}

func (v NullableUserDocumentDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDocumentDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


