/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// MutualFundSchemeOption the model 'MutualFundSchemeOption'
type MutualFundSchemeOption string

// List of MutualFundSchemeOption
const (
	REINVEST MutualFundSchemeOption = "Reinvest"
	PAYOUT MutualFundSchemeOption = "Payout"
	GROWTH_TYPE MutualFundSchemeOption = "GrowthType"
)

// All allowed values of MutualFundSchemeOption enum
var AllowedMutualFundSchemeOptionEnumValues = []MutualFundSchemeOption{
	"Reinvest",
	"Payout",
	"GrowthType",
}

func (v *MutualFundSchemeOption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MutualFundSchemeOption(value)
	for _, existing := range AllowedMutualFundSchemeOptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MutualFundSchemeOption", value)
}

// NewMutualFundSchemeOptionFromValue returns a pointer to a valid MutualFundSchemeOption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMutualFundSchemeOptionFromValue(v string) (*MutualFundSchemeOption, error) {
	ev := MutualFundSchemeOption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MutualFundSchemeOption: valid values are %v", v, AllowedMutualFundSchemeOptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MutualFundSchemeOption) IsValid() bool {
	for _, existing := range AllowedMutualFundSchemeOptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MutualFundSchemeOption value
func (v MutualFundSchemeOption) Ptr() *MutualFundSchemeOption {
	return &v
}

type NullableMutualFundSchemeOption struct {
	value *MutualFundSchemeOption
	isSet bool
}

func (v NullableMutualFundSchemeOption) Get() *MutualFundSchemeOption {
	return v.value
}

func (v *NullableMutualFundSchemeOption) Set(val *MutualFundSchemeOption) {
	v.value = val
	v.isSet = true
}

func (v NullableMutualFundSchemeOption) IsSet() bool {
	return v.isSet
}

func (v *NullableMutualFundSchemeOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutualFundSchemeOption(val *MutualFundSchemeOption) *NullableMutualFundSchemeOption {
	return &NullableMutualFundSchemeOption{value: val, isSet: true}
}

func (v NullableMutualFundSchemeOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutualFundSchemeOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

