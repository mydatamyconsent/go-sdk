/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// SupportedDocumentTypeCategoryDetailsDto struct for SupportedDocumentTypeCategoryDetailsDto
type SupportedDocumentTypeCategoryDetailsDto struct {
	DocumentTypeCategoryId string `json:"documentTypeCategoryId"`
	DocumentTypeCategoryName string `json:"documentTypeCategoryName"`
	SupportedDocuments []SupportedDocumentDetailsDto `json:"supportedDocuments"`
	SupportedDocumentProviderDetails []SupportedDocumentProviderDetailsDto `json:"supportedDocumentProviderDetails,omitempty"`
}

// NewSupportedDocumentTypeCategoryDetailsDto instantiates a new SupportedDocumentTypeCategoryDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedDocumentTypeCategoryDetailsDto(documentTypeCategoryId string, documentTypeCategoryName string, supportedDocuments []SupportedDocumentDetailsDto) *SupportedDocumentTypeCategoryDetailsDto {
	this := SupportedDocumentTypeCategoryDetailsDto{}
	this.DocumentTypeCategoryId = documentTypeCategoryId
	this.DocumentTypeCategoryName = documentTypeCategoryName
	this.SupportedDocuments = supportedDocuments
	return &this
}

// NewSupportedDocumentTypeCategoryDetailsDtoWithDefaults instantiates a new SupportedDocumentTypeCategoryDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedDocumentTypeCategoryDetailsDtoWithDefaults() *SupportedDocumentTypeCategoryDetailsDto {
	this := SupportedDocumentTypeCategoryDetailsDto{}
	return &this
}

// GetDocumentTypeCategoryId returns the DocumentTypeCategoryId field value
func (o *SupportedDocumentTypeCategoryDetailsDto) GetDocumentTypeCategoryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentTypeCategoryId
}

// GetDocumentTypeCategoryIdOk returns a tuple with the DocumentTypeCategoryId field value
// and a boolean to check if the value has been set.
func (o *SupportedDocumentTypeCategoryDetailsDto) GetDocumentTypeCategoryIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DocumentTypeCategoryId, true
}

// SetDocumentTypeCategoryId sets field value
func (o *SupportedDocumentTypeCategoryDetailsDto) SetDocumentTypeCategoryId(v string) {
	o.DocumentTypeCategoryId = v
}

// GetDocumentTypeCategoryName returns the DocumentTypeCategoryName field value
func (o *SupportedDocumentTypeCategoryDetailsDto) GetDocumentTypeCategoryName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentTypeCategoryName
}

// GetDocumentTypeCategoryNameOk returns a tuple with the DocumentTypeCategoryName field value
// and a boolean to check if the value has been set.
func (o *SupportedDocumentTypeCategoryDetailsDto) GetDocumentTypeCategoryNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DocumentTypeCategoryName, true
}

// SetDocumentTypeCategoryName sets field value
func (o *SupportedDocumentTypeCategoryDetailsDto) SetDocumentTypeCategoryName(v string) {
	o.DocumentTypeCategoryName = v
}

// GetSupportedDocuments returns the SupportedDocuments field value
func (o *SupportedDocumentTypeCategoryDetailsDto) GetSupportedDocuments() []SupportedDocumentDetailsDto {
	if o == nil {
		var ret []SupportedDocumentDetailsDto
		return ret
	}

	return o.SupportedDocuments
}

// GetSupportedDocumentsOk returns a tuple with the SupportedDocuments field value
// and a boolean to check if the value has been set.
func (o *SupportedDocumentTypeCategoryDetailsDto) GetSupportedDocumentsOk() ([]SupportedDocumentDetailsDto, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SupportedDocuments, true
}

// SetSupportedDocuments sets field value
func (o *SupportedDocumentTypeCategoryDetailsDto) SetSupportedDocuments(v []SupportedDocumentDetailsDto) {
	o.SupportedDocuments = v
}

// GetSupportedDocumentProviderDetails returns the SupportedDocumentProviderDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportedDocumentTypeCategoryDetailsDto) GetSupportedDocumentProviderDetails() []SupportedDocumentProviderDetailsDto {
	if o == nil  {
		var ret []SupportedDocumentProviderDetailsDto
		return ret
	}
	return o.SupportedDocumentProviderDetails
}

// GetSupportedDocumentProviderDetailsOk returns a tuple with the SupportedDocumentProviderDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportedDocumentTypeCategoryDetailsDto) GetSupportedDocumentProviderDetailsOk() ([]SupportedDocumentProviderDetailsDto, bool) {
	if o == nil || o.SupportedDocumentProviderDetails == nil {
		return nil, false
	}
	return o.SupportedDocumentProviderDetails, true
}

// HasSupportedDocumentProviderDetails returns a boolean if a field has been set.
func (o *SupportedDocumentTypeCategoryDetailsDto) HasSupportedDocumentProviderDetails() bool {
	if o != nil && o.SupportedDocumentProviderDetails != nil {
		return true
	}

	return false
}

// SetSupportedDocumentProviderDetails gets a reference to the given []SupportedDocumentProviderDetailsDto and assigns it to the SupportedDocumentProviderDetails field.
func (o *SupportedDocumentTypeCategoryDetailsDto) SetSupportedDocumentProviderDetails(v []SupportedDocumentProviderDetailsDto) {
	o.SupportedDocumentProviderDetails = v
}

func (o SupportedDocumentTypeCategoryDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["documentTypeCategoryId"] = o.DocumentTypeCategoryId
	}
	if true {
		toSerialize["documentTypeCategoryName"] = o.DocumentTypeCategoryName
	}
	if true {
		toSerialize["supportedDocuments"] = o.SupportedDocuments
	}
	if o.SupportedDocumentProviderDetails != nil {
		toSerialize["supportedDocumentProviderDetails"] = o.SupportedDocumentProviderDetails
	}
	return json.Marshal(toSerialize)
}

type NullableSupportedDocumentTypeCategoryDetailsDto struct {
	value *SupportedDocumentTypeCategoryDetailsDto
	isSet bool
}

func (v NullableSupportedDocumentTypeCategoryDetailsDto) Get() *SupportedDocumentTypeCategoryDetailsDto {
	return v.value
}

func (v *NullableSupportedDocumentTypeCategoryDetailsDto) Set(val *SupportedDocumentTypeCategoryDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedDocumentTypeCategoryDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedDocumentTypeCategoryDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedDocumentTypeCategoryDetailsDto(val *SupportedDocumentTypeCategoryDetailsDto) *NullableSupportedDocumentTypeCategoryDetailsDto {
	return &NullableSupportedDocumentTypeCategoryDetailsDto{value: val, isSet: true}
}

func (v NullableSupportedDocumentTypeCategoryDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedDocumentTypeCategoryDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


