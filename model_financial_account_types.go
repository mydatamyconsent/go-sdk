/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"fmt"
)

// FinancialAccountTypes the model 'FinancialAccountTypes'
type FinancialAccountTypes string

// List of FinancialAccountTypes
const (
	SAVINGS_BANK_ACCOUNT FinancialAccountTypes = "SavingsBankAccount"
	MUTUAL_FUND FinancialAccountTypes = "MutualFund"
	EQUITY_SHARE FinancialAccountTypes = "EquityShare"
	NATIONAL_PENSION_SCHEME FinancialAccountTypes = "NationalPensionScheme"
	INSURANCE_POLICY FinancialAccountTypes = "InsurancePolicy"
	DEMAT FinancialAccountTypes = "Demat"
	CREDIT_CARD FinancialAccountTypes = "CreditCard"
	LOAN FinancialAccountTypes = "Loan"
	BOND FinancialAccountTypes = "Bond"
	DEBENTURE FinancialAccountTypes = "Debenture"
	DEPOSIT FinancialAccountTypes = "Deposit"
	GOVERNMENT_SECURITY FinancialAccountTypes = "GovernmentSecurity"
	INDIAN_DEPOSITORY_RECEIPT FinancialAccountTypes = "IndianDepositoryReceipt"
	INVIT FinancialAccountTypes = "Invit"
	REIT FinancialAccountTypes = "Reit"
	PUBLIC_PROVIDENT_FUND FinancialAccountTypes = "PublicProvidentFund"
	SYSTEMATIC_INVESTMENT_PLAN FinancialAccountTypes = "SystematicInvestmentPlan"
	TERM_DEPOSIT FinancialAccountTypes = "TermDeposit"
	UNIT_LINKED_INSURANCE_PLAN FinancialAccountTypes = "UnitLinkedInsurancePlan"
	RECURRING_DEPOSIT FinancialAccountTypes = "RecurringDeposit"
	ALTERNATIVE_INVESTMENT_FUND FinancialAccountTypes = "AlternativeInvestmentFund"
	CREDIT_SCORE_REPORT FinancialAccountTypes = "CreditScoreReport"
)

var allowedFinancialAccountTypesEnumValues = []FinancialAccountTypes{
	"SavingsBankAccount",
	"MutualFund",
	"EquityShare",
	"NationalPensionScheme",
	"InsurancePolicy",
	"Demat",
	"CreditCard",
	"Loan",
	"Bond",
	"Debenture",
	"Deposit",
	"GovernmentSecurity",
	"IndianDepositoryReceipt",
	"Invit",
	"Reit",
	"PublicProvidentFund",
	"SystematicInvestmentPlan",
	"TermDeposit",
	"UnitLinkedInsurancePlan",
	"RecurringDeposit",
	"AlternativeInvestmentFund",
	"CreditScoreReport",
}

func (v *FinancialAccountTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FinancialAccountTypes(value)
	for _, existing := range allowedFinancialAccountTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FinancialAccountTypes", value)
}

// NewFinancialAccountTypesFromValue returns a pointer to a valid FinancialAccountTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFinancialAccountTypesFromValue(v string) (*FinancialAccountTypes, error) {
	ev := FinancialAccountTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FinancialAccountTypes: valid values are %v", v, allowedFinancialAccountTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FinancialAccountTypes) IsValid() bool {
	for _, existing := range allowedFinancialAccountTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FinancialAccountTypes value
func (v FinancialAccountTypes) Ptr() *FinancialAccountTypes {
	return &v
}

type NullableFinancialAccountTypes struct {
	value *FinancialAccountTypes
	isSet bool
}

func (v NullableFinancialAccountTypes) Get() *FinancialAccountTypes {
	return v.value
}

func (v *NullableFinancialAccountTypes) Set(val *FinancialAccountTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialAccountTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialAccountTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialAccountTypes(val *FinancialAccountTypes) *NullableFinancialAccountTypes {
	return &NullableFinancialAccountTypes{value: val, isSet: true}
}

func (v NullableFinancialAccountTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialAccountTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

