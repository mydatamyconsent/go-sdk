/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// ConsentedDocument ConsentedDocument : Consented document details.
type ConsentedDocument struct {
	// Document id.
	Id string `json:"id"`
	// Document name.
	Name string `json:"name"`
	// Document category.
	Category string `json:"category"`
	// Document identifier.
	Identifier string `json:"identifier"`
	// Document field title.
	FieldTitle string `json:"fieldTitle"`
	// Document field slug.
	FieldSlug string `json:"fieldSlug"`
	// Document issued at datetime in UTC timezone.
	IssuedAtUtc time.Time `json:"issuedAtUtc"`
	// Document expires at datetime in UTC timezone.
	ExpiresAtUtc *time.Time `json:"expiresAtUtc,omitempty"`
	Issuer ConsentDocumentIssuer `json:"issuer"`
	// Digital signatures.
	DigitalSignatures []DocumentDigitalSignature `json:"digitalSignatures"`
}

// NewConsentedDocument instantiates a new ConsentedDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsentedDocument(id string, name string, category string, identifier string, fieldTitle string, fieldSlug string, issuedAtUtc time.Time, issuer ConsentDocumentIssuer, digitalSignatures []DocumentDigitalSignature) *ConsentedDocument {
	this := ConsentedDocument{}
	this.Id = id
	this.Name = name
	this.Category = category
	this.Identifier = identifier
	this.FieldTitle = fieldTitle
	this.FieldSlug = fieldSlug
	this.IssuedAtUtc = issuedAtUtc
	this.Issuer = issuer
	this.DigitalSignatures = digitalSignatures
	return &this
}

// NewConsentedDocumentWithDefaults instantiates a new ConsentedDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentedDocumentWithDefaults() *ConsentedDocument {
	this := ConsentedDocument{}
	return &this
}

// GetId returns the Id field value
func (o *ConsentedDocument) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConsentedDocument) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConsentedDocument) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ConsentedDocument) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConsentedDocument) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConsentedDocument) SetName(v string) {
	o.Name = v
}

// GetCategory returns the Category field value
func (o *ConsentedDocument) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *ConsentedDocument) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *ConsentedDocument) SetCategory(v string) {
	o.Category = v
}

// GetIdentifier returns the Identifier field value
func (o *ConsentedDocument) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *ConsentedDocument) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *ConsentedDocument) SetIdentifier(v string) {
	o.Identifier = v
}

// GetFieldTitle returns the FieldTitle field value
func (o *ConsentedDocument) GetFieldTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldTitle
}

// GetFieldTitleOk returns a tuple with the FieldTitle field value
// and a boolean to check if the value has been set.
func (o *ConsentedDocument) GetFieldTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldTitle, true
}

// SetFieldTitle sets field value
func (o *ConsentedDocument) SetFieldTitle(v string) {
	o.FieldTitle = v
}

// GetFieldSlug returns the FieldSlug field value
func (o *ConsentedDocument) GetFieldSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldSlug
}

// GetFieldSlugOk returns a tuple with the FieldSlug field value
// and a boolean to check if the value has been set.
func (o *ConsentedDocument) GetFieldSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldSlug, true
}

// SetFieldSlug sets field value
func (o *ConsentedDocument) SetFieldSlug(v string) {
	o.FieldSlug = v
}

// GetIssuedAtUtc returns the IssuedAtUtc field value
func (o *ConsentedDocument) GetIssuedAtUtc() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IssuedAtUtc
}

// GetIssuedAtUtcOk returns a tuple with the IssuedAtUtc field value
// and a boolean to check if the value has been set.
func (o *ConsentedDocument) GetIssuedAtUtcOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuedAtUtc, true
}

// SetIssuedAtUtc sets field value
func (o *ConsentedDocument) SetIssuedAtUtc(v time.Time) {
	o.IssuedAtUtc = v
}

// GetExpiresAtUtc returns the ExpiresAtUtc field value if set, zero value otherwise.
func (o *ConsentedDocument) GetExpiresAtUtc() time.Time {
	if o == nil || o.ExpiresAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAtUtc
}

// GetExpiresAtUtcOk returns a tuple with the ExpiresAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentedDocument) GetExpiresAtUtcOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAtUtc == nil {
		return nil, false
	}
	return o.ExpiresAtUtc, true
}

// HasExpiresAtUtc returns a boolean if a field has been set.
func (o *ConsentedDocument) HasExpiresAtUtc() bool {
	if o != nil && o.ExpiresAtUtc != nil {
		return true
	}

	return false
}

// SetExpiresAtUtc gets a reference to the given time.Time and assigns it to the ExpiresAtUtc field.
func (o *ConsentedDocument) SetExpiresAtUtc(v time.Time) {
	o.ExpiresAtUtc = &v
}

// GetIssuer returns the Issuer field value
func (o *ConsentedDocument) GetIssuer() ConsentDocumentIssuer {
	if o == nil {
		var ret ConsentDocumentIssuer
		return ret
	}

	return o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value
// and a boolean to check if the value has been set.
func (o *ConsentedDocument) GetIssuerOk() (*ConsentDocumentIssuer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issuer, true
}

// SetIssuer sets field value
func (o *ConsentedDocument) SetIssuer(v ConsentDocumentIssuer) {
	o.Issuer = v
}

// GetDigitalSignatures returns the DigitalSignatures field value
func (o *ConsentedDocument) GetDigitalSignatures() []DocumentDigitalSignature {
	if o == nil {
		var ret []DocumentDigitalSignature
		return ret
	}

	return o.DigitalSignatures
}

// GetDigitalSignaturesOk returns a tuple with the DigitalSignatures field value
// and a boolean to check if the value has been set.
func (o *ConsentedDocument) GetDigitalSignaturesOk() ([]DocumentDigitalSignature, bool) {
	if o == nil {
		return nil, false
	}
	return o.DigitalSignatures, true
}

// SetDigitalSignatures sets field value
func (o *ConsentedDocument) SetDigitalSignatures(v []DocumentDigitalSignature) {
	o.DigitalSignatures = v
}

func (o ConsentedDocument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["category"] = o.Category
	}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	if true {
		toSerialize["fieldTitle"] = o.FieldTitle
	}
	if true {
		toSerialize["fieldSlug"] = o.FieldSlug
	}
	if true {
		toSerialize["issuedAtUtc"] = o.IssuedAtUtc
	}
	if o.ExpiresAtUtc != nil {
		toSerialize["expiresAtUtc"] = o.ExpiresAtUtc
	}
	if true {
		toSerialize["issuer"] = o.Issuer
	}
	if true {
		toSerialize["digitalSignatures"] = o.DigitalSignatures
	}
	return json.Marshal(toSerialize)
}

type NullableConsentedDocument struct {
	value *ConsentedDocument
	isSet bool
}

func (v NullableConsentedDocument) Get() *ConsentedDocument {
	return v.value
}

func (v *NullableConsentedDocument) Set(val *ConsentedDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentedDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentedDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentedDocument(val *ConsentedDocument) *NullableConsentedDocument {
	return &NullableConsentedDocument{value: val, isSet: true}
}

func (v NullableConsentedDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentedDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


