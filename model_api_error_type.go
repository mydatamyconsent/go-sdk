/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// ApiErrorType the model 'ApiErrorType'
type ApiErrorType string

// List of ApiErrorType
const (
	UNAUTHORIZED ApiErrorType = "Unauthorized"
	TOO_MANY_REQUESTS ApiErrorType = "TooManyRequests"
	BAD_REQUEST ApiErrorType = "BadRequest"
	NOT_FOUND ApiErrorType = "NotFound"
	INTERNAL_SERVER_ERROR ApiErrorType = "InternalServerError"
	DATA_CONSENT_REQUEST_EXISTS ApiErrorType = "DataConsentRequestExists"
)

// All allowed values of ApiErrorType enum
var AllowedApiErrorTypeEnumValues = []ApiErrorType{
	"Unauthorized",
	"TooManyRequests",
	"BadRequest",
	"NotFound",
	"InternalServerError",
	"DataConsentRequestExists",
}

func (v *ApiErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiErrorType(value)
	for _, existing := range AllowedApiErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiErrorType", value)
}

// NewApiErrorTypeFromValue returns a pointer to a valid ApiErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiErrorTypeFromValue(v string) (*ApiErrorType, error) {
	ev := ApiErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiErrorType: valid values are %v", v, AllowedApiErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiErrorType) IsValid() bool {
	for _, existing := range AllowedApiErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiErrorType value
func (v ApiErrorType) Ptr() *ApiErrorType {
	return &v
}

type NullableApiErrorType struct {
	value *ApiErrorType
	isSet bool
}

func (v NullableApiErrorType) Get() *ApiErrorType {
	return v.value
}

func (v *NullableApiErrorType) Set(val *ApiErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableApiErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableApiErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiErrorType(val *ApiErrorType) *NullableApiErrorType {
	return &NullableApiErrorType{value: val, isSet: true}
}

func (v NullableApiErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

