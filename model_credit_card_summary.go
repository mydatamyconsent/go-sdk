/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// CreditCardSummary struct for CreditCardSummary
type CreditCardSummary struct {
	CreditCardId string `json:"creditCardId"`
	CurrentDue float64 `json:"currentDue"`
	LastStatementDate time.Time `json:"lastStatementDate"`
	DueDate time.Time `json:"dueDate"`
	PreviousDueAmount float64 `json:"previousDueAmount"`
	TotalDueAmount float64 `json:"totalDueAmount"`
	MinDueAmount float64 `json:"minDueAmount"`
	CreditLimit float64 `json:"creditLimit"`
	CashLimit float64 `json:"cashLimit"`
	AvailableCredit float64 `json:"availableCredit"`
	LoyaltyPoints string `json:"loyaltyPoints"`
	FinanceCharges float64 `json:"financeCharges"`
}

// NewCreditCardSummary instantiates a new CreditCardSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditCardSummary(creditCardId string, currentDue float64, lastStatementDate time.Time, dueDate time.Time, previousDueAmount float64, totalDueAmount float64, minDueAmount float64, creditLimit float64, cashLimit float64, availableCredit float64, loyaltyPoints string, financeCharges float64) *CreditCardSummary {
	this := CreditCardSummary{}
	this.CreditCardId = creditCardId
	this.CurrentDue = currentDue
	this.LastStatementDate = lastStatementDate
	this.DueDate = dueDate
	this.PreviousDueAmount = previousDueAmount
	this.TotalDueAmount = totalDueAmount
	this.MinDueAmount = minDueAmount
	this.CreditLimit = creditLimit
	this.CashLimit = cashLimit
	this.AvailableCredit = availableCredit
	this.LoyaltyPoints = loyaltyPoints
	this.FinanceCharges = financeCharges
	return &this
}

// NewCreditCardSummaryWithDefaults instantiates a new CreditCardSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditCardSummaryWithDefaults() *CreditCardSummary {
	this := CreditCardSummary{}
	return &this
}

// GetCreditCardId returns the CreditCardId field value
func (o *CreditCardSummary) GetCreditCardId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreditCardId
}

// GetCreditCardIdOk returns a tuple with the CreditCardId field value
// and a boolean to check if the value has been set.
func (o *CreditCardSummary) GetCreditCardIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditCardId, true
}

// SetCreditCardId sets field value
func (o *CreditCardSummary) SetCreditCardId(v string) {
	o.CreditCardId = v
}

// GetCurrentDue returns the CurrentDue field value
func (o *CreditCardSummary) GetCurrentDue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CurrentDue
}

// GetCurrentDueOk returns a tuple with the CurrentDue field value
// and a boolean to check if the value has been set.
func (o *CreditCardSummary) GetCurrentDueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentDue, true
}

// SetCurrentDue sets field value
func (o *CreditCardSummary) SetCurrentDue(v float64) {
	o.CurrentDue = v
}

// GetLastStatementDate returns the LastStatementDate field value
func (o *CreditCardSummary) GetLastStatementDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastStatementDate
}

// GetLastStatementDateOk returns a tuple with the LastStatementDate field value
// and a boolean to check if the value has been set.
func (o *CreditCardSummary) GetLastStatementDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastStatementDate, true
}

// SetLastStatementDate sets field value
func (o *CreditCardSummary) SetLastStatementDate(v time.Time) {
	o.LastStatementDate = v
}

// GetDueDate returns the DueDate field value
func (o *CreditCardSummary) GetDueDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value
// and a boolean to check if the value has been set.
func (o *CreditCardSummary) GetDueDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DueDate, true
}

// SetDueDate sets field value
func (o *CreditCardSummary) SetDueDate(v time.Time) {
	o.DueDate = v
}

// GetPreviousDueAmount returns the PreviousDueAmount field value
func (o *CreditCardSummary) GetPreviousDueAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.PreviousDueAmount
}

// GetPreviousDueAmountOk returns a tuple with the PreviousDueAmount field value
// and a boolean to check if the value has been set.
func (o *CreditCardSummary) GetPreviousDueAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreviousDueAmount, true
}

// SetPreviousDueAmount sets field value
func (o *CreditCardSummary) SetPreviousDueAmount(v float64) {
	o.PreviousDueAmount = v
}

// GetTotalDueAmount returns the TotalDueAmount field value
func (o *CreditCardSummary) GetTotalDueAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalDueAmount
}

// GetTotalDueAmountOk returns a tuple with the TotalDueAmount field value
// and a boolean to check if the value has been set.
func (o *CreditCardSummary) GetTotalDueAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalDueAmount, true
}

// SetTotalDueAmount sets field value
func (o *CreditCardSummary) SetTotalDueAmount(v float64) {
	o.TotalDueAmount = v
}

// GetMinDueAmount returns the MinDueAmount field value
func (o *CreditCardSummary) GetMinDueAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.MinDueAmount
}

// GetMinDueAmountOk returns a tuple with the MinDueAmount field value
// and a boolean to check if the value has been set.
func (o *CreditCardSummary) GetMinDueAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinDueAmount, true
}

// SetMinDueAmount sets field value
func (o *CreditCardSummary) SetMinDueAmount(v float64) {
	o.MinDueAmount = v
}

// GetCreditLimit returns the CreditLimit field value
func (o *CreditCardSummary) GetCreditLimit() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CreditLimit
}

// GetCreditLimitOk returns a tuple with the CreditLimit field value
// and a boolean to check if the value has been set.
func (o *CreditCardSummary) GetCreditLimitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditLimit, true
}

// SetCreditLimit sets field value
func (o *CreditCardSummary) SetCreditLimit(v float64) {
	o.CreditLimit = v
}

// GetCashLimit returns the CashLimit field value
func (o *CreditCardSummary) GetCashLimit() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CashLimit
}

// GetCashLimitOk returns a tuple with the CashLimit field value
// and a boolean to check if the value has been set.
func (o *CreditCardSummary) GetCashLimitOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CashLimit, true
}

// SetCashLimit sets field value
func (o *CreditCardSummary) SetCashLimit(v float64) {
	o.CashLimit = v
}

// GetAvailableCredit returns the AvailableCredit field value
func (o *CreditCardSummary) GetAvailableCredit() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AvailableCredit
}

// GetAvailableCreditOk returns a tuple with the AvailableCredit field value
// and a boolean to check if the value has been set.
func (o *CreditCardSummary) GetAvailableCreditOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableCredit, true
}

// SetAvailableCredit sets field value
func (o *CreditCardSummary) SetAvailableCredit(v float64) {
	o.AvailableCredit = v
}

// GetLoyaltyPoints returns the LoyaltyPoints field value
func (o *CreditCardSummary) GetLoyaltyPoints() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LoyaltyPoints
}

// GetLoyaltyPointsOk returns a tuple with the LoyaltyPoints field value
// and a boolean to check if the value has been set.
func (o *CreditCardSummary) GetLoyaltyPointsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoyaltyPoints, true
}

// SetLoyaltyPoints sets field value
func (o *CreditCardSummary) SetLoyaltyPoints(v string) {
	o.LoyaltyPoints = v
}

// GetFinanceCharges returns the FinanceCharges field value
func (o *CreditCardSummary) GetFinanceCharges() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.FinanceCharges
}

// GetFinanceChargesOk returns a tuple with the FinanceCharges field value
// and a boolean to check if the value has been set.
func (o *CreditCardSummary) GetFinanceChargesOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FinanceCharges, true
}

// SetFinanceCharges sets field value
func (o *CreditCardSummary) SetFinanceCharges(v float64) {
	o.FinanceCharges = v
}

func (o CreditCardSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["creditCardId"] = o.CreditCardId
	}
	if true {
		toSerialize["currentDue"] = o.CurrentDue
	}
	if true {
		toSerialize["lastStatementDate"] = o.LastStatementDate
	}
	if true {
		toSerialize["dueDate"] = o.DueDate
	}
	if true {
		toSerialize["previousDueAmount"] = o.PreviousDueAmount
	}
	if true {
		toSerialize["totalDueAmount"] = o.TotalDueAmount
	}
	if true {
		toSerialize["minDueAmount"] = o.MinDueAmount
	}
	if true {
		toSerialize["creditLimit"] = o.CreditLimit
	}
	if true {
		toSerialize["cashLimit"] = o.CashLimit
	}
	if true {
		toSerialize["availableCredit"] = o.AvailableCredit
	}
	if true {
		toSerialize["loyaltyPoints"] = o.LoyaltyPoints
	}
	if true {
		toSerialize["financeCharges"] = o.FinanceCharges
	}
	return json.Marshal(toSerialize)
}

type NullableCreditCardSummary struct {
	value *CreditCardSummary
	isSet bool
}

func (v NullableCreditCardSummary) Get() *CreditCardSummary {
	return v.value
}

func (v *NullableCreditCardSummary) Set(val *CreditCardSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditCardSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditCardSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditCardSummary(val *CreditCardSummary) *NullableCreditCardSummary {
	return &NullableCreditCardSummary{value: val, isSet: true}
}

func (v NullableCreditCardSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditCardSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


