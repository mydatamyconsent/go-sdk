/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/go-sdk

import (
	"encoding/json"
	"time"
)

// UserDataConsentInfoDto struct for UserDataConsentInfoDto
type UserDataConsentInfoDto struct {
	ConsentRequestId *string `json:"consentRequestId,omitempty"`
	UserId *string `json:"userId,omitempty"`
	ConsentTemplateId NullableString `json:"consentTemplateId,omitempty"`
	ConsentPurpose NullableString `json:"consentPurpose,omitempty"`
	ConsentDescription NullableString `json:"consentDescription,omitempty"`
	Status *DataConsentStatus `json:"status,omitempty"`
	CreatedAtUtc *time.Time `json:"createdAtUtc,omitempty"`
	ConsentSentToUser NullableString `json:"consentSentToUser,omitempty"`
}

// NewUserDataConsentInfoDto instantiates a new UserDataConsentInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDataConsentInfoDto() *UserDataConsentInfoDto {
	this := UserDataConsentInfoDto{}
	return &this
}

// NewUserDataConsentInfoDtoWithDefaults instantiates a new UserDataConsentInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDataConsentInfoDtoWithDefaults() *UserDataConsentInfoDto {
	this := UserDataConsentInfoDto{}
	return &this
}

// GetConsentRequestId returns the ConsentRequestId field value if set, zero value otherwise.
func (o *UserDataConsentInfoDto) GetConsentRequestId() string {
	if o == nil || o.ConsentRequestId == nil {
		var ret string
		return ret
	}
	return *o.ConsentRequestId
}

// GetConsentRequestIdOk returns a tuple with the ConsentRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataConsentInfoDto) GetConsentRequestIdOk() (*string, bool) {
	if o == nil || o.ConsentRequestId == nil {
		return nil, false
	}
	return o.ConsentRequestId, true
}

// HasConsentRequestId returns a boolean if a field has been set.
func (o *UserDataConsentInfoDto) HasConsentRequestId() bool {
	if o != nil && o.ConsentRequestId != nil {
		return true
	}

	return false
}

// SetConsentRequestId gets a reference to the given string and assigns it to the ConsentRequestId field.
func (o *UserDataConsentInfoDto) SetConsentRequestId(v string) {
	o.ConsentRequestId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserDataConsentInfoDto) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataConsentInfoDto) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserDataConsentInfoDto) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UserDataConsentInfoDto) SetUserId(v string) {
	o.UserId = &v
}

// GetConsentTemplateId returns the ConsentTemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDataConsentInfoDto) GetConsentTemplateId() string {
	if o == nil || o.ConsentTemplateId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConsentTemplateId.Get()
}

// GetConsentTemplateIdOk returns a tuple with the ConsentTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDataConsentInfoDto) GetConsentTemplateIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConsentTemplateId.Get(), o.ConsentTemplateId.IsSet()
}

// HasConsentTemplateId returns a boolean if a field has been set.
func (o *UserDataConsentInfoDto) HasConsentTemplateId() bool {
	if o != nil && o.ConsentTemplateId.IsSet() {
		return true
	}

	return false
}

// SetConsentTemplateId gets a reference to the given NullableString and assigns it to the ConsentTemplateId field.
func (o *UserDataConsentInfoDto) SetConsentTemplateId(v string) {
	o.ConsentTemplateId.Set(&v)
}
// SetConsentTemplateIdNil sets the value for ConsentTemplateId to be an explicit nil
func (o *UserDataConsentInfoDto) SetConsentTemplateIdNil() {
	o.ConsentTemplateId.Set(nil)
}

// UnsetConsentTemplateId ensures that no value is present for ConsentTemplateId, not even an explicit nil
func (o *UserDataConsentInfoDto) UnsetConsentTemplateId() {
	o.ConsentTemplateId.Unset()
}

// GetConsentPurpose returns the ConsentPurpose field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDataConsentInfoDto) GetConsentPurpose() string {
	if o == nil || o.ConsentPurpose.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConsentPurpose.Get()
}

// GetConsentPurposeOk returns a tuple with the ConsentPurpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDataConsentInfoDto) GetConsentPurposeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConsentPurpose.Get(), o.ConsentPurpose.IsSet()
}

// HasConsentPurpose returns a boolean if a field has been set.
func (o *UserDataConsentInfoDto) HasConsentPurpose() bool {
	if o != nil && o.ConsentPurpose.IsSet() {
		return true
	}

	return false
}

// SetConsentPurpose gets a reference to the given NullableString and assigns it to the ConsentPurpose field.
func (o *UserDataConsentInfoDto) SetConsentPurpose(v string) {
	o.ConsentPurpose.Set(&v)
}
// SetConsentPurposeNil sets the value for ConsentPurpose to be an explicit nil
func (o *UserDataConsentInfoDto) SetConsentPurposeNil() {
	o.ConsentPurpose.Set(nil)
}

// UnsetConsentPurpose ensures that no value is present for ConsentPurpose, not even an explicit nil
func (o *UserDataConsentInfoDto) UnsetConsentPurpose() {
	o.ConsentPurpose.Unset()
}

// GetConsentDescription returns the ConsentDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDataConsentInfoDto) GetConsentDescription() string {
	if o == nil || o.ConsentDescription.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConsentDescription.Get()
}

// GetConsentDescriptionOk returns a tuple with the ConsentDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDataConsentInfoDto) GetConsentDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConsentDescription.Get(), o.ConsentDescription.IsSet()
}

// HasConsentDescription returns a boolean if a field has been set.
func (o *UserDataConsentInfoDto) HasConsentDescription() bool {
	if o != nil && o.ConsentDescription.IsSet() {
		return true
	}

	return false
}

// SetConsentDescription gets a reference to the given NullableString and assigns it to the ConsentDescription field.
func (o *UserDataConsentInfoDto) SetConsentDescription(v string) {
	o.ConsentDescription.Set(&v)
}
// SetConsentDescriptionNil sets the value for ConsentDescription to be an explicit nil
func (o *UserDataConsentInfoDto) SetConsentDescriptionNil() {
	o.ConsentDescription.Set(nil)
}

// UnsetConsentDescription ensures that no value is present for ConsentDescription, not even an explicit nil
func (o *UserDataConsentInfoDto) UnsetConsentDescription() {
	o.ConsentDescription.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UserDataConsentInfoDto) GetStatus() DataConsentStatus {
	if o == nil || o.Status == nil {
		var ret DataConsentStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataConsentInfoDto) GetStatusOk() (*DataConsentStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UserDataConsentInfoDto) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DataConsentStatus and assigns it to the Status field.
func (o *UserDataConsentInfoDto) SetStatus(v DataConsentStatus) {
	o.Status = &v
}

// GetCreatedAtUtc returns the CreatedAtUtc field value if set, zero value otherwise.
func (o *UserDataConsentInfoDto) GetCreatedAtUtc() time.Time {
	if o == nil || o.CreatedAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAtUtc
}

// GetCreatedAtUtcOk returns a tuple with the CreatedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataConsentInfoDto) GetCreatedAtUtcOk() (*time.Time, bool) {
	if o == nil || o.CreatedAtUtc == nil {
		return nil, false
	}
	return o.CreatedAtUtc, true
}

// HasCreatedAtUtc returns a boolean if a field has been set.
func (o *UserDataConsentInfoDto) HasCreatedAtUtc() bool {
	if o != nil && o.CreatedAtUtc != nil {
		return true
	}

	return false
}

// SetCreatedAtUtc gets a reference to the given time.Time and assigns it to the CreatedAtUtc field.
func (o *UserDataConsentInfoDto) SetCreatedAtUtc(v time.Time) {
	o.CreatedAtUtc = &v
}

// GetConsentSentToUser returns the ConsentSentToUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDataConsentInfoDto) GetConsentSentToUser() string {
	if o == nil || o.ConsentSentToUser.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConsentSentToUser.Get()
}

// GetConsentSentToUserOk returns a tuple with the ConsentSentToUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDataConsentInfoDto) GetConsentSentToUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConsentSentToUser.Get(), o.ConsentSentToUser.IsSet()
}

// HasConsentSentToUser returns a boolean if a field has been set.
func (o *UserDataConsentInfoDto) HasConsentSentToUser() bool {
	if o != nil && o.ConsentSentToUser.IsSet() {
		return true
	}

	return false
}

// SetConsentSentToUser gets a reference to the given NullableString and assigns it to the ConsentSentToUser field.
func (o *UserDataConsentInfoDto) SetConsentSentToUser(v string) {
	o.ConsentSentToUser.Set(&v)
}
// SetConsentSentToUserNil sets the value for ConsentSentToUser to be an explicit nil
func (o *UserDataConsentInfoDto) SetConsentSentToUserNil() {
	o.ConsentSentToUser.Set(nil)
}

// UnsetConsentSentToUser ensures that no value is present for ConsentSentToUser, not even an explicit nil
func (o *UserDataConsentInfoDto) UnsetConsentSentToUser() {
	o.ConsentSentToUser.Unset()
}

func (o UserDataConsentInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConsentRequestId != nil {
		toSerialize["consentRequestId"] = o.ConsentRequestId
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.ConsentTemplateId.IsSet() {
		toSerialize["consentTemplateId"] = o.ConsentTemplateId.Get()
	}
	if o.ConsentPurpose.IsSet() {
		toSerialize["consentPurpose"] = o.ConsentPurpose.Get()
	}
	if o.ConsentDescription.IsSet() {
		toSerialize["consentDescription"] = o.ConsentDescription.Get()
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.CreatedAtUtc != nil {
		toSerialize["createdAtUtc"] = o.CreatedAtUtc
	}
	if o.ConsentSentToUser.IsSet() {
		toSerialize["consentSentToUser"] = o.ConsentSentToUser.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUserDataConsentInfoDto struct {
	value *UserDataConsentInfoDto
	isSet bool
}

func (v NullableUserDataConsentInfoDto) Get() *UserDataConsentInfoDto {
	return v.value
}

func (v *NullableUserDataConsentInfoDto) Set(val *UserDataConsentInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDataConsentInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDataConsentInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDataConsentInfoDto(val *UserDataConsentInfoDto) *NullableUserDataConsentInfoDto {
	return &NullableUserDataConsentInfoDto{value: val, isSet: true}
}

func (v NullableUserDataConsentInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDataConsentInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


