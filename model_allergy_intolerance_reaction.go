/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// AllergyIntoleranceReaction struct for AllergyIntoleranceReaction
type AllergyIntoleranceReaction struct {
	Description *string `json:"description,omitempty"`
	Manifestation []CodeableConcept `json:"manifestation"`
}

// NewAllergyIntoleranceReaction instantiates a new AllergyIntoleranceReaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllergyIntoleranceReaction(manifestation []CodeableConcept) *AllergyIntoleranceReaction {
	this := AllergyIntoleranceReaction{}
	this.Manifestation = manifestation
	return &this
}

// NewAllergyIntoleranceReactionWithDefaults instantiates a new AllergyIntoleranceReaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllergyIntoleranceReactionWithDefaults() *AllergyIntoleranceReaction {
	this := AllergyIntoleranceReaction{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AllergyIntoleranceReaction) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllergyIntoleranceReaction) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AllergyIntoleranceReaction) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AllergyIntoleranceReaction) SetDescription(v string) {
	o.Description = &v
}

// GetManifestation returns the Manifestation field value
func (o *AllergyIntoleranceReaction) GetManifestation() []CodeableConcept {
	if o == nil {
		var ret []CodeableConcept
		return ret
	}

	return o.Manifestation
}

// GetManifestationOk returns a tuple with the Manifestation field value
// and a boolean to check if the value has been set.
func (o *AllergyIntoleranceReaction) GetManifestationOk() ([]CodeableConcept, bool) {
	if o == nil {
		return nil, false
	}
	return o.Manifestation, true
}

// SetManifestation sets field value
func (o *AllergyIntoleranceReaction) SetManifestation(v []CodeableConcept) {
	o.Manifestation = v
}

func (o AllergyIntoleranceReaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["manifestation"] = o.Manifestation
	}
	return json.Marshal(toSerialize)
}

type NullableAllergyIntoleranceReaction struct {
	value *AllergyIntoleranceReaction
	isSet bool
}

func (v NullableAllergyIntoleranceReaction) Get() *AllergyIntoleranceReaction {
	return v.value
}

func (v *NullableAllergyIntoleranceReaction) Set(val *AllergyIntoleranceReaction) {
	v.value = val
	v.isSet = true
}

func (v NullableAllergyIntoleranceReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableAllergyIntoleranceReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllergyIntoleranceReaction(val *AllergyIntoleranceReaction) *NullableAllergyIntoleranceReaction {
	return &NullableAllergyIntoleranceReaction{value: val, isSet: true}
}

func (v NullableAllergyIntoleranceReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllergyIntoleranceReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


