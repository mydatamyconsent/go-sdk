/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/go-sdk

import (
	"encoding/json"
)

// DataConsentFinancialsDto struct for DataConsentFinancialsDto
type DataConsentFinancialsDto struct {
	Id *string `json:"id,omitempty"`
	Financials []Financial `json:"financials,omitempty"`
	ApprovedFinancials []DataConsentRequestedFinancialAccount `json:"approvedFinancials,omitempty"`
}

// NewDataConsentFinancialsDto instantiates a new DataConsentFinancialsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataConsentFinancialsDto() *DataConsentFinancialsDto {
	this := DataConsentFinancialsDto{}
	return &this
}

// NewDataConsentFinancialsDtoWithDefaults instantiates a new DataConsentFinancialsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataConsentFinancialsDtoWithDefaults() *DataConsentFinancialsDto {
	this := DataConsentFinancialsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataConsentFinancialsDto) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentFinancialsDto) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataConsentFinancialsDto) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataConsentFinancialsDto) SetId(v string) {
	o.Id = &v
}

// GetFinancials returns the Financials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentFinancialsDto) GetFinancials() []Financial {
	if o == nil  {
		var ret []Financial
		return ret
	}
	return o.Financials
}

// GetFinancialsOk returns a tuple with the Financials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentFinancialsDto) GetFinancialsOk() ([]Financial, bool) {
	if o == nil || o.Financials == nil {
		return nil, false
	}
	return o.Financials, true
}

// HasFinancials returns a boolean if a field has been set.
func (o *DataConsentFinancialsDto) HasFinancials() bool {
	if o != nil && o.Financials != nil {
		return true
	}

	return false
}

// SetFinancials gets a reference to the given []Financial and assigns it to the Financials field.
func (o *DataConsentFinancialsDto) SetFinancials(v []Financial) {
	o.Financials = v
}

// GetApprovedFinancials returns the ApprovedFinancials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentFinancialsDto) GetApprovedFinancials() []DataConsentRequestedFinancialAccount {
	if o == nil  {
		var ret []DataConsentRequestedFinancialAccount
		return ret
	}
	return o.ApprovedFinancials
}

// GetApprovedFinancialsOk returns a tuple with the ApprovedFinancials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentFinancialsDto) GetApprovedFinancialsOk() ([]DataConsentRequestedFinancialAccount, bool) {
	if o == nil || o.ApprovedFinancials == nil {
		return nil, false
	}
	return o.ApprovedFinancials, true
}

// HasApprovedFinancials returns a boolean if a field has been set.
func (o *DataConsentFinancialsDto) HasApprovedFinancials() bool {
	if o != nil && o.ApprovedFinancials != nil {
		return true
	}

	return false
}

// SetApprovedFinancials gets a reference to the given []DataConsentRequestedFinancialAccount and assigns it to the ApprovedFinancials field.
func (o *DataConsentFinancialsDto) SetApprovedFinancials(v []DataConsentRequestedFinancialAccount) {
	o.ApprovedFinancials = v
}

func (o DataConsentFinancialsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Financials != nil {
		toSerialize["financials"] = o.Financials
	}
	if o.ApprovedFinancials != nil {
		toSerialize["approvedFinancials"] = o.ApprovedFinancials
	}
	return json.Marshal(toSerialize)
}

type NullableDataConsentFinancialsDto struct {
	value *DataConsentFinancialsDto
	isSet bool
}

func (v NullableDataConsentFinancialsDto) Get() *DataConsentFinancialsDto {
	return v.value
}

func (v *NullableDataConsentFinancialsDto) Set(val *DataConsentFinancialsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataConsentFinancialsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataConsentFinancialsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataConsentFinancialsDto(val *DataConsentFinancialsDto) *NullableDataConsentFinancialsDto {
	return &NullableDataConsentFinancialsDto{value: val, isSet: true}
}

func (v NullableDataConsentFinancialsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataConsentFinancialsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


