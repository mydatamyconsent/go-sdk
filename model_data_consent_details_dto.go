/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// DataConsentDetailsDto struct for DataConsentDetailsDto
type DataConsentDetailsDto struct {
	Id *string `json:"id,omitempty"`
	Status *DataConsentStatus `json:"status,omitempty"`
	ApprovedAtUtc NullableTime `json:"approvedAtUtc,omitempty"`
	RejectedAtUtc NullableTime `json:"rejectedAtUtc,omitempty"`
	ExpiresAtUtc *time.Time `json:"expiresAtUtc,omitempty"`
	RequestedAtUtc *time.Time `json:"requestedAtUtc,omitempty"`
	Requester *DataConsentRequesterDto `json:"requester,omitempty"`
	ConsentDetails *GetConsentTemplateDetailsDto `json:"consentDetails,omitempty"`
	Identifiers []DataConsentIdentifier `json:"identifiers,omitempty"`
	ApprovedDocuments []DataConsentRequestedDocument `json:"approvedDocuments,omitempty"`
	ApprovedFinancials []DataConsentRequestedFinancialAccount `json:"approvedFinancials,omitempty"`
}

// NewDataConsentDetailsDto instantiates a new DataConsentDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataConsentDetailsDto() *DataConsentDetailsDto {
	this := DataConsentDetailsDto{}
	return &this
}

// NewDataConsentDetailsDtoWithDefaults instantiates a new DataConsentDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataConsentDetailsDtoWithDefaults() *DataConsentDetailsDto {
	this := DataConsentDetailsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataConsentDetailsDto) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentDetailsDto) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataConsentDetailsDto) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DataConsentDetailsDto) GetStatus() DataConsentStatus {
	if o == nil || o.Status == nil {
		var ret DataConsentStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentDetailsDto) GetStatusOk() (*DataConsentStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DataConsentStatus and assigns it to the Status field.
func (o *DataConsentDetailsDto) SetStatus(v DataConsentStatus) {
	o.Status = &v
}

// GetApprovedAtUtc returns the ApprovedAtUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetApprovedAtUtc() time.Time {
	if o == nil || o.ApprovedAtUtc.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ApprovedAtUtc.Get()
}

// GetApprovedAtUtcOk returns a tuple with the ApprovedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetApprovedAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApprovedAtUtc.Get(), o.ApprovedAtUtc.IsSet()
}

// HasApprovedAtUtc returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasApprovedAtUtc() bool {
	if o != nil && o.ApprovedAtUtc.IsSet() {
		return true
	}

	return false
}

// SetApprovedAtUtc gets a reference to the given NullableTime and assigns it to the ApprovedAtUtc field.
func (o *DataConsentDetailsDto) SetApprovedAtUtc(v time.Time) {
	o.ApprovedAtUtc.Set(&v)
}
// SetApprovedAtUtcNil sets the value for ApprovedAtUtc to be an explicit nil
func (o *DataConsentDetailsDto) SetApprovedAtUtcNil() {
	o.ApprovedAtUtc.Set(nil)
}

// UnsetApprovedAtUtc ensures that no value is present for ApprovedAtUtc, not even an explicit nil
func (o *DataConsentDetailsDto) UnsetApprovedAtUtc() {
	o.ApprovedAtUtc.Unset()
}

// GetRejectedAtUtc returns the RejectedAtUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetRejectedAtUtc() time.Time {
	if o == nil || o.RejectedAtUtc.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.RejectedAtUtc.Get()
}

// GetRejectedAtUtcOk returns a tuple with the RejectedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetRejectedAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RejectedAtUtc.Get(), o.RejectedAtUtc.IsSet()
}

// HasRejectedAtUtc returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasRejectedAtUtc() bool {
	if o != nil && o.RejectedAtUtc.IsSet() {
		return true
	}

	return false
}

// SetRejectedAtUtc gets a reference to the given NullableTime and assigns it to the RejectedAtUtc field.
func (o *DataConsentDetailsDto) SetRejectedAtUtc(v time.Time) {
	o.RejectedAtUtc.Set(&v)
}
// SetRejectedAtUtcNil sets the value for RejectedAtUtc to be an explicit nil
func (o *DataConsentDetailsDto) SetRejectedAtUtcNil() {
	o.RejectedAtUtc.Set(nil)
}

// UnsetRejectedAtUtc ensures that no value is present for RejectedAtUtc, not even an explicit nil
func (o *DataConsentDetailsDto) UnsetRejectedAtUtc() {
	o.RejectedAtUtc.Unset()
}

// GetExpiresAtUtc returns the ExpiresAtUtc field value if set, zero value otherwise.
func (o *DataConsentDetailsDto) GetExpiresAtUtc() time.Time {
	if o == nil || o.ExpiresAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAtUtc
}

// GetExpiresAtUtcOk returns a tuple with the ExpiresAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentDetailsDto) GetExpiresAtUtcOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAtUtc == nil {
		return nil, false
	}
	return o.ExpiresAtUtc, true
}

// HasExpiresAtUtc returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasExpiresAtUtc() bool {
	if o != nil && o.ExpiresAtUtc != nil {
		return true
	}

	return false
}

// SetExpiresAtUtc gets a reference to the given time.Time and assigns it to the ExpiresAtUtc field.
func (o *DataConsentDetailsDto) SetExpiresAtUtc(v time.Time) {
	o.ExpiresAtUtc = &v
}

// GetRequestedAtUtc returns the RequestedAtUtc field value if set, zero value otherwise.
func (o *DataConsentDetailsDto) GetRequestedAtUtc() time.Time {
	if o == nil || o.RequestedAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.RequestedAtUtc
}

// GetRequestedAtUtcOk returns a tuple with the RequestedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentDetailsDto) GetRequestedAtUtcOk() (*time.Time, bool) {
	if o == nil || o.RequestedAtUtc == nil {
		return nil, false
	}
	return o.RequestedAtUtc, true
}

// HasRequestedAtUtc returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasRequestedAtUtc() bool {
	if o != nil && o.RequestedAtUtc != nil {
		return true
	}

	return false
}

// SetRequestedAtUtc gets a reference to the given time.Time and assigns it to the RequestedAtUtc field.
func (o *DataConsentDetailsDto) SetRequestedAtUtc(v time.Time) {
	o.RequestedAtUtc = &v
}

// GetRequester returns the Requester field value if set, zero value otherwise.
func (o *DataConsentDetailsDto) GetRequester() DataConsentRequesterDto {
	if o == nil || o.Requester == nil {
		var ret DataConsentRequesterDto
		return ret
	}
	return *o.Requester
}

// GetRequesterOk returns a tuple with the Requester field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentDetailsDto) GetRequesterOk() (*DataConsentRequesterDto, bool) {
	if o == nil || o.Requester == nil {
		return nil, false
	}
	return o.Requester, true
}

// HasRequester returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasRequester() bool {
	if o != nil && o.Requester != nil {
		return true
	}

	return false
}

// SetRequester gets a reference to the given DataConsentRequesterDto and assigns it to the Requester field.
func (o *DataConsentDetailsDto) SetRequester(v DataConsentRequesterDto) {
	o.Requester = &v
}

// GetConsentDetails returns the ConsentDetails field value if set, zero value otherwise.
func (o *DataConsentDetailsDto) GetConsentDetails() GetConsentTemplateDetailsDto {
	if o == nil || o.ConsentDetails == nil {
		var ret GetConsentTemplateDetailsDto
		return ret
	}
	return *o.ConsentDetails
}

// GetConsentDetailsOk returns a tuple with the ConsentDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentDetailsDto) GetConsentDetailsOk() (*GetConsentTemplateDetailsDto, bool) {
	if o == nil || o.ConsentDetails == nil {
		return nil, false
	}
	return o.ConsentDetails, true
}

// HasConsentDetails returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasConsentDetails() bool {
	if o != nil && o.ConsentDetails != nil {
		return true
	}

	return false
}

// SetConsentDetails gets a reference to the given GetConsentTemplateDetailsDto and assigns it to the ConsentDetails field.
func (o *DataConsentDetailsDto) SetConsentDetails(v GetConsentTemplateDetailsDto) {
	o.ConsentDetails = &v
}

// GetIdentifiers returns the Identifiers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetIdentifiers() []DataConsentIdentifier {
	if o == nil  {
		var ret []DataConsentIdentifier
		return ret
	}
	return o.Identifiers
}

// GetIdentifiersOk returns a tuple with the Identifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetIdentifiersOk() ([]DataConsentIdentifier, bool) {
	if o == nil || o.Identifiers == nil {
		return nil, false
	}
	return o.Identifiers, true
}

// HasIdentifiers returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasIdentifiers() bool {
	if o != nil && o.Identifiers != nil {
		return true
	}

	return false
}

// SetIdentifiers gets a reference to the given []DataConsentIdentifier and assigns it to the Identifiers field.
func (o *DataConsentDetailsDto) SetIdentifiers(v []DataConsentIdentifier) {
	o.Identifiers = v
}

// GetApprovedDocuments returns the ApprovedDocuments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetApprovedDocuments() []DataConsentRequestedDocument {
	if o == nil  {
		var ret []DataConsentRequestedDocument
		return ret
	}
	return o.ApprovedDocuments
}

// GetApprovedDocumentsOk returns a tuple with the ApprovedDocuments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetApprovedDocumentsOk() ([]DataConsentRequestedDocument, bool) {
	if o == nil || o.ApprovedDocuments == nil {
		return nil, false
	}
	return o.ApprovedDocuments, true
}

// HasApprovedDocuments returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasApprovedDocuments() bool {
	if o != nil && o.ApprovedDocuments != nil {
		return true
	}

	return false
}

// SetApprovedDocuments gets a reference to the given []DataConsentRequestedDocument and assigns it to the ApprovedDocuments field.
func (o *DataConsentDetailsDto) SetApprovedDocuments(v []DataConsentRequestedDocument) {
	o.ApprovedDocuments = v
}

// GetApprovedFinancials returns the ApprovedFinancials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetApprovedFinancials() []DataConsentRequestedFinancialAccount {
	if o == nil  {
		var ret []DataConsentRequestedFinancialAccount
		return ret
	}
	return o.ApprovedFinancials
}

// GetApprovedFinancialsOk returns a tuple with the ApprovedFinancials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetApprovedFinancialsOk() ([]DataConsentRequestedFinancialAccount, bool) {
	if o == nil || o.ApprovedFinancials == nil {
		return nil, false
	}
	return o.ApprovedFinancials, true
}

// HasApprovedFinancials returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasApprovedFinancials() bool {
	if o != nil && o.ApprovedFinancials != nil {
		return true
	}

	return false
}

// SetApprovedFinancials gets a reference to the given []DataConsentRequestedFinancialAccount and assigns it to the ApprovedFinancials field.
func (o *DataConsentDetailsDto) SetApprovedFinancials(v []DataConsentRequestedFinancialAccount) {
	o.ApprovedFinancials = v
}

func (o DataConsentDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.ApprovedAtUtc.IsSet() {
		toSerialize["approvedAtUtc"] = o.ApprovedAtUtc.Get()
	}
	if o.RejectedAtUtc.IsSet() {
		toSerialize["rejectedAtUtc"] = o.RejectedAtUtc.Get()
	}
	if o.ExpiresAtUtc != nil {
		toSerialize["expiresAtUtc"] = o.ExpiresAtUtc
	}
	if o.RequestedAtUtc != nil {
		toSerialize["requestedAtUtc"] = o.RequestedAtUtc
	}
	if o.Requester != nil {
		toSerialize["requester"] = o.Requester
	}
	if o.ConsentDetails != nil {
		toSerialize["consentDetails"] = o.ConsentDetails
	}
	if o.Identifiers != nil {
		toSerialize["identifiers"] = o.Identifiers
	}
	if o.ApprovedDocuments != nil {
		toSerialize["approvedDocuments"] = o.ApprovedDocuments
	}
	if o.ApprovedFinancials != nil {
		toSerialize["approvedFinancials"] = o.ApprovedFinancials
	}
	return json.Marshal(toSerialize)
}

type NullableDataConsentDetailsDto struct {
	value *DataConsentDetailsDto
	isSet bool
}

func (v NullableDataConsentDetailsDto) Get() *DataConsentDetailsDto {
	return v.value
}

func (v *NullableDataConsentDetailsDto) Set(val *DataConsentDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataConsentDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataConsentDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataConsentDetailsDto(val *DataConsentDetailsDto) *NullableDataConsentDetailsDto {
	return &NullableDataConsentDetailsDto{value: val, isSet: true}
}

func (v NullableDataConsentDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataConsentDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


