/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// DataConsentDetailsDto struct for DataConsentDetailsDto
type DataConsentDetailsDto struct {
	Id string `json:"id"`
	Title NullableString `json:"title,omitempty"`
	Description NullableString `json:"description,omitempty"`
	DataLife *Life `json:"dataLife,omitempty"`
	RequesterName NullableString `json:"requesterName,omitempty"`
	RequesterLogo NullableString `json:"requesterLogo,omitempty"`
	Location NullableString `json:"location,omitempty"`
	Status *DataConsentStatus `json:"status,omitempty"`
	ApprovedAtUtc NullableTime `json:"approvedAtUtc,omitempty"`
	RejectedAtUtc NullableTime `json:"rejectedAtUtc,omitempty"`
	ExpiresAtUtc *time.Time `json:"expiresAtUtc,omitempty"`
	RequestedAtUtc *time.Time `json:"requestedAtUtc,omitempty"`
	Identifiers *JsonSchema `json:"identifiers,omitempty"`
	Documents []DataConsentDocumentDetailsDto `json:"documents,omitempty"`
	Financials NullableString `json:"financials,omitempty"`
	HealthRecords NullableString `json:"healthRecords,omitempty"`
}

// NewDataConsentDetailsDto instantiates a new DataConsentDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataConsentDetailsDto(id string) *DataConsentDetailsDto {
	this := DataConsentDetailsDto{}
	this.Id = id
	return &this
}

// NewDataConsentDetailsDtoWithDefaults instantiates a new DataConsentDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataConsentDetailsDtoWithDefaults() *DataConsentDetailsDto {
	this := DataConsentDetailsDto{}
	return &this
}

// GetId returns the Id field value
func (o *DataConsentDetailsDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DataConsentDetailsDto) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DataConsentDetailsDto) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetTitle() string {
	if o == nil || o.Title.Get() == nil {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *DataConsentDetailsDto) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *DataConsentDetailsDto) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *DataConsentDetailsDto) UnsetTitle() {
	o.Title.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *DataConsentDetailsDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *DataConsentDetailsDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *DataConsentDetailsDto) UnsetDescription() {
	o.Description.Unset()
}

// GetDataLife returns the DataLife field value if set, zero value otherwise.
func (o *DataConsentDetailsDto) GetDataLife() Life {
	if o == nil || o.DataLife == nil {
		var ret Life
		return ret
	}
	return *o.DataLife
}

// GetDataLifeOk returns a tuple with the DataLife field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentDetailsDto) GetDataLifeOk() (*Life, bool) {
	if o == nil || o.DataLife == nil {
		return nil, false
	}
	return o.DataLife, true
}

// HasDataLife returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasDataLife() bool {
	if o != nil && o.DataLife != nil {
		return true
	}

	return false
}

// SetDataLife gets a reference to the given Life and assigns it to the DataLife field.
func (o *DataConsentDetailsDto) SetDataLife(v Life) {
	o.DataLife = &v
}

// GetRequesterName returns the RequesterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetRequesterName() string {
	if o == nil || o.RequesterName.Get() == nil {
		var ret string
		return ret
	}
	return *o.RequesterName.Get()
}

// GetRequesterNameOk returns a tuple with the RequesterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetRequesterNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RequesterName.Get(), o.RequesterName.IsSet()
}

// HasRequesterName returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasRequesterName() bool {
	if o != nil && o.RequesterName.IsSet() {
		return true
	}

	return false
}

// SetRequesterName gets a reference to the given NullableString and assigns it to the RequesterName field.
func (o *DataConsentDetailsDto) SetRequesterName(v string) {
	o.RequesterName.Set(&v)
}
// SetRequesterNameNil sets the value for RequesterName to be an explicit nil
func (o *DataConsentDetailsDto) SetRequesterNameNil() {
	o.RequesterName.Set(nil)
}

// UnsetRequesterName ensures that no value is present for RequesterName, not even an explicit nil
func (o *DataConsentDetailsDto) UnsetRequesterName() {
	o.RequesterName.Unset()
}

// GetRequesterLogo returns the RequesterLogo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetRequesterLogo() string {
	if o == nil || o.RequesterLogo.Get() == nil {
		var ret string
		return ret
	}
	return *o.RequesterLogo.Get()
}

// GetRequesterLogoOk returns a tuple with the RequesterLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetRequesterLogoOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RequesterLogo.Get(), o.RequesterLogo.IsSet()
}

// HasRequesterLogo returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasRequesterLogo() bool {
	if o != nil && o.RequesterLogo.IsSet() {
		return true
	}

	return false
}

// SetRequesterLogo gets a reference to the given NullableString and assigns it to the RequesterLogo field.
func (o *DataConsentDetailsDto) SetRequesterLogo(v string) {
	o.RequesterLogo.Set(&v)
}
// SetRequesterLogoNil sets the value for RequesterLogo to be an explicit nil
func (o *DataConsentDetailsDto) SetRequesterLogoNil() {
	o.RequesterLogo.Set(nil)
}

// UnsetRequesterLogo ensures that no value is present for RequesterLogo, not even an explicit nil
func (o *DataConsentDetailsDto) UnsetRequesterLogo() {
	o.RequesterLogo.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetLocation() string {
	if o == nil || o.Location.Get() == nil {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *DataConsentDetailsDto) SetLocation(v string) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *DataConsentDetailsDto) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *DataConsentDetailsDto) UnsetLocation() {
	o.Location.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DataConsentDetailsDto) GetStatus() DataConsentStatus {
	if o == nil || o.Status == nil {
		var ret DataConsentStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentDetailsDto) GetStatusOk() (*DataConsentStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DataConsentStatus and assigns it to the Status field.
func (o *DataConsentDetailsDto) SetStatus(v DataConsentStatus) {
	o.Status = &v
}

// GetApprovedAtUtc returns the ApprovedAtUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetApprovedAtUtc() time.Time {
	if o == nil || o.ApprovedAtUtc.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ApprovedAtUtc.Get()
}

// GetApprovedAtUtcOk returns a tuple with the ApprovedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetApprovedAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApprovedAtUtc.Get(), o.ApprovedAtUtc.IsSet()
}

// HasApprovedAtUtc returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasApprovedAtUtc() bool {
	if o != nil && o.ApprovedAtUtc.IsSet() {
		return true
	}

	return false
}

// SetApprovedAtUtc gets a reference to the given NullableTime and assigns it to the ApprovedAtUtc field.
func (o *DataConsentDetailsDto) SetApprovedAtUtc(v time.Time) {
	o.ApprovedAtUtc.Set(&v)
}
// SetApprovedAtUtcNil sets the value for ApprovedAtUtc to be an explicit nil
func (o *DataConsentDetailsDto) SetApprovedAtUtcNil() {
	o.ApprovedAtUtc.Set(nil)
}

// UnsetApprovedAtUtc ensures that no value is present for ApprovedAtUtc, not even an explicit nil
func (o *DataConsentDetailsDto) UnsetApprovedAtUtc() {
	o.ApprovedAtUtc.Unset()
}

// GetRejectedAtUtc returns the RejectedAtUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetRejectedAtUtc() time.Time {
	if o == nil || o.RejectedAtUtc.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.RejectedAtUtc.Get()
}

// GetRejectedAtUtcOk returns a tuple with the RejectedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetRejectedAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RejectedAtUtc.Get(), o.RejectedAtUtc.IsSet()
}

// HasRejectedAtUtc returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasRejectedAtUtc() bool {
	if o != nil && o.RejectedAtUtc.IsSet() {
		return true
	}

	return false
}

// SetRejectedAtUtc gets a reference to the given NullableTime and assigns it to the RejectedAtUtc field.
func (o *DataConsentDetailsDto) SetRejectedAtUtc(v time.Time) {
	o.RejectedAtUtc.Set(&v)
}
// SetRejectedAtUtcNil sets the value for RejectedAtUtc to be an explicit nil
func (o *DataConsentDetailsDto) SetRejectedAtUtcNil() {
	o.RejectedAtUtc.Set(nil)
}

// UnsetRejectedAtUtc ensures that no value is present for RejectedAtUtc, not even an explicit nil
func (o *DataConsentDetailsDto) UnsetRejectedAtUtc() {
	o.RejectedAtUtc.Unset()
}

// GetExpiresAtUtc returns the ExpiresAtUtc field value if set, zero value otherwise.
func (o *DataConsentDetailsDto) GetExpiresAtUtc() time.Time {
	if o == nil || o.ExpiresAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAtUtc
}

// GetExpiresAtUtcOk returns a tuple with the ExpiresAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentDetailsDto) GetExpiresAtUtcOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAtUtc == nil {
		return nil, false
	}
	return o.ExpiresAtUtc, true
}

// HasExpiresAtUtc returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasExpiresAtUtc() bool {
	if o != nil && o.ExpiresAtUtc != nil {
		return true
	}

	return false
}

// SetExpiresAtUtc gets a reference to the given time.Time and assigns it to the ExpiresAtUtc field.
func (o *DataConsentDetailsDto) SetExpiresAtUtc(v time.Time) {
	o.ExpiresAtUtc = &v
}

// GetRequestedAtUtc returns the RequestedAtUtc field value if set, zero value otherwise.
func (o *DataConsentDetailsDto) GetRequestedAtUtc() time.Time {
	if o == nil || o.RequestedAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.RequestedAtUtc
}

// GetRequestedAtUtcOk returns a tuple with the RequestedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentDetailsDto) GetRequestedAtUtcOk() (*time.Time, bool) {
	if o == nil || o.RequestedAtUtc == nil {
		return nil, false
	}
	return o.RequestedAtUtc, true
}

// HasRequestedAtUtc returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasRequestedAtUtc() bool {
	if o != nil && o.RequestedAtUtc != nil {
		return true
	}

	return false
}

// SetRequestedAtUtc gets a reference to the given time.Time and assigns it to the RequestedAtUtc field.
func (o *DataConsentDetailsDto) SetRequestedAtUtc(v time.Time) {
	o.RequestedAtUtc = &v
}

// GetIdentifiers returns the Identifiers field value if set, zero value otherwise.
func (o *DataConsentDetailsDto) GetIdentifiers() JsonSchema {
	if o == nil || o.Identifiers == nil {
		var ret JsonSchema
		return ret
	}
	return *o.Identifiers
}

// GetIdentifiersOk returns a tuple with the Identifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConsentDetailsDto) GetIdentifiersOk() (*JsonSchema, bool) {
	if o == nil || o.Identifiers == nil {
		return nil, false
	}
	return o.Identifiers, true
}

// HasIdentifiers returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasIdentifiers() bool {
	if o != nil && o.Identifiers != nil {
		return true
	}

	return false
}

// SetIdentifiers gets a reference to the given JsonSchema and assigns it to the Identifiers field.
func (o *DataConsentDetailsDto) SetIdentifiers(v JsonSchema) {
	o.Identifiers = &v
}

// GetDocuments returns the Documents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetDocuments() []DataConsentDocumentDetailsDto {
	if o == nil  {
		var ret []DataConsentDocumentDetailsDto
		return ret
	}
	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetDocumentsOk() ([]DataConsentDocumentDetailsDto, bool) {
	if o == nil || o.Documents == nil {
		return nil, false
	}
	return o.Documents, true
}

// HasDocuments returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasDocuments() bool {
	if o != nil && o.Documents != nil {
		return true
	}

	return false
}

// SetDocuments gets a reference to the given []DataConsentDocumentDetailsDto and assigns it to the Documents field.
func (o *DataConsentDetailsDto) SetDocuments(v []DataConsentDocumentDetailsDto) {
	o.Documents = v
}

// GetFinancials returns the Financials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetFinancials() string {
	if o == nil || o.Financials.Get() == nil {
		var ret string
		return ret
	}
	return *o.Financials.Get()
}

// GetFinancialsOk returns a tuple with the Financials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetFinancialsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Financials.Get(), o.Financials.IsSet()
}

// HasFinancials returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasFinancials() bool {
	if o != nil && o.Financials.IsSet() {
		return true
	}

	return false
}

// SetFinancials gets a reference to the given NullableString and assigns it to the Financials field.
func (o *DataConsentDetailsDto) SetFinancials(v string) {
	o.Financials.Set(&v)
}
// SetFinancialsNil sets the value for Financials to be an explicit nil
func (o *DataConsentDetailsDto) SetFinancialsNil() {
	o.Financials.Set(nil)
}

// UnsetFinancials ensures that no value is present for Financials, not even an explicit nil
func (o *DataConsentDetailsDto) UnsetFinancials() {
	o.Financials.Unset()
}

// GetHealthRecords returns the HealthRecords field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataConsentDetailsDto) GetHealthRecords() string {
	if o == nil || o.HealthRecords.Get() == nil {
		var ret string
		return ret
	}
	return *o.HealthRecords.Get()
}

// GetHealthRecordsOk returns a tuple with the HealthRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataConsentDetailsDto) GetHealthRecordsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HealthRecords.Get(), o.HealthRecords.IsSet()
}

// HasHealthRecords returns a boolean if a field has been set.
func (o *DataConsentDetailsDto) HasHealthRecords() bool {
	if o != nil && o.HealthRecords.IsSet() {
		return true
	}

	return false
}

// SetHealthRecords gets a reference to the given NullableString and assigns it to the HealthRecords field.
func (o *DataConsentDetailsDto) SetHealthRecords(v string) {
	o.HealthRecords.Set(&v)
}
// SetHealthRecordsNil sets the value for HealthRecords to be an explicit nil
func (o *DataConsentDetailsDto) SetHealthRecordsNil() {
	o.HealthRecords.Set(nil)
}

// UnsetHealthRecords ensures that no value is present for HealthRecords, not even an explicit nil
func (o *DataConsentDetailsDto) UnsetHealthRecords() {
	o.HealthRecords.Unset()
}

func (o DataConsentDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.DataLife != nil {
		toSerialize["dataLife"] = o.DataLife
	}
	if o.RequesterName.IsSet() {
		toSerialize["requesterName"] = o.RequesterName.Get()
	}
	if o.RequesterLogo.IsSet() {
		toSerialize["requesterLogo"] = o.RequesterLogo.Get()
	}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.ApprovedAtUtc.IsSet() {
		toSerialize["approvedAtUtc"] = o.ApprovedAtUtc.Get()
	}
	if o.RejectedAtUtc.IsSet() {
		toSerialize["rejectedAtUtc"] = o.RejectedAtUtc.Get()
	}
	if o.ExpiresAtUtc != nil {
		toSerialize["expiresAtUtc"] = o.ExpiresAtUtc
	}
	if o.RequestedAtUtc != nil {
		toSerialize["requestedAtUtc"] = o.RequestedAtUtc
	}
	if o.Identifiers != nil {
		toSerialize["identifiers"] = o.Identifiers
	}
	if o.Documents != nil {
		toSerialize["documents"] = o.Documents
	}
	if o.Financials.IsSet() {
		toSerialize["financials"] = o.Financials.Get()
	}
	if o.HealthRecords.IsSet() {
		toSerialize["healthRecords"] = o.HealthRecords.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDataConsentDetailsDto struct {
	value *DataConsentDetailsDto
	isSet bool
}

func (v NullableDataConsentDetailsDto) Get() *DataConsentDetailsDto {
	return v.value
}

func (v *NullableDataConsentDetailsDto) Set(val *DataConsentDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDataConsentDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDataConsentDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataConsentDetailsDto(val *DataConsentDetailsDto) *NullableDataConsentDetailsDto {
	return &NullableDataConsentDetailsDto{value: val, isSet: true}
}

func (v NullableDataConsentDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataConsentDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


