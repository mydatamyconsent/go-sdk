/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// Holders struct for Holders
type Holders struct {
	Holder Holder `json:"holder"`
	Type HoldersType `json:"type"`
}

// NewHolders instantiates a new Holders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHolders(holder Holder, type_ HoldersType) *Holders {
	this := Holders{}
	this.Holder = holder
	this.Type = type_
	return &this
}

// NewHoldersWithDefaults instantiates a new Holders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHoldersWithDefaults() *Holders {
	this := Holders{}
	return &this
}

// GetHolder returns the Holder field value
func (o *Holders) GetHolder() Holder {
	if o == nil {
		var ret Holder
		return ret
	}

	return o.Holder
}

// GetHolderOk returns a tuple with the Holder field value
// and a boolean to check if the value has been set.
func (o *Holders) GetHolderOk() (*Holder, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Holder, true
}

// SetHolder sets field value
func (o *Holders) SetHolder(v Holder) {
	o.Holder = v
}

// GetType returns the Type field value
func (o *Holders) GetType() HoldersType {
	if o == nil {
		var ret HoldersType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Holders) GetTypeOk() (*HoldersType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Holders) SetType(v HoldersType) {
	o.Type = v
}

func (o Holders) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["holder"] = o.Holder
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableHolders struct {
	value *Holders
	isSet bool
}

func (v NullableHolders) Get() *Holders {
	return v.value
}

func (v *NullableHolders) Set(val *Holders) {
	v.value = val
	v.isSet = true
}

func (v NullableHolders) IsSet() bool {
	return v.isSet
}

func (v *NullableHolders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHolders(val *Holders) *NullableHolders {
	return &NullableHolders{value: val, isSet: true}
}

func (v NullableHolders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHolders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


