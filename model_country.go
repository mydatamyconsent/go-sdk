/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
)

// Country struct for Country
type Country struct {
	Id *string `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Iso3 NullableString `json:"iso3,omitempty"`
	Iso2 NullableString `json:"iso2,omitempty"`
	PhoneCode NullableString `json:"phoneCode,omitempty"`
	Capital NullableString `json:"capital,omitempty"`
	CurrencyCode NullableString `json:"currencyCode,omitempty"`
	CurrencySymbol NullableString `json:"currencySymbol,omitempty"`
	FlagUrl NullableString `json:"flagUrl,omitempty"`
	States []CountryState `json:"states,omitempty"`
}

// NewCountry instantiates a new Country object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountry() *Country {
	this := Country{}
	return &this
}

// NewCountryWithDefaults instantiates a new Country object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryWithDefaults() *Country {
	this := Country{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Country) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Country) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Country) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Country) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Country) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Country) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Country) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Country) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Country) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Country) UnsetName() {
	o.Name.Unset()
}

// GetIso3 returns the Iso3 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Country) GetIso3() string {
	if o == nil || o.Iso3.Get() == nil {
		var ret string
		return ret
	}
	return *o.Iso3.Get()
}

// GetIso3Ok returns a tuple with the Iso3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Country) GetIso3Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Iso3.Get(), o.Iso3.IsSet()
}

// HasIso3 returns a boolean if a field has been set.
func (o *Country) HasIso3() bool {
	if o != nil && o.Iso3.IsSet() {
		return true
	}

	return false
}

// SetIso3 gets a reference to the given NullableString and assigns it to the Iso3 field.
func (o *Country) SetIso3(v string) {
	o.Iso3.Set(&v)
}
// SetIso3Nil sets the value for Iso3 to be an explicit nil
func (o *Country) SetIso3Nil() {
	o.Iso3.Set(nil)
}

// UnsetIso3 ensures that no value is present for Iso3, not even an explicit nil
func (o *Country) UnsetIso3() {
	o.Iso3.Unset()
}

// GetIso2 returns the Iso2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Country) GetIso2() string {
	if o == nil || o.Iso2.Get() == nil {
		var ret string
		return ret
	}
	return *o.Iso2.Get()
}

// GetIso2Ok returns a tuple with the Iso2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Country) GetIso2Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Iso2.Get(), o.Iso2.IsSet()
}

// HasIso2 returns a boolean if a field has been set.
func (o *Country) HasIso2() bool {
	if o != nil && o.Iso2.IsSet() {
		return true
	}

	return false
}

// SetIso2 gets a reference to the given NullableString and assigns it to the Iso2 field.
func (o *Country) SetIso2(v string) {
	o.Iso2.Set(&v)
}
// SetIso2Nil sets the value for Iso2 to be an explicit nil
func (o *Country) SetIso2Nil() {
	o.Iso2.Set(nil)
}

// UnsetIso2 ensures that no value is present for Iso2, not even an explicit nil
func (o *Country) UnsetIso2() {
	o.Iso2.Unset()
}

// GetPhoneCode returns the PhoneCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Country) GetPhoneCode() string {
	if o == nil || o.PhoneCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.PhoneCode.Get()
}

// GetPhoneCodeOk returns a tuple with the PhoneCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Country) GetPhoneCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhoneCode.Get(), o.PhoneCode.IsSet()
}

// HasPhoneCode returns a boolean if a field has been set.
func (o *Country) HasPhoneCode() bool {
	if o != nil && o.PhoneCode.IsSet() {
		return true
	}

	return false
}

// SetPhoneCode gets a reference to the given NullableString and assigns it to the PhoneCode field.
func (o *Country) SetPhoneCode(v string) {
	o.PhoneCode.Set(&v)
}
// SetPhoneCodeNil sets the value for PhoneCode to be an explicit nil
func (o *Country) SetPhoneCodeNil() {
	o.PhoneCode.Set(nil)
}

// UnsetPhoneCode ensures that no value is present for PhoneCode, not even an explicit nil
func (o *Country) UnsetPhoneCode() {
	o.PhoneCode.Unset()
}

// GetCapital returns the Capital field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Country) GetCapital() string {
	if o == nil || o.Capital.Get() == nil {
		var ret string
		return ret
	}
	return *o.Capital.Get()
}

// GetCapitalOk returns a tuple with the Capital field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Country) GetCapitalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Capital.Get(), o.Capital.IsSet()
}

// HasCapital returns a boolean if a field has been set.
func (o *Country) HasCapital() bool {
	if o != nil && o.Capital.IsSet() {
		return true
	}

	return false
}

// SetCapital gets a reference to the given NullableString and assigns it to the Capital field.
func (o *Country) SetCapital(v string) {
	o.Capital.Set(&v)
}
// SetCapitalNil sets the value for Capital to be an explicit nil
func (o *Country) SetCapitalNil() {
	o.Capital.Set(nil)
}

// UnsetCapital ensures that no value is present for Capital, not even an explicit nil
func (o *Country) UnsetCapital() {
	o.Capital.Unset()
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Country) GetCurrencyCode() string {
	if o == nil || o.CurrencyCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrencyCode.Get()
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Country) GetCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrencyCode.Get(), o.CurrencyCode.IsSet()
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *Country) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode.IsSet() {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given NullableString and assigns it to the CurrencyCode field.
func (o *Country) SetCurrencyCode(v string) {
	o.CurrencyCode.Set(&v)
}
// SetCurrencyCodeNil sets the value for CurrencyCode to be an explicit nil
func (o *Country) SetCurrencyCodeNil() {
	o.CurrencyCode.Set(nil)
}

// UnsetCurrencyCode ensures that no value is present for CurrencyCode, not even an explicit nil
func (o *Country) UnsetCurrencyCode() {
	o.CurrencyCode.Unset()
}

// GetCurrencySymbol returns the CurrencySymbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Country) GetCurrencySymbol() string {
	if o == nil || o.CurrencySymbol.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrencySymbol.Get()
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Country) GetCurrencySymbolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrencySymbol.Get(), o.CurrencySymbol.IsSet()
}

// HasCurrencySymbol returns a boolean if a field has been set.
func (o *Country) HasCurrencySymbol() bool {
	if o != nil && o.CurrencySymbol.IsSet() {
		return true
	}

	return false
}

// SetCurrencySymbol gets a reference to the given NullableString and assigns it to the CurrencySymbol field.
func (o *Country) SetCurrencySymbol(v string) {
	o.CurrencySymbol.Set(&v)
}
// SetCurrencySymbolNil sets the value for CurrencySymbol to be an explicit nil
func (o *Country) SetCurrencySymbolNil() {
	o.CurrencySymbol.Set(nil)
}

// UnsetCurrencySymbol ensures that no value is present for CurrencySymbol, not even an explicit nil
func (o *Country) UnsetCurrencySymbol() {
	o.CurrencySymbol.Unset()
}

// GetFlagUrl returns the FlagUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Country) GetFlagUrl() string {
	if o == nil || o.FlagUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.FlagUrl.Get()
}

// GetFlagUrlOk returns a tuple with the FlagUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Country) GetFlagUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FlagUrl.Get(), o.FlagUrl.IsSet()
}

// HasFlagUrl returns a boolean if a field has been set.
func (o *Country) HasFlagUrl() bool {
	if o != nil && o.FlagUrl.IsSet() {
		return true
	}

	return false
}

// SetFlagUrl gets a reference to the given NullableString and assigns it to the FlagUrl field.
func (o *Country) SetFlagUrl(v string) {
	o.FlagUrl.Set(&v)
}
// SetFlagUrlNil sets the value for FlagUrl to be an explicit nil
func (o *Country) SetFlagUrlNil() {
	o.FlagUrl.Set(nil)
}

// UnsetFlagUrl ensures that no value is present for FlagUrl, not even an explicit nil
func (o *Country) UnsetFlagUrl() {
	o.FlagUrl.Unset()
}

// GetStates returns the States field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Country) GetStates() []CountryState {
	if o == nil  {
		var ret []CountryState
		return ret
	}
	return o.States
}

// GetStatesOk returns a tuple with the States field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Country) GetStatesOk() (*[]CountryState, bool) {
	if o == nil || o.States == nil {
		return nil, false
	}
	return &o.States, true
}

// HasStates returns a boolean if a field has been set.
func (o *Country) HasStates() bool {
	if o != nil && o.States != nil {
		return true
	}

	return false
}

// SetStates gets a reference to the given []CountryState and assigns it to the States field.
func (o *Country) SetStates(v []CountryState) {
	o.States = v
}

func (o Country) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Iso3.IsSet() {
		toSerialize["iso3"] = o.Iso3.Get()
	}
	if o.Iso2.IsSet() {
		toSerialize["iso2"] = o.Iso2.Get()
	}
	if o.PhoneCode.IsSet() {
		toSerialize["phoneCode"] = o.PhoneCode.Get()
	}
	if o.Capital.IsSet() {
		toSerialize["capital"] = o.Capital.Get()
	}
	if o.CurrencyCode.IsSet() {
		toSerialize["currencyCode"] = o.CurrencyCode.Get()
	}
	if o.CurrencySymbol.IsSet() {
		toSerialize["currencySymbol"] = o.CurrencySymbol.Get()
	}
	if o.FlagUrl.IsSet() {
		toSerialize["flagUrl"] = o.FlagUrl.Get()
	}
	if o.States != nil {
		toSerialize["states"] = o.States
	}
	return json.Marshal(toSerialize)
}

type NullableCountry struct {
	value *Country
	isSet bool
}

func (v NullableCountry) Get() *Country {
	return v.value
}

func (v *NullableCountry) Set(val *Country) {
	v.value = val
	v.isSet = true
}

func (v NullableCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountry(val *Country) *NullableCountry {
	return &NullableCountry{value: val, isSet: true}
}

func (v NullableCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


