/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// DocumentTypeDetailsDto struct for DocumentTypeDetailsDto
type DocumentTypeDetailsDto struct {
	Id string `json:"id"`
	OrganizationId string `json:"organizationId"`
	CategoryType DocumentCategoryType `json:"categoryType"`
	SubCategoryType DocumentSubCategoryType `json:"subCategoryType"`
	DocumentTypeCategoryId string `json:"documentTypeCategoryId"`
	Name string `json:"name"`
	Slug string `json:"slug"`
	Description NullableString `json:"description,omitempty"`
	LogoUrl string `json:"logoUrl"`
	CountryIso2 string `json:"countryIso2"`
	CountryId string `json:"countryId"`
	SearchServiceId NullableString `json:"searchServiceId,omitempty"`
	RepositoryServiceId NullableString `json:"repositoryServiceId,omitempty"`
	SupportedEntityType SupportedEntityType `json:"supportedEntityType"`
	AddedBy string `json:"addedBy"`
	PayableAmount NullableFloat64 `json:"payableAmount,omitempty"`
	ApprovedAtUtc NullableTime `json:"approvedAtUtc,omitempty"`
}

// NewDocumentTypeDetailsDto instantiates a new DocumentTypeDetailsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentTypeDetailsDto(id string, organizationId string, categoryType DocumentCategoryType, subCategoryType DocumentSubCategoryType, documentTypeCategoryId string, name string, slug string, logoUrl string, countryIso2 string, countryId string, supportedEntityType SupportedEntityType, addedBy string) *DocumentTypeDetailsDto {
	this := DocumentTypeDetailsDto{}
	this.Id = id
	this.OrganizationId = organizationId
	this.CategoryType = categoryType
	this.SubCategoryType = subCategoryType
	this.DocumentTypeCategoryId = documentTypeCategoryId
	this.Name = name
	this.Slug = slug
	this.LogoUrl = logoUrl
	this.CountryIso2 = countryIso2
	this.CountryId = countryId
	this.SupportedEntityType = supportedEntityType
	this.AddedBy = addedBy
	return &this
}

// NewDocumentTypeDetailsDtoWithDefaults instantiates a new DocumentTypeDetailsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentTypeDetailsDtoWithDefaults() *DocumentTypeDetailsDto {
	this := DocumentTypeDetailsDto{}
	return &this
}

// GetId returns the Id field value
func (o *DocumentTypeDetailsDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DocumentTypeDetailsDto) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DocumentTypeDetailsDto) SetId(v string) {
	o.Id = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *DocumentTypeDetailsDto) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *DocumentTypeDetailsDto) GetOrganizationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *DocumentTypeDetailsDto) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetCategoryType returns the CategoryType field value
func (o *DocumentTypeDetailsDto) GetCategoryType() DocumentCategoryType {
	if o == nil {
		var ret DocumentCategoryType
		return ret
	}

	return o.CategoryType
}

// GetCategoryTypeOk returns a tuple with the CategoryType field value
// and a boolean to check if the value has been set.
func (o *DocumentTypeDetailsDto) GetCategoryTypeOk() (*DocumentCategoryType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CategoryType, true
}

// SetCategoryType sets field value
func (o *DocumentTypeDetailsDto) SetCategoryType(v DocumentCategoryType) {
	o.CategoryType = v
}

// GetSubCategoryType returns the SubCategoryType field value
func (o *DocumentTypeDetailsDto) GetSubCategoryType() DocumentSubCategoryType {
	if o == nil {
		var ret DocumentSubCategoryType
		return ret
	}

	return o.SubCategoryType
}

// GetSubCategoryTypeOk returns a tuple with the SubCategoryType field value
// and a boolean to check if the value has been set.
func (o *DocumentTypeDetailsDto) GetSubCategoryTypeOk() (*DocumentSubCategoryType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SubCategoryType, true
}

// SetSubCategoryType sets field value
func (o *DocumentTypeDetailsDto) SetSubCategoryType(v DocumentSubCategoryType) {
	o.SubCategoryType = v
}

// GetDocumentTypeCategoryId returns the DocumentTypeCategoryId field value
func (o *DocumentTypeDetailsDto) GetDocumentTypeCategoryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentTypeCategoryId
}

// GetDocumentTypeCategoryIdOk returns a tuple with the DocumentTypeCategoryId field value
// and a boolean to check if the value has been set.
func (o *DocumentTypeDetailsDto) GetDocumentTypeCategoryIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DocumentTypeCategoryId, true
}

// SetDocumentTypeCategoryId sets field value
func (o *DocumentTypeDetailsDto) SetDocumentTypeCategoryId(v string) {
	o.DocumentTypeCategoryId = v
}

// GetName returns the Name field value
func (o *DocumentTypeDetailsDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DocumentTypeDetailsDto) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DocumentTypeDetailsDto) SetName(v string) {
	o.Name = v
}

// GetSlug returns the Slug field value
func (o *DocumentTypeDetailsDto) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *DocumentTypeDetailsDto) GetSlugOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *DocumentTypeDetailsDto) SetSlug(v string) {
	o.Slug = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentTypeDetailsDto) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentTypeDetailsDto) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *DocumentTypeDetailsDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *DocumentTypeDetailsDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *DocumentTypeDetailsDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *DocumentTypeDetailsDto) UnsetDescription() {
	o.Description.Unset()
}

// GetLogoUrl returns the LogoUrl field value
func (o *DocumentTypeDetailsDto) GetLogoUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value
// and a boolean to check if the value has been set.
func (o *DocumentTypeDetailsDto) GetLogoUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LogoUrl, true
}

// SetLogoUrl sets field value
func (o *DocumentTypeDetailsDto) SetLogoUrl(v string) {
	o.LogoUrl = v
}

// GetCountryIso2 returns the CountryIso2 field value
func (o *DocumentTypeDetailsDto) GetCountryIso2() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryIso2
}

// GetCountryIso2Ok returns a tuple with the CountryIso2 field value
// and a boolean to check if the value has been set.
func (o *DocumentTypeDetailsDto) GetCountryIso2Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CountryIso2, true
}

// SetCountryIso2 sets field value
func (o *DocumentTypeDetailsDto) SetCountryIso2(v string) {
	o.CountryIso2 = v
}

// GetCountryId returns the CountryId field value
func (o *DocumentTypeDetailsDto) GetCountryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value
// and a boolean to check if the value has been set.
func (o *DocumentTypeDetailsDto) GetCountryIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CountryId, true
}

// SetCountryId sets field value
func (o *DocumentTypeDetailsDto) SetCountryId(v string) {
	o.CountryId = v
}

// GetSearchServiceId returns the SearchServiceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentTypeDetailsDto) GetSearchServiceId() string {
	if o == nil || o.SearchServiceId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SearchServiceId.Get()
}

// GetSearchServiceIdOk returns a tuple with the SearchServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentTypeDetailsDto) GetSearchServiceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SearchServiceId.Get(), o.SearchServiceId.IsSet()
}

// HasSearchServiceId returns a boolean if a field has been set.
func (o *DocumentTypeDetailsDto) HasSearchServiceId() bool {
	if o != nil && o.SearchServiceId.IsSet() {
		return true
	}

	return false
}

// SetSearchServiceId gets a reference to the given NullableString and assigns it to the SearchServiceId field.
func (o *DocumentTypeDetailsDto) SetSearchServiceId(v string) {
	o.SearchServiceId.Set(&v)
}
// SetSearchServiceIdNil sets the value for SearchServiceId to be an explicit nil
func (o *DocumentTypeDetailsDto) SetSearchServiceIdNil() {
	o.SearchServiceId.Set(nil)
}

// UnsetSearchServiceId ensures that no value is present for SearchServiceId, not even an explicit nil
func (o *DocumentTypeDetailsDto) UnsetSearchServiceId() {
	o.SearchServiceId.Unset()
}

// GetRepositoryServiceId returns the RepositoryServiceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentTypeDetailsDto) GetRepositoryServiceId() string {
	if o == nil || o.RepositoryServiceId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RepositoryServiceId.Get()
}

// GetRepositoryServiceIdOk returns a tuple with the RepositoryServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentTypeDetailsDto) GetRepositoryServiceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RepositoryServiceId.Get(), o.RepositoryServiceId.IsSet()
}

// HasRepositoryServiceId returns a boolean if a field has been set.
func (o *DocumentTypeDetailsDto) HasRepositoryServiceId() bool {
	if o != nil && o.RepositoryServiceId.IsSet() {
		return true
	}

	return false
}

// SetRepositoryServiceId gets a reference to the given NullableString and assigns it to the RepositoryServiceId field.
func (o *DocumentTypeDetailsDto) SetRepositoryServiceId(v string) {
	o.RepositoryServiceId.Set(&v)
}
// SetRepositoryServiceIdNil sets the value for RepositoryServiceId to be an explicit nil
func (o *DocumentTypeDetailsDto) SetRepositoryServiceIdNil() {
	o.RepositoryServiceId.Set(nil)
}

// UnsetRepositoryServiceId ensures that no value is present for RepositoryServiceId, not even an explicit nil
func (o *DocumentTypeDetailsDto) UnsetRepositoryServiceId() {
	o.RepositoryServiceId.Unset()
}

// GetSupportedEntityType returns the SupportedEntityType field value
func (o *DocumentTypeDetailsDto) GetSupportedEntityType() SupportedEntityType {
	if o == nil {
		var ret SupportedEntityType
		return ret
	}

	return o.SupportedEntityType
}

// GetSupportedEntityTypeOk returns a tuple with the SupportedEntityType field value
// and a boolean to check if the value has been set.
func (o *DocumentTypeDetailsDto) GetSupportedEntityTypeOk() (*SupportedEntityType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SupportedEntityType, true
}

// SetSupportedEntityType sets field value
func (o *DocumentTypeDetailsDto) SetSupportedEntityType(v SupportedEntityType) {
	o.SupportedEntityType = v
}

// GetAddedBy returns the AddedBy field value
func (o *DocumentTypeDetailsDto) GetAddedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddedBy
}

// GetAddedByOk returns a tuple with the AddedBy field value
// and a boolean to check if the value has been set.
func (o *DocumentTypeDetailsDto) GetAddedByOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AddedBy, true
}

// SetAddedBy sets field value
func (o *DocumentTypeDetailsDto) SetAddedBy(v string) {
	o.AddedBy = v
}

// GetPayableAmount returns the PayableAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentTypeDetailsDto) GetPayableAmount() float64 {
	if o == nil || o.PayableAmount.Get() == nil {
		var ret float64
		return ret
	}
	return *o.PayableAmount.Get()
}

// GetPayableAmountOk returns a tuple with the PayableAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentTypeDetailsDto) GetPayableAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PayableAmount.Get(), o.PayableAmount.IsSet()
}

// HasPayableAmount returns a boolean if a field has been set.
func (o *DocumentTypeDetailsDto) HasPayableAmount() bool {
	if o != nil && o.PayableAmount.IsSet() {
		return true
	}

	return false
}

// SetPayableAmount gets a reference to the given NullableFloat64 and assigns it to the PayableAmount field.
func (o *DocumentTypeDetailsDto) SetPayableAmount(v float64) {
	o.PayableAmount.Set(&v)
}
// SetPayableAmountNil sets the value for PayableAmount to be an explicit nil
func (o *DocumentTypeDetailsDto) SetPayableAmountNil() {
	o.PayableAmount.Set(nil)
}

// UnsetPayableAmount ensures that no value is present for PayableAmount, not even an explicit nil
func (o *DocumentTypeDetailsDto) UnsetPayableAmount() {
	o.PayableAmount.Unset()
}

// GetApprovedAtUtc returns the ApprovedAtUtc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentTypeDetailsDto) GetApprovedAtUtc() time.Time {
	if o == nil || o.ApprovedAtUtc.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ApprovedAtUtc.Get()
}

// GetApprovedAtUtcOk returns a tuple with the ApprovedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentTypeDetailsDto) GetApprovedAtUtcOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApprovedAtUtc.Get(), o.ApprovedAtUtc.IsSet()
}

// HasApprovedAtUtc returns a boolean if a field has been set.
func (o *DocumentTypeDetailsDto) HasApprovedAtUtc() bool {
	if o != nil && o.ApprovedAtUtc.IsSet() {
		return true
	}

	return false
}

// SetApprovedAtUtc gets a reference to the given NullableTime and assigns it to the ApprovedAtUtc field.
func (o *DocumentTypeDetailsDto) SetApprovedAtUtc(v time.Time) {
	o.ApprovedAtUtc.Set(&v)
}
// SetApprovedAtUtcNil sets the value for ApprovedAtUtc to be an explicit nil
func (o *DocumentTypeDetailsDto) SetApprovedAtUtcNil() {
	o.ApprovedAtUtc.Set(nil)
}

// UnsetApprovedAtUtc ensures that no value is present for ApprovedAtUtc, not even an explicit nil
func (o *DocumentTypeDetailsDto) UnsetApprovedAtUtc() {
	o.ApprovedAtUtc.Unset()
}

func (o DocumentTypeDetailsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if true {
		toSerialize["categoryType"] = o.CategoryType
	}
	if true {
		toSerialize["subCategoryType"] = o.SubCategoryType
	}
	if true {
		toSerialize["documentTypeCategoryId"] = o.DocumentTypeCategoryId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["slug"] = o.Slug
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if true {
		toSerialize["logoUrl"] = o.LogoUrl
	}
	if true {
		toSerialize["countryIso2"] = o.CountryIso2
	}
	if true {
		toSerialize["countryId"] = o.CountryId
	}
	if o.SearchServiceId.IsSet() {
		toSerialize["searchServiceId"] = o.SearchServiceId.Get()
	}
	if o.RepositoryServiceId.IsSet() {
		toSerialize["repositoryServiceId"] = o.RepositoryServiceId.Get()
	}
	if true {
		toSerialize["supportedEntityType"] = o.SupportedEntityType
	}
	if true {
		toSerialize["addedBy"] = o.AddedBy
	}
	if o.PayableAmount.IsSet() {
		toSerialize["payableAmount"] = o.PayableAmount.Get()
	}
	if o.ApprovedAtUtc.IsSet() {
		toSerialize["approvedAtUtc"] = o.ApprovedAtUtc.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentTypeDetailsDto struct {
	value *DocumentTypeDetailsDto
	isSet bool
}

func (v NullableDocumentTypeDetailsDto) Get() *DocumentTypeDetailsDto {
	return v.value
}

func (v *NullableDocumentTypeDetailsDto) Set(val *DocumentTypeDetailsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentTypeDetailsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentTypeDetailsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentTypeDetailsDto(val *DocumentTypeDetailsDto) *NullableDocumentTypeDetailsDto {
	return &NullableDocumentTypeDetailsDto{value: val, isSet: true}
}

func (v NullableDocumentTypeDetailsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentTypeDetailsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


