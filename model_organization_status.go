/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"fmt"
)

// OrganizationStatus the model 'OrganizationStatus'
type OrganizationStatus string

// List of OrganizationStatus
const (
	ORGANIZATION_CREATED OrganizationStatus = "OrganizationCreated"
	CONTACT_DETAILS_UPDATED OrganizationStatus = "ContactDetailsUpdated"
	OVERVIEW_UPDATED OrganizationStatus = "OverviewUpdated"
	ADDRESS_UPDATED OrganizationStatus = "AddressUpdated"
	BANK_ACCOUNTS_UPDATED OrganizationStatus = "BankAccountsUpdated"
	SIGN_UP_COMPLETED OrganizationStatus = "SignUpCompleted"
)

var allowedOrganizationStatusEnumValues = []OrganizationStatus{
	"OrganizationCreated",
	"ContactDetailsUpdated",
	"OverviewUpdated",
	"AddressUpdated",
	"BankAccountsUpdated",
	"SignUpCompleted",
}

func (v *OrganizationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrganizationStatus(value)
	for _, existing := range allowedOrganizationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrganizationStatus", value)
}

// NewOrganizationStatusFromValue returns a pointer to a valid OrganizationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrganizationStatusFromValue(v string) (*OrganizationStatus, error) {
	ev := OrganizationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrganizationStatus: valid values are %v", v, allowedOrganizationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrganizationStatus) IsValid() bool {
	for _, existing := range allowedOrganizationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrganizationStatus value
func (v OrganizationStatus) Ptr() *OrganizationStatus {
	return &v
}

type NullableOrganizationStatus struct {
	value *OrganizationStatus
	isSet bool
}

func (v NullableOrganizationStatus) Get() *OrganizationStatus {
	return v.value
}

func (v *NullableOrganizationStatus) Set(val *OrganizationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationStatus(val *OrganizationStatus) *NullableOrganizationStatus {
	return &NullableOrganizationStatus{value: val, isSet: true}
}

func (v NullableOrganizationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

