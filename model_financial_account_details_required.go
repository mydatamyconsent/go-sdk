/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/go-sdk

import (
	"encoding/json"
	"fmt"
)

// FinancialAccountDetailsRequired the model 'FinancialAccountDetailsRequired'
type FinancialAccountDetailsRequired string

// List of FinancialAccountDetailsRequired
const (
	ACCOUNT_SUMMARY FinancialAccountDetailsRequired = "AccountSummary"
	TRANSACTION_DETAILS FinancialAccountDetailsRequired = "TransactionDetails"
)

// All allowed values of FinancialAccountDetailsRequired enum
var AllowedFinancialAccountDetailsRequiredEnumValues = []FinancialAccountDetailsRequired{
	"AccountSummary",
	"TransactionDetails",
}

func (v *FinancialAccountDetailsRequired) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FinancialAccountDetailsRequired(value)
	for _, existing := range AllowedFinancialAccountDetailsRequiredEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FinancialAccountDetailsRequired", value)
}

// NewFinancialAccountDetailsRequiredFromValue returns a pointer to a valid FinancialAccountDetailsRequired
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFinancialAccountDetailsRequiredFromValue(v string) (*FinancialAccountDetailsRequired, error) {
	ev := FinancialAccountDetailsRequired(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FinancialAccountDetailsRequired: valid values are %v", v, AllowedFinancialAccountDetailsRequiredEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FinancialAccountDetailsRequired) IsValid() bool {
	for _, existing := range AllowedFinancialAccountDetailsRequiredEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FinancialAccountDetailsRequired value
func (v FinancialAccountDetailsRequired) Ptr() *FinancialAccountDetailsRequired {
	return &v
}

type NullableFinancialAccountDetailsRequired struct {
	value *FinancialAccountDetailsRequired
	isSet bool
}

func (v NullableFinancialAccountDetailsRequired) Get() *FinancialAccountDetailsRequired {
	return v.value
}

func (v *NullableFinancialAccountDetailsRequired) Set(val *FinancialAccountDetailsRequired) {
	v.value = val
	v.isSet = true
}

func (v NullableFinancialAccountDetailsRequired) IsSet() bool {
	return v.isSet
}

func (v *NullableFinancialAccountDetailsRequired) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinancialAccountDetailsRequired(val *FinancialAccountDetailsRequired) *NullableFinancialAccountDetailsRequired {
	return &NullableFinancialAccountDetailsRequired{value: val, isSet: true}
}

func (v NullableFinancialAccountDetailsRequired) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinancialAccountDetailsRequired) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

