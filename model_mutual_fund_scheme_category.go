/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"fmt"
)

// MutualFundSchemeCategory the model 'MutualFundSchemeCategory'
type MutualFundSchemeCategory string

// List of MutualFundSchemeCategory
const (
	MULTI_CAP_FUND MutualFundSchemeCategory = "MultiCapFund"
	LARGE_CAP_FUND MutualFundSchemeCategory = "LargeCapFund"
	LARGE_AND_MID_CAP_FUND MutualFundSchemeCategory = "LargeAndMidCapFund"
	MIDCAP_FUND MutualFundSchemeCategory = "MidcapFund"
	SMALL_CAP_FUND MutualFundSchemeCategory = "SmallCapFund"
	DIVIDEND_YIELD_FUND MutualFundSchemeCategory = "DividendYieldFund"
	VALUE_FUND MutualFundSchemeCategory = "ValueFund"
	CONTRA_FUND MutualFundSchemeCategory = "ContraFund"
	FOCUSED_FUND MutualFundSchemeCategory = "FocusedFund"
	SECTORAL_OR_THEMATIC MutualFundSchemeCategory = "SectoralOrThematic"
	ELSS MutualFundSchemeCategory = "Elss"
	OVERNIGHT_FUND MutualFundSchemeCategory = "OvernightFund"
	LIQUID_FUND MutualFundSchemeCategory = "LiquidFund"
	ULTRA_SHORT_DURATION_FUND MutualFundSchemeCategory = "UltraShortDurationFund"
	LOW_DURATION_FUND MutualFundSchemeCategory = "LowDurationFund"
	MONEY_MARKET_FUND MutualFundSchemeCategory = "MoneyMarketFund"
	SHORT_DURATION_FUND MutualFundSchemeCategory = "ShortDurationFund"
	MEDIUM_DURATION_FUND MutualFundSchemeCategory = "MediumDurationFund"
	MEDIUM_TO_LONG_DURATION_FUND MutualFundSchemeCategory = "MediumToLongDurationFund"
	LONG_DURATION_FUND MutualFundSchemeCategory = "LongDurationFund"
	DYNAMIC_BOND MutualFundSchemeCategory = "DynamicBond"
	CORPORATE_BOND_FUND MutualFundSchemeCategory = "CorporateBondFund"
	CREDIT_RISK_FUND MutualFundSchemeCategory = "CreditRiskFund"
	BANKING_AND_PSU_FUND MutualFundSchemeCategory = "BankingAndPsuFund"
	GILT_FUND MutualFundSchemeCategory = "GiltFund"
	GILT_FUND_WITH10_YEAR_CONSTANT_DURATION MutualFundSchemeCategory = "GiltFundWith10YearConstantDuration"
	FLOATER_FUND MutualFundSchemeCategory = "FloaterFund"
	CONSERVATIVE_HYBRID_FUND MutualFundSchemeCategory = "ConservativeHybridFund"
	BALANCED_HYBRID_FUND MutualFundSchemeCategory = "BalancedHybridFund"
	AGGRESSIVE_HYBRID_FUND MutualFundSchemeCategory = "AggressiveHybridFund"
	DYNAMIC_ASSET_ALLOCATION_OR_BALANCED_ADVANTAGE MutualFundSchemeCategory = "DynamicAssetAllocationOrBalancedAdvantage"
	MULTI_ASSET_ALLOCATION MutualFundSchemeCategory = "MultiAssetAllocation"
	ARBITRAGE_FUND MutualFundSchemeCategory = "ArbitrageFund"
	EQUITY_SAVINGS MutualFundSchemeCategory = "EquitySavings"
	RETIREMENT_FUND MutualFundSchemeCategory = "RetirementFund"
	CHILDRENS_FUND MutualFundSchemeCategory = "ChildrensFund"
	INDEX_FUNDS_OR_ETFS MutualFundSchemeCategory = "IndexFundsOrEtfs"
	FOFS_OVERSEAS_OR_DOMESTIC MutualFundSchemeCategory = "FofsOverseasOrDomestic"
)

// All allowed values of MutualFundSchemeCategory enum
var AllowedMutualFundSchemeCategoryEnumValues = []MutualFundSchemeCategory{
	"MultiCapFund",
	"LargeCapFund",
	"LargeAndMidCapFund",
	"MidcapFund",
	"SmallCapFund",
	"DividendYieldFund",
	"ValueFund",
	"ContraFund",
	"FocusedFund",
	"SectoralOrThematic",
	"Elss",
	"OvernightFund",
	"LiquidFund",
	"UltraShortDurationFund",
	"LowDurationFund",
	"MoneyMarketFund",
	"ShortDurationFund",
	"MediumDurationFund",
	"MediumToLongDurationFund",
	"LongDurationFund",
	"DynamicBond",
	"CorporateBondFund",
	"CreditRiskFund",
	"BankingAndPsuFund",
	"GiltFund",
	"GiltFundWith10YearConstantDuration",
	"FloaterFund",
	"ConservativeHybridFund",
	"BalancedHybridFund",
	"AggressiveHybridFund",
	"DynamicAssetAllocationOrBalancedAdvantage",
	"MultiAssetAllocation",
	"ArbitrageFund",
	"EquitySavings",
	"RetirementFund",
	"ChildrensFund",
	"IndexFundsOrEtfs",
	"FofsOverseasOrDomestic",
}

func (v *MutualFundSchemeCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MutualFundSchemeCategory(value)
	for _, existing := range AllowedMutualFundSchemeCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MutualFundSchemeCategory", value)
}

// NewMutualFundSchemeCategoryFromValue returns a pointer to a valid MutualFundSchemeCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMutualFundSchemeCategoryFromValue(v string) (*MutualFundSchemeCategory, error) {
	ev := MutualFundSchemeCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MutualFundSchemeCategory: valid values are %v", v, AllowedMutualFundSchemeCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MutualFundSchemeCategory) IsValid() bool {
	for _, existing := range AllowedMutualFundSchemeCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MutualFundSchemeCategory value
func (v MutualFundSchemeCategory) Ptr() *MutualFundSchemeCategory {
	return &v
}

type NullableMutualFundSchemeCategory struct {
	value *MutualFundSchemeCategory
	isSet bool
}

func (v NullableMutualFundSchemeCategory) Get() *MutualFundSchemeCategory {
	return v.value
}

func (v *NullableMutualFundSchemeCategory) Set(val *MutualFundSchemeCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableMutualFundSchemeCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableMutualFundSchemeCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutualFundSchemeCategory(val *MutualFundSchemeCategory) *NullableMutualFundSchemeCategory {
	return &NullableMutualFundSchemeCategory{value: val, isSet: true}
}

func (v NullableMutualFundSchemeCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutualFundSchemeCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

