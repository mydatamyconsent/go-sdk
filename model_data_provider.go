/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/go-sdk

import (
	"encoding/json"
)

// DataProvider struct for DataProvider
type DataProvider struct {
	Id NullableString `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	LogoUrl NullableString `json:"logoUrl,omitempty"`
	Website NullableString `json:"website,omitempty"`
	Email NullableString `json:"email,omitempty"`
	SupportPhoneNumber NullableString `json:"supportPhoneNumber,omitempty"`
	PrivacyPolicy NullableString `json:"privacyPolicy,omitempty"`
	TermOfService NullableString `json:"termOfService,omitempty"`
	Category NullableString `json:"category,omitempty"`
	DataProtectionOfficer *DataProtectionOfficer `json:"dataProtectionOfficer,omitempty"`
	SupportedAccountTypes []string `json:"supportedAccountTypes,omitempty"`
	SupportedDocumentTypes []string `json:"supportedDocumentTypes,omitempty"`
}

// NewDataProvider instantiates a new DataProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataProvider() *DataProvider {
	this := DataProvider{}
	return &this
}

// NewDataProviderWithDefaults instantiates a new DataProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataProviderWithDefaults() *DataProvider {
	this := DataProvider{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataProvider) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataProvider) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DataProvider) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *DataProvider) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DataProvider) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DataProvider) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataProvider) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataProvider) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *DataProvider) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *DataProvider) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *DataProvider) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *DataProvider) UnsetName() {
	o.Name.Unset()
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataProvider) GetLogoUrl() string {
	if o == nil || o.LogoUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.LogoUrl.Get()
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataProvider) GetLogoUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogoUrl.Get(), o.LogoUrl.IsSet()
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *DataProvider) HasLogoUrl() bool {
	if o != nil && o.LogoUrl.IsSet() {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given NullableString and assigns it to the LogoUrl field.
func (o *DataProvider) SetLogoUrl(v string) {
	o.LogoUrl.Set(&v)
}
// SetLogoUrlNil sets the value for LogoUrl to be an explicit nil
func (o *DataProvider) SetLogoUrlNil() {
	o.LogoUrl.Set(nil)
}

// UnsetLogoUrl ensures that no value is present for LogoUrl, not even an explicit nil
func (o *DataProvider) UnsetLogoUrl() {
	o.LogoUrl.Unset()
}

// GetWebsite returns the Website field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataProvider) GetWebsite() string {
	if o == nil || o.Website.Get() == nil {
		var ret string
		return ret
	}
	return *o.Website.Get()
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataProvider) GetWebsiteOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Website.Get(), o.Website.IsSet()
}

// HasWebsite returns a boolean if a field has been set.
func (o *DataProvider) HasWebsite() bool {
	if o != nil && o.Website.IsSet() {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given NullableString and assigns it to the Website field.
func (o *DataProvider) SetWebsite(v string) {
	o.Website.Set(&v)
}
// SetWebsiteNil sets the value for Website to be an explicit nil
func (o *DataProvider) SetWebsiteNil() {
	o.Website.Set(nil)
}

// UnsetWebsite ensures that no value is present for Website, not even an explicit nil
func (o *DataProvider) UnsetWebsite() {
	o.Website.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataProvider) GetEmail() string {
	if o == nil || o.Email.Get() == nil {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataProvider) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *DataProvider) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *DataProvider) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *DataProvider) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *DataProvider) UnsetEmail() {
	o.Email.Unset()
}

// GetSupportPhoneNumber returns the SupportPhoneNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataProvider) GetSupportPhoneNumber() string {
	if o == nil || o.SupportPhoneNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.SupportPhoneNumber.Get()
}

// GetSupportPhoneNumberOk returns a tuple with the SupportPhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataProvider) GetSupportPhoneNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SupportPhoneNumber.Get(), o.SupportPhoneNumber.IsSet()
}

// HasSupportPhoneNumber returns a boolean if a field has been set.
func (o *DataProvider) HasSupportPhoneNumber() bool {
	if o != nil && o.SupportPhoneNumber.IsSet() {
		return true
	}

	return false
}

// SetSupportPhoneNumber gets a reference to the given NullableString and assigns it to the SupportPhoneNumber field.
func (o *DataProvider) SetSupportPhoneNumber(v string) {
	o.SupportPhoneNumber.Set(&v)
}
// SetSupportPhoneNumberNil sets the value for SupportPhoneNumber to be an explicit nil
func (o *DataProvider) SetSupportPhoneNumberNil() {
	o.SupportPhoneNumber.Set(nil)
}

// UnsetSupportPhoneNumber ensures that no value is present for SupportPhoneNumber, not even an explicit nil
func (o *DataProvider) UnsetSupportPhoneNumber() {
	o.SupportPhoneNumber.Unset()
}

// GetPrivacyPolicy returns the PrivacyPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataProvider) GetPrivacyPolicy() string {
	if o == nil || o.PrivacyPolicy.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrivacyPolicy.Get()
}

// GetPrivacyPolicyOk returns a tuple with the PrivacyPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataProvider) GetPrivacyPolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrivacyPolicy.Get(), o.PrivacyPolicy.IsSet()
}

// HasPrivacyPolicy returns a boolean if a field has been set.
func (o *DataProvider) HasPrivacyPolicy() bool {
	if o != nil && o.PrivacyPolicy.IsSet() {
		return true
	}

	return false
}

// SetPrivacyPolicy gets a reference to the given NullableString and assigns it to the PrivacyPolicy field.
func (o *DataProvider) SetPrivacyPolicy(v string) {
	o.PrivacyPolicy.Set(&v)
}
// SetPrivacyPolicyNil sets the value for PrivacyPolicy to be an explicit nil
func (o *DataProvider) SetPrivacyPolicyNil() {
	o.PrivacyPolicy.Set(nil)
}

// UnsetPrivacyPolicy ensures that no value is present for PrivacyPolicy, not even an explicit nil
func (o *DataProvider) UnsetPrivacyPolicy() {
	o.PrivacyPolicy.Unset()
}

// GetTermOfService returns the TermOfService field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataProvider) GetTermOfService() string {
	if o == nil || o.TermOfService.Get() == nil {
		var ret string
		return ret
	}
	return *o.TermOfService.Get()
}

// GetTermOfServiceOk returns a tuple with the TermOfService field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataProvider) GetTermOfServiceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TermOfService.Get(), o.TermOfService.IsSet()
}

// HasTermOfService returns a boolean if a field has been set.
func (o *DataProvider) HasTermOfService() bool {
	if o != nil && o.TermOfService.IsSet() {
		return true
	}

	return false
}

// SetTermOfService gets a reference to the given NullableString and assigns it to the TermOfService field.
func (o *DataProvider) SetTermOfService(v string) {
	o.TermOfService.Set(&v)
}
// SetTermOfServiceNil sets the value for TermOfService to be an explicit nil
func (o *DataProvider) SetTermOfServiceNil() {
	o.TermOfService.Set(nil)
}

// UnsetTermOfService ensures that no value is present for TermOfService, not even an explicit nil
func (o *DataProvider) UnsetTermOfService() {
	o.TermOfService.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataProvider) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataProvider) GetCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *DataProvider) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *DataProvider) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *DataProvider) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *DataProvider) UnsetCategory() {
	o.Category.Unset()
}

// GetDataProtectionOfficer returns the DataProtectionOfficer field value if set, zero value otherwise.
func (o *DataProvider) GetDataProtectionOfficer() DataProtectionOfficer {
	if o == nil || o.DataProtectionOfficer == nil {
		var ret DataProtectionOfficer
		return ret
	}
	return *o.DataProtectionOfficer
}

// GetDataProtectionOfficerOk returns a tuple with the DataProtectionOfficer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataProvider) GetDataProtectionOfficerOk() (*DataProtectionOfficer, bool) {
	if o == nil || o.DataProtectionOfficer == nil {
		return nil, false
	}
	return o.DataProtectionOfficer, true
}

// HasDataProtectionOfficer returns a boolean if a field has been set.
func (o *DataProvider) HasDataProtectionOfficer() bool {
	if o != nil && o.DataProtectionOfficer != nil {
		return true
	}

	return false
}

// SetDataProtectionOfficer gets a reference to the given DataProtectionOfficer and assigns it to the DataProtectionOfficer field.
func (o *DataProvider) SetDataProtectionOfficer(v DataProtectionOfficer) {
	o.DataProtectionOfficer = &v
}

// GetSupportedAccountTypes returns the SupportedAccountTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataProvider) GetSupportedAccountTypes() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SupportedAccountTypes
}

// GetSupportedAccountTypesOk returns a tuple with the SupportedAccountTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataProvider) GetSupportedAccountTypesOk() ([]string, bool) {
	if o == nil || o.SupportedAccountTypes == nil {
		return nil, false
	}
	return o.SupportedAccountTypes, true
}

// HasSupportedAccountTypes returns a boolean if a field has been set.
func (o *DataProvider) HasSupportedAccountTypes() bool {
	if o != nil && o.SupportedAccountTypes != nil {
		return true
	}

	return false
}

// SetSupportedAccountTypes gets a reference to the given []string and assigns it to the SupportedAccountTypes field.
func (o *DataProvider) SetSupportedAccountTypes(v []string) {
	o.SupportedAccountTypes = v
}

// GetSupportedDocumentTypes returns the SupportedDocumentTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataProvider) GetSupportedDocumentTypes() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SupportedDocumentTypes
}

// GetSupportedDocumentTypesOk returns a tuple with the SupportedDocumentTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataProvider) GetSupportedDocumentTypesOk() ([]string, bool) {
	if o == nil || o.SupportedDocumentTypes == nil {
		return nil, false
	}
	return o.SupportedDocumentTypes, true
}

// HasSupportedDocumentTypes returns a boolean if a field has been set.
func (o *DataProvider) HasSupportedDocumentTypes() bool {
	if o != nil && o.SupportedDocumentTypes != nil {
		return true
	}

	return false
}

// SetSupportedDocumentTypes gets a reference to the given []string and assigns it to the SupportedDocumentTypes field.
func (o *DataProvider) SetSupportedDocumentTypes(v []string) {
	o.SupportedDocumentTypes = v
}

func (o DataProvider) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.LogoUrl.IsSet() {
		toSerialize["logoUrl"] = o.LogoUrl.Get()
	}
	if o.Website.IsSet() {
		toSerialize["website"] = o.Website.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.SupportPhoneNumber.IsSet() {
		toSerialize["supportPhoneNumber"] = o.SupportPhoneNumber.Get()
	}
	if o.PrivacyPolicy.IsSet() {
		toSerialize["privacyPolicy"] = o.PrivacyPolicy.Get()
	}
	if o.TermOfService.IsSet() {
		toSerialize["termOfService"] = o.TermOfService.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.DataProtectionOfficer != nil {
		toSerialize["dataProtectionOfficer"] = o.DataProtectionOfficer
	}
	if o.SupportedAccountTypes != nil {
		toSerialize["supportedAccountTypes"] = o.SupportedAccountTypes
	}
	if o.SupportedDocumentTypes != nil {
		toSerialize["supportedDocumentTypes"] = o.SupportedDocumentTypes
	}
	return json.Marshal(toSerialize)
}

type NullableDataProvider struct {
	value *DataProvider
	isSet bool
}

func (v NullableDataProvider) Get() *DataProvider {
	return v.value
}

func (v *NullableDataProvider) Set(val *DataProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableDataProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableDataProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataProvider(val *DataProvider) *NullableDataProvider {
	return &NullableDataProvider{value: val, isSet: true}
}

func (v NullableDataProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


