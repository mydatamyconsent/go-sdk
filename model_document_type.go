/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
	"time"
)

// DocumentType DocumentType : Issuable Document Type details.
type DocumentType struct {
	// Document Type Identifier.
	Id string `json:"id"`
	CategoryType DocumentCategoryType `json:"categoryType"`
	SubCategoryType DocumentSubCategoryType `json:"subCategoryType"`
	// Document Type Name. eg: Driving License.
	Name string `json:"name"`
	// Document Type Unique Slug. eg: \\\"in.gov.gj.transport.dl\\\".
	Slug string `json:"slug"`
	// Document Type description. eg: Gujarat State Driving License.
	Description *string `json:"description,omitempty"`
	// Logo URL of document type.
	LogoUrl string `json:"logoUrl"`
	// Document search repository service name.
	SearchServiceName *string `json:"searchServiceName,omitempty"`
	// Document repository service name.
	RepositoryServiceName *string `json:"repositoryServiceName,omitempty"`
	SupportedEntityType SupportedEntityType `json:"supportedEntityType"`
	// Name of the document type creator.
	AddedBy string `json:"addedBy"`
	// Payable amount if document is chargeable. eg: 10.25.
	PayableAmount float64 `json:"payableAmount"`
	// Payable amount currency. eg: INR, USD etc.,.
	PayableAmountCurrency string `json:"payableAmountCurrency"`
	// DateTime of approval in UTC timezone.
	ApprovedAtUtc *time.Time `json:"approvedAtUtc,omitempty"`
}

// NewDocumentType instantiates a new DocumentType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentType(id string, categoryType DocumentCategoryType, subCategoryType DocumentSubCategoryType, name string, slug string, logoUrl string, supportedEntityType SupportedEntityType, addedBy string, payableAmount float64, payableAmountCurrency string) *DocumentType {
	this := DocumentType{}
	this.Id = id
	this.CategoryType = categoryType
	this.SubCategoryType = subCategoryType
	this.Name = name
	this.Slug = slug
	this.LogoUrl = logoUrl
	this.SupportedEntityType = supportedEntityType
	this.AddedBy = addedBy
	this.PayableAmount = payableAmount
	this.PayableAmountCurrency = payableAmountCurrency
	return &this
}

// NewDocumentTypeWithDefaults instantiates a new DocumentType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentTypeWithDefaults() *DocumentType {
	this := DocumentType{}
	return &this
}

// GetId returns the Id field value
func (o *DocumentType) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DocumentType) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DocumentType) SetId(v string) {
	o.Id = v
}

// GetCategoryType returns the CategoryType field value
func (o *DocumentType) GetCategoryType() DocumentCategoryType {
	if o == nil {
		var ret DocumentCategoryType
		return ret
	}

	return o.CategoryType
}

// GetCategoryTypeOk returns a tuple with the CategoryType field value
// and a boolean to check if the value has been set.
func (o *DocumentType) GetCategoryTypeOk() (*DocumentCategoryType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryType, true
}

// SetCategoryType sets field value
func (o *DocumentType) SetCategoryType(v DocumentCategoryType) {
	o.CategoryType = v
}

// GetSubCategoryType returns the SubCategoryType field value
func (o *DocumentType) GetSubCategoryType() DocumentSubCategoryType {
	if o == nil {
		var ret DocumentSubCategoryType
		return ret
	}

	return o.SubCategoryType
}

// GetSubCategoryTypeOk returns a tuple with the SubCategoryType field value
// and a boolean to check if the value has been set.
func (o *DocumentType) GetSubCategoryTypeOk() (*DocumentSubCategoryType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubCategoryType, true
}

// SetSubCategoryType sets field value
func (o *DocumentType) SetSubCategoryType(v DocumentSubCategoryType) {
	o.SubCategoryType = v
}

// GetName returns the Name field value
func (o *DocumentType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DocumentType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DocumentType) SetName(v string) {
	o.Name = v
}

// GetSlug returns the Slug field value
func (o *DocumentType) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *DocumentType) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *DocumentType) SetSlug(v string) {
	o.Slug = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DocumentType) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentType) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DocumentType) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DocumentType) SetDescription(v string) {
	o.Description = &v
}

// GetLogoUrl returns the LogoUrl field value
func (o *DocumentType) GetLogoUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value
// and a boolean to check if the value has been set.
func (o *DocumentType) GetLogoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogoUrl, true
}

// SetLogoUrl sets field value
func (o *DocumentType) SetLogoUrl(v string) {
	o.LogoUrl = v
}

// GetSearchServiceName returns the SearchServiceName field value if set, zero value otherwise.
func (o *DocumentType) GetSearchServiceName() string {
	if o == nil || o.SearchServiceName == nil {
		var ret string
		return ret
	}
	return *o.SearchServiceName
}

// GetSearchServiceNameOk returns a tuple with the SearchServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentType) GetSearchServiceNameOk() (*string, bool) {
	if o == nil || o.SearchServiceName == nil {
		return nil, false
	}
	return o.SearchServiceName, true
}

// HasSearchServiceName returns a boolean if a field has been set.
func (o *DocumentType) HasSearchServiceName() bool {
	if o != nil && o.SearchServiceName != nil {
		return true
	}

	return false
}

// SetSearchServiceName gets a reference to the given string and assigns it to the SearchServiceName field.
func (o *DocumentType) SetSearchServiceName(v string) {
	o.SearchServiceName = &v
}

// GetRepositoryServiceName returns the RepositoryServiceName field value if set, zero value otherwise.
func (o *DocumentType) GetRepositoryServiceName() string {
	if o == nil || o.RepositoryServiceName == nil {
		var ret string
		return ret
	}
	return *o.RepositoryServiceName
}

// GetRepositoryServiceNameOk returns a tuple with the RepositoryServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentType) GetRepositoryServiceNameOk() (*string, bool) {
	if o == nil || o.RepositoryServiceName == nil {
		return nil, false
	}
	return o.RepositoryServiceName, true
}

// HasRepositoryServiceName returns a boolean if a field has been set.
func (o *DocumentType) HasRepositoryServiceName() bool {
	if o != nil && o.RepositoryServiceName != nil {
		return true
	}

	return false
}

// SetRepositoryServiceName gets a reference to the given string and assigns it to the RepositoryServiceName field.
func (o *DocumentType) SetRepositoryServiceName(v string) {
	o.RepositoryServiceName = &v
}

// GetSupportedEntityType returns the SupportedEntityType field value
func (o *DocumentType) GetSupportedEntityType() SupportedEntityType {
	if o == nil {
		var ret SupportedEntityType
		return ret
	}

	return o.SupportedEntityType
}

// GetSupportedEntityTypeOk returns a tuple with the SupportedEntityType field value
// and a boolean to check if the value has been set.
func (o *DocumentType) GetSupportedEntityTypeOk() (*SupportedEntityType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportedEntityType, true
}

// SetSupportedEntityType sets field value
func (o *DocumentType) SetSupportedEntityType(v SupportedEntityType) {
	o.SupportedEntityType = v
}

// GetAddedBy returns the AddedBy field value
func (o *DocumentType) GetAddedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddedBy
}

// GetAddedByOk returns a tuple with the AddedBy field value
// and a boolean to check if the value has been set.
func (o *DocumentType) GetAddedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddedBy, true
}

// SetAddedBy sets field value
func (o *DocumentType) SetAddedBy(v string) {
	o.AddedBy = v
}

// GetPayableAmount returns the PayableAmount field value
func (o *DocumentType) GetPayableAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.PayableAmount
}

// GetPayableAmountOk returns a tuple with the PayableAmount field value
// and a boolean to check if the value has been set.
func (o *DocumentType) GetPayableAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayableAmount, true
}

// SetPayableAmount sets field value
func (o *DocumentType) SetPayableAmount(v float64) {
	o.PayableAmount = v
}

// GetPayableAmountCurrency returns the PayableAmountCurrency field value
func (o *DocumentType) GetPayableAmountCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayableAmountCurrency
}

// GetPayableAmountCurrencyOk returns a tuple with the PayableAmountCurrency field value
// and a boolean to check if the value has been set.
func (o *DocumentType) GetPayableAmountCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayableAmountCurrency, true
}

// SetPayableAmountCurrency sets field value
func (o *DocumentType) SetPayableAmountCurrency(v string) {
	o.PayableAmountCurrency = v
}

// GetApprovedAtUtc returns the ApprovedAtUtc field value if set, zero value otherwise.
func (o *DocumentType) GetApprovedAtUtc() time.Time {
	if o == nil || o.ApprovedAtUtc == nil {
		var ret time.Time
		return ret
	}
	return *o.ApprovedAtUtc
}

// GetApprovedAtUtcOk returns a tuple with the ApprovedAtUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentType) GetApprovedAtUtcOk() (*time.Time, bool) {
	if o == nil || o.ApprovedAtUtc == nil {
		return nil, false
	}
	return o.ApprovedAtUtc, true
}

// HasApprovedAtUtc returns a boolean if a field has been set.
func (o *DocumentType) HasApprovedAtUtc() bool {
	if o != nil && o.ApprovedAtUtc != nil {
		return true
	}

	return false
}

// SetApprovedAtUtc gets a reference to the given time.Time and assigns it to the ApprovedAtUtc field.
func (o *DocumentType) SetApprovedAtUtc(v time.Time) {
	o.ApprovedAtUtc = &v
}

func (o DocumentType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["categoryType"] = o.CategoryType
	}
	if true {
		toSerialize["subCategoryType"] = o.SubCategoryType
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["slug"] = o.Slug
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["logoUrl"] = o.LogoUrl
	}
	if o.SearchServiceName != nil {
		toSerialize["searchServiceName"] = o.SearchServiceName
	}
	if o.RepositoryServiceName != nil {
		toSerialize["repositoryServiceName"] = o.RepositoryServiceName
	}
	if true {
		toSerialize["supportedEntityType"] = o.SupportedEntityType
	}
	if true {
		toSerialize["addedBy"] = o.AddedBy
	}
	if true {
		toSerialize["payableAmount"] = o.PayableAmount
	}
	if true {
		toSerialize["payableAmountCurrency"] = o.PayableAmountCurrency
	}
	if o.ApprovedAtUtc != nil {
		toSerialize["approvedAtUtc"] = o.ApprovedAtUtc
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentType struct {
	value *DocumentType
	isSet bool
}

func (v NullableDocumentType) Get() *DocumentType {
	return v.value
}

func (v *NullableDocumentType) Set(val *DocumentType) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentType) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentType(val *DocumentType) *NullableDocumentType {
	return &NullableDocumentType{value: val, isSet: true}
}

func (v NullableDocumentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


