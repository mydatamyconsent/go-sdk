/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// BillPaymentOrderItem struct for BillPaymentOrderItem
type BillPaymentOrderItem struct {
	Name NullableString `json:"name,omitempty"`
	Amount *float64 `json:"amount,omitempty"`
}

// NewBillPaymentOrderItem instantiates a new BillPaymentOrderItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillPaymentOrderItem() *BillPaymentOrderItem {
	this := BillPaymentOrderItem{}
	return &this
}

// NewBillPaymentOrderItemWithDefaults instantiates a new BillPaymentOrderItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillPaymentOrderItemWithDefaults() *BillPaymentOrderItem {
	this := BillPaymentOrderItem{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillPaymentOrderItem) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillPaymentOrderItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *BillPaymentOrderItem) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *BillPaymentOrderItem) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *BillPaymentOrderItem) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *BillPaymentOrderItem) UnsetName() {
	o.Name.Unset()
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *BillPaymentOrderItem) GetAmount() float64 {
	if o == nil || o.Amount == nil {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillPaymentOrderItem) GetAmountOk() (*float64, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *BillPaymentOrderItem) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *BillPaymentOrderItem) SetAmount(v float64) {
	o.Amount = &v
}

func (o BillPaymentOrderItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	return json.Marshal(toSerialize)
}

type NullableBillPaymentOrderItem struct {
	value *BillPaymentOrderItem
	isSet bool
}

func (v NullableBillPaymentOrderItem) Get() *BillPaymentOrderItem {
	return v.value
}

func (v *NullableBillPaymentOrderItem) Set(val *BillPaymentOrderItem) {
	v.value = val
	v.isSet = true
}

func (v NullableBillPaymentOrderItem) IsSet() bool {
	return v.isSet
}

func (v *NullableBillPaymentOrderItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillPaymentOrderItem(val *BillPaymentOrderItem) *NullableBillPaymentOrderItem {
	return &NullableBillPaymentOrderItem{value: val, isSet: true}
}

func (v NullableBillPaymentOrderItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillPaymentOrderItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


