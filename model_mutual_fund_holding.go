/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// MutualFundHolding struct for MutualFundHolding
type MutualFundHolding struct {
	Name string `json:"name"`
	Amc *string `json:"amc,omitempty"`
	Registrar *string `json:"registrar,omitempty"`
	SchemeCode *string `json:"schemeCode,omitempty"`
	Isin string `json:"isin"`
	Ucc *string `json:"ucc,omitempty"`
	AmfiCode *string `json:"amfiCode,omitempty"`
	FolioNo string `json:"folioNo"`
	DividendType *string `json:"dividendType,omitempty"`
	FatcaStatus *string `json:"fatcaStatus,omitempty"`
	Mode MutualFundHoldingMode `json:"mode"`
	Units float64 `json:"units"`
	ClosingUnits *string `json:"closingUnits,omitempty"`
	LienUnits *string `json:"lienUnits,omitempty"`
	Rate *string `json:"rate,omitempty"`
	Nav *string `json:"nav,omitempty"`
	LockingUnits *string `json:"lockingUnits,omitempty"`
}

// NewMutualFundHolding instantiates a new MutualFundHolding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMutualFundHolding(name string, isin string, folioNo string, mode MutualFundHoldingMode, units float64) *MutualFundHolding {
	this := MutualFundHolding{}
	this.Name = name
	this.Isin = isin
	this.FolioNo = folioNo
	this.Mode = mode
	this.Units = units
	return &this
}

// NewMutualFundHoldingWithDefaults instantiates a new MutualFundHolding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMutualFundHoldingWithDefaults() *MutualFundHolding {
	this := MutualFundHolding{}
	return &this
}

// GetName returns the Name field value
func (o *MutualFundHolding) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MutualFundHolding) SetName(v string) {
	o.Name = v
}

// GetAmc returns the Amc field value if set, zero value otherwise.
func (o *MutualFundHolding) GetAmc() string {
	if o == nil || o.Amc == nil {
		var ret string
		return ret
	}
	return *o.Amc
}

// GetAmcOk returns a tuple with the Amc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetAmcOk() (*string, bool) {
	if o == nil || o.Amc == nil {
		return nil, false
	}
	return o.Amc, true
}

// HasAmc returns a boolean if a field has been set.
func (o *MutualFundHolding) HasAmc() bool {
	if o != nil && o.Amc != nil {
		return true
	}

	return false
}

// SetAmc gets a reference to the given string and assigns it to the Amc field.
func (o *MutualFundHolding) SetAmc(v string) {
	o.Amc = &v
}

// GetRegistrar returns the Registrar field value if set, zero value otherwise.
func (o *MutualFundHolding) GetRegistrar() string {
	if o == nil || o.Registrar == nil {
		var ret string
		return ret
	}
	return *o.Registrar
}

// GetRegistrarOk returns a tuple with the Registrar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetRegistrarOk() (*string, bool) {
	if o == nil || o.Registrar == nil {
		return nil, false
	}
	return o.Registrar, true
}

// HasRegistrar returns a boolean if a field has been set.
func (o *MutualFundHolding) HasRegistrar() bool {
	if o != nil && o.Registrar != nil {
		return true
	}

	return false
}

// SetRegistrar gets a reference to the given string and assigns it to the Registrar field.
func (o *MutualFundHolding) SetRegistrar(v string) {
	o.Registrar = &v
}

// GetSchemeCode returns the SchemeCode field value if set, zero value otherwise.
func (o *MutualFundHolding) GetSchemeCode() string {
	if o == nil || o.SchemeCode == nil {
		var ret string
		return ret
	}
	return *o.SchemeCode
}

// GetSchemeCodeOk returns a tuple with the SchemeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetSchemeCodeOk() (*string, bool) {
	if o == nil || o.SchemeCode == nil {
		return nil, false
	}
	return o.SchemeCode, true
}

// HasSchemeCode returns a boolean if a field has been set.
func (o *MutualFundHolding) HasSchemeCode() bool {
	if o != nil && o.SchemeCode != nil {
		return true
	}

	return false
}

// SetSchemeCode gets a reference to the given string and assigns it to the SchemeCode field.
func (o *MutualFundHolding) SetSchemeCode(v string) {
	o.SchemeCode = &v
}

// GetIsin returns the Isin field value
func (o *MutualFundHolding) GetIsin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Isin
}

// GetIsinOk returns a tuple with the Isin field value
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetIsinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Isin, true
}

// SetIsin sets field value
func (o *MutualFundHolding) SetIsin(v string) {
	o.Isin = v
}

// GetUcc returns the Ucc field value if set, zero value otherwise.
func (o *MutualFundHolding) GetUcc() string {
	if o == nil || o.Ucc == nil {
		var ret string
		return ret
	}
	return *o.Ucc
}

// GetUccOk returns a tuple with the Ucc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetUccOk() (*string, bool) {
	if o == nil || o.Ucc == nil {
		return nil, false
	}
	return o.Ucc, true
}

// HasUcc returns a boolean if a field has been set.
func (o *MutualFundHolding) HasUcc() bool {
	if o != nil && o.Ucc != nil {
		return true
	}

	return false
}

// SetUcc gets a reference to the given string and assigns it to the Ucc field.
func (o *MutualFundHolding) SetUcc(v string) {
	o.Ucc = &v
}

// GetAmfiCode returns the AmfiCode field value if set, zero value otherwise.
func (o *MutualFundHolding) GetAmfiCode() string {
	if o == nil || o.AmfiCode == nil {
		var ret string
		return ret
	}
	return *o.AmfiCode
}

// GetAmfiCodeOk returns a tuple with the AmfiCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetAmfiCodeOk() (*string, bool) {
	if o == nil || o.AmfiCode == nil {
		return nil, false
	}
	return o.AmfiCode, true
}

// HasAmfiCode returns a boolean if a field has been set.
func (o *MutualFundHolding) HasAmfiCode() bool {
	if o != nil && o.AmfiCode != nil {
		return true
	}

	return false
}

// SetAmfiCode gets a reference to the given string and assigns it to the AmfiCode field.
func (o *MutualFundHolding) SetAmfiCode(v string) {
	o.AmfiCode = &v
}

// GetFolioNo returns the FolioNo field value
func (o *MutualFundHolding) GetFolioNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FolioNo
}

// GetFolioNoOk returns a tuple with the FolioNo field value
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetFolioNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FolioNo, true
}

// SetFolioNo sets field value
func (o *MutualFundHolding) SetFolioNo(v string) {
	o.FolioNo = v
}

// GetDividendType returns the DividendType field value if set, zero value otherwise.
func (o *MutualFundHolding) GetDividendType() string {
	if o == nil || o.DividendType == nil {
		var ret string
		return ret
	}
	return *o.DividendType
}

// GetDividendTypeOk returns a tuple with the DividendType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetDividendTypeOk() (*string, bool) {
	if o == nil || o.DividendType == nil {
		return nil, false
	}
	return o.DividendType, true
}

// HasDividendType returns a boolean if a field has been set.
func (o *MutualFundHolding) HasDividendType() bool {
	if o != nil && o.DividendType != nil {
		return true
	}

	return false
}

// SetDividendType gets a reference to the given string and assigns it to the DividendType field.
func (o *MutualFundHolding) SetDividendType(v string) {
	o.DividendType = &v
}

// GetFatcaStatus returns the FatcaStatus field value if set, zero value otherwise.
func (o *MutualFundHolding) GetFatcaStatus() string {
	if o == nil || o.FatcaStatus == nil {
		var ret string
		return ret
	}
	return *o.FatcaStatus
}

// GetFatcaStatusOk returns a tuple with the FatcaStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetFatcaStatusOk() (*string, bool) {
	if o == nil || o.FatcaStatus == nil {
		return nil, false
	}
	return o.FatcaStatus, true
}

// HasFatcaStatus returns a boolean if a field has been set.
func (o *MutualFundHolding) HasFatcaStatus() bool {
	if o != nil && o.FatcaStatus != nil {
		return true
	}

	return false
}

// SetFatcaStatus gets a reference to the given string and assigns it to the FatcaStatus field.
func (o *MutualFundHolding) SetFatcaStatus(v string) {
	o.FatcaStatus = &v
}

// GetMode returns the Mode field value
func (o *MutualFundHolding) GetMode() MutualFundHoldingMode {
	if o == nil {
		var ret MutualFundHoldingMode
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetModeOk() (*MutualFundHoldingMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *MutualFundHolding) SetMode(v MutualFundHoldingMode) {
	o.Mode = v
}

// GetUnits returns the Units field value
func (o *MutualFundHolding) GetUnits() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetUnitsOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Units, true
}

// SetUnits sets field value
func (o *MutualFundHolding) SetUnits(v float64) {
	o.Units = v
}

// GetClosingUnits returns the ClosingUnits field value if set, zero value otherwise.
func (o *MutualFundHolding) GetClosingUnits() string {
	if o == nil || o.ClosingUnits == nil {
		var ret string
		return ret
	}
	return *o.ClosingUnits
}

// GetClosingUnitsOk returns a tuple with the ClosingUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetClosingUnitsOk() (*string, bool) {
	if o == nil || o.ClosingUnits == nil {
		return nil, false
	}
	return o.ClosingUnits, true
}

// HasClosingUnits returns a boolean if a field has been set.
func (o *MutualFundHolding) HasClosingUnits() bool {
	if o != nil && o.ClosingUnits != nil {
		return true
	}

	return false
}

// SetClosingUnits gets a reference to the given string and assigns it to the ClosingUnits field.
func (o *MutualFundHolding) SetClosingUnits(v string) {
	o.ClosingUnits = &v
}

// GetLienUnits returns the LienUnits field value if set, zero value otherwise.
func (o *MutualFundHolding) GetLienUnits() string {
	if o == nil || o.LienUnits == nil {
		var ret string
		return ret
	}
	return *o.LienUnits
}

// GetLienUnitsOk returns a tuple with the LienUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetLienUnitsOk() (*string, bool) {
	if o == nil || o.LienUnits == nil {
		return nil, false
	}
	return o.LienUnits, true
}

// HasLienUnits returns a boolean if a field has been set.
func (o *MutualFundHolding) HasLienUnits() bool {
	if o != nil && o.LienUnits != nil {
		return true
	}

	return false
}

// SetLienUnits gets a reference to the given string and assigns it to the LienUnits field.
func (o *MutualFundHolding) SetLienUnits(v string) {
	o.LienUnits = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *MutualFundHolding) GetRate() string {
	if o == nil || o.Rate == nil {
		var ret string
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetRateOk() (*string, bool) {
	if o == nil || o.Rate == nil {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *MutualFundHolding) HasRate() bool {
	if o != nil && o.Rate != nil {
		return true
	}

	return false
}

// SetRate gets a reference to the given string and assigns it to the Rate field.
func (o *MutualFundHolding) SetRate(v string) {
	o.Rate = &v
}

// GetNav returns the Nav field value if set, zero value otherwise.
func (o *MutualFundHolding) GetNav() string {
	if o == nil || o.Nav == nil {
		var ret string
		return ret
	}
	return *o.Nav
}

// GetNavOk returns a tuple with the Nav field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetNavOk() (*string, bool) {
	if o == nil || o.Nav == nil {
		return nil, false
	}
	return o.Nav, true
}

// HasNav returns a boolean if a field has been set.
func (o *MutualFundHolding) HasNav() bool {
	if o != nil && o.Nav != nil {
		return true
	}

	return false
}

// SetNav gets a reference to the given string and assigns it to the Nav field.
func (o *MutualFundHolding) SetNav(v string) {
	o.Nav = &v
}

// GetLockingUnits returns the LockingUnits field value if set, zero value otherwise.
func (o *MutualFundHolding) GetLockingUnits() string {
	if o == nil || o.LockingUnits == nil {
		var ret string
		return ret
	}
	return *o.LockingUnits
}

// GetLockingUnitsOk returns a tuple with the LockingUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundHolding) GetLockingUnitsOk() (*string, bool) {
	if o == nil || o.LockingUnits == nil {
		return nil, false
	}
	return o.LockingUnits, true
}

// HasLockingUnits returns a boolean if a field has been set.
func (o *MutualFundHolding) HasLockingUnits() bool {
	if o != nil && o.LockingUnits != nil {
		return true
	}

	return false
}

// SetLockingUnits gets a reference to the given string and assigns it to the LockingUnits field.
func (o *MutualFundHolding) SetLockingUnits(v string) {
	o.LockingUnits = &v
}

func (o MutualFundHolding) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Amc != nil {
		toSerialize["amc"] = o.Amc
	}
	if o.Registrar != nil {
		toSerialize["registrar"] = o.Registrar
	}
	if o.SchemeCode != nil {
		toSerialize["schemeCode"] = o.SchemeCode
	}
	if true {
		toSerialize["isin"] = o.Isin
	}
	if o.Ucc != nil {
		toSerialize["ucc"] = o.Ucc
	}
	if o.AmfiCode != nil {
		toSerialize["amfiCode"] = o.AmfiCode
	}
	if true {
		toSerialize["folioNo"] = o.FolioNo
	}
	if o.DividendType != nil {
		toSerialize["dividendType"] = o.DividendType
	}
	if o.FatcaStatus != nil {
		toSerialize["fatcaStatus"] = o.FatcaStatus
	}
	if true {
		toSerialize["mode"] = o.Mode
	}
	if true {
		toSerialize["units"] = o.Units
	}
	if o.ClosingUnits != nil {
		toSerialize["closingUnits"] = o.ClosingUnits
	}
	if o.LienUnits != nil {
		toSerialize["lienUnits"] = o.LienUnits
	}
	if o.Rate != nil {
		toSerialize["rate"] = o.Rate
	}
	if o.Nav != nil {
		toSerialize["nav"] = o.Nav
	}
	if o.LockingUnits != nil {
		toSerialize["lockingUnits"] = o.LockingUnits
	}
	return json.Marshal(toSerialize)
}

type NullableMutualFundHolding struct {
	value *MutualFundHolding
	isSet bool
}

func (v NullableMutualFundHolding) Get() *MutualFundHolding {
	return v.value
}

func (v *NullableMutualFundHolding) Set(val *MutualFundHolding) {
	v.value = val
	v.isSet = true
}

func (v NullableMutualFundHolding) IsSet() bool {
	return v.isSet
}

func (v *NullableMutualFundHolding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutualFundHolding(val *MutualFundHolding) *NullableMutualFundHolding {
	return &NullableMutualFundHolding{value: val, isSet: true}
}

func (v NullableMutualFundHolding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutualFundHolding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


