/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"fmt"
)

// Operator the model 'Operator'
type Operator string

// List of Operator
const (
	EQUAL_TO Operator = "EqualTo"
	NOT_EQUALTO Operator = "NotEqualto"
	TEXT_CONTAINS Operator = "TextContains"
	GREATER_THAN Operator = "GreaterThan"
	LESS_THAN Operator = "LessThan"
	GREATER_THAN_OR_EQUAL_TO Operator = "GreaterThanOrEqualTo"
	LESS_THAN_OR_EQUAL_TO Operator = "LessThanOrEqualTo"
)

var allowedOperatorEnumValues = []Operator{
	"EqualTo",
	"NotEqualto",
	"TextContains",
	"GreaterThan",
	"LessThan",
	"GreaterThanOrEqualTo",
	"LessThanOrEqualTo",
}

func (v *Operator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Operator(value)
	for _, existing := range allowedOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Operator", value)
}

// NewOperatorFromValue returns a pointer to a valid Operator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOperatorFromValue(v string) (*Operator, error) {
	ev := Operator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Operator: valid values are %v", v, allowedOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Operator) IsValid() bool {
	for _, existing := range allowedOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Operator value
func (v Operator) Ptr() *Operator {
	return &v
}

type NullableOperator struct {
	value *Operator
	isSet bool
}

func (v NullableOperator) Get() *Operator {
	return v.value
}

func (v *NullableOperator) Set(val *Operator) {
	v.value = val
	v.isSet = true
}

func (v NullableOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperator(val *Operator) *NullableOperator {
	return &NullableOperator{value: val, isSet: true}
}

func (v NullableOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

