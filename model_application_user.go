/*
My Data My Consent - Developer API

Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: v1
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mydatamyconsent

import (
	"encoding/json"
	"time"
)

// ApplicationUser struct for ApplicationUser
type ApplicationUser struct {
	Id *string `json:"id,omitempty"`
	UserName NullableString `json:"userName,omitempty"`
	NormalizedUserName NullableString `json:"normalizedUserName,omitempty"`
	Email NullableString `json:"email,omitempty"`
	NormalizedEmail NullableString `json:"normalizedEmail,omitempty"`
	EmailConfirmed *bool `json:"emailConfirmed,omitempty"`
	PasswordHash NullableString `json:"passwordHash,omitempty"`
	SecurityStamp NullableString `json:"securityStamp,omitempty"`
	ConcurrencyStamp NullableString `json:"concurrencyStamp,omitempty"`
	PhoneNumber NullableString `json:"phoneNumber,omitempty"`
	PhoneNumberConfirmed *bool `json:"phoneNumberConfirmed,omitempty"`
	TwoFactorEnabled *bool `json:"twoFactorEnabled,omitempty"`
	LockoutEnd NullableTime `json:"lockoutEnd,omitempty"`
	LockoutEnabled *bool `json:"lockoutEnabled,omitempty"`
	AccessFailedCount *int32 `json:"accessFailedCount,omitempty"`
	FirstName NullableString `json:"firstName,omitempty"`
	MiddleName NullableString `json:"middleName,omitempty"`
	LastName NullableString `json:"lastName,omitempty"`
	FullName NullableString `json:"fullName,omitempty"`
	Gender *Gender `json:"gender,omitempty"`
	DateOfBirth *time.Time `json:"dateOfBirth,omitempty"`
	CountryId *string `json:"countryId,omitempty"`
	PostCode NullableString `json:"postCode,omitempty"`
	ReferredBy NullableString `json:"referredBy,omitempty"`
	Language NullableString `json:"language,omitempty"`
	Theme *Theme `json:"theme,omitempty"`
	Designation NullableString `json:"designation,omitempty"`
	IsMarkedForDeletion *bool `json:"isMarkedForDeletion,omitempty"`
	HardDeleteDate NullableTime `json:"hardDeleteDate,omitempty"`
	SecurityPin NullableString `json:"securityPin,omitempty"`
	PhotoUrl NullableString `json:"photoUrl,omitempty"`
	ReferralCode NullableString `json:"referralCode,omitempty"`
	RecoveryToken NullableString `json:"recoveryToken,omitempty"`
	DigiLockerLastSyncDate NullableTime `json:"digiLockerLastSyncDate,omitempty"`
	RefreshTokens []RefreshToken `json:"refreshTokens,omitempty"`
	Country *Country `json:"country,omitempty"`
	ReferredByUser *ApplicationUser `json:"referredByUser,omitempty"`
}

// NewApplicationUser instantiates a new ApplicationUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationUser() *ApplicationUser {
	this := ApplicationUser{}
	return &this
}

// NewApplicationUserWithDefaults instantiates a new ApplicationUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationUserWithDefaults() *ApplicationUser {
	this := ApplicationUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplicationUser) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUser) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplicationUser) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplicationUser) SetId(v string) {
	o.Id = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetUserName() string {
	if o == nil || o.UserName.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetUserNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *ApplicationUser) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *ApplicationUser) SetUserName(v string) {
	o.UserName.Set(&v)
}
// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *ApplicationUser) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *ApplicationUser) UnsetUserName() {
	o.UserName.Unset()
}

// GetNormalizedUserName returns the NormalizedUserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetNormalizedUserName() string {
	if o == nil || o.NormalizedUserName.Get() == nil {
		var ret string
		return ret
	}
	return *o.NormalizedUserName.Get()
}

// GetNormalizedUserNameOk returns a tuple with the NormalizedUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetNormalizedUserNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NormalizedUserName.Get(), o.NormalizedUserName.IsSet()
}

// HasNormalizedUserName returns a boolean if a field has been set.
func (o *ApplicationUser) HasNormalizedUserName() bool {
	if o != nil && o.NormalizedUserName.IsSet() {
		return true
	}

	return false
}

// SetNormalizedUserName gets a reference to the given NullableString and assigns it to the NormalizedUserName field.
func (o *ApplicationUser) SetNormalizedUserName(v string) {
	o.NormalizedUserName.Set(&v)
}
// SetNormalizedUserNameNil sets the value for NormalizedUserName to be an explicit nil
func (o *ApplicationUser) SetNormalizedUserNameNil() {
	o.NormalizedUserName.Set(nil)
}

// UnsetNormalizedUserName ensures that no value is present for NormalizedUserName, not even an explicit nil
func (o *ApplicationUser) UnsetNormalizedUserName() {
	o.NormalizedUserName.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetEmail() string {
	if o == nil || o.Email.Get() == nil {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *ApplicationUser) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *ApplicationUser) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *ApplicationUser) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *ApplicationUser) UnsetEmail() {
	o.Email.Unset()
}

// GetNormalizedEmail returns the NormalizedEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetNormalizedEmail() string {
	if o == nil || o.NormalizedEmail.Get() == nil {
		var ret string
		return ret
	}
	return *o.NormalizedEmail.Get()
}

// GetNormalizedEmailOk returns a tuple with the NormalizedEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetNormalizedEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NormalizedEmail.Get(), o.NormalizedEmail.IsSet()
}

// HasNormalizedEmail returns a boolean if a field has been set.
func (o *ApplicationUser) HasNormalizedEmail() bool {
	if o != nil && o.NormalizedEmail.IsSet() {
		return true
	}

	return false
}

// SetNormalizedEmail gets a reference to the given NullableString and assigns it to the NormalizedEmail field.
func (o *ApplicationUser) SetNormalizedEmail(v string) {
	o.NormalizedEmail.Set(&v)
}
// SetNormalizedEmailNil sets the value for NormalizedEmail to be an explicit nil
func (o *ApplicationUser) SetNormalizedEmailNil() {
	o.NormalizedEmail.Set(nil)
}

// UnsetNormalizedEmail ensures that no value is present for NormalizedEmail, not even an explicit nil
func (o *ApplicationUser) UnsetNormalizedEmail() {
	o.NormalizedEmail.Unset()
}

// GetEmailConfirmed returns the EmailConfirmed field value if set, zero value otherwise.
func (o *ApplicationUser) GetEmailConfirmed() bool {
	if o == nil || o.EmailConfirmed == nil {
		var ret bool
		return ret
	}
	return *o.EmailConfirmed
}

// GetEmailConfirmedOk returns a tuple with the EmailConfirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUser) GetEmailConfirmedOk() (*bool, bool) {
	if o == nil || o.EmailConfirmed == nil {
		return nil, false
	}
	return o.EmailConfirmed, true
}

// HasEmailConfirmed returns a boolean if a field has been set.
func (o *ApplicationUser) HasEmailConfirmed() bool {
	if o != nil && o.EmailConfirmed != nil {
		return true
	}

	return false
}

// SetEmailConfirmed gets a reference to the given bool and assigns it to the EmailConfirmed field.
func (o *ApplicationUser) SetEmailConfirmed(v bool) {
	o.EmailConfirmed = &v
}

// GetPasswordHash returns the PasswordHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetPasswordHash() string {
	if o == nil || o.PasswordHash.Get() == nil {
		var ret string
		return ret
	}
	return *o.PasswordHash.Get()
}

// GetPasswordHashOk returns a tuple with the PasswordHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetPasswordHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PasswordHash.Get(), o.PasswordHash.IsSet()
}

// HasPasswordHash returns a boolean if a field has been set.
func (o *ApplicationUser) HasPasswordHash() bool {
	if o != nil && o.PasswordHash.IsSet() {
		return true
	}

	return false
}

// SetPasswordHash gets a reference to the given NullableString and assigns it to the PasswordHash field.
func (o *ApplicationUser) SetPasswordHash(v string) {
	o.PasswordHash.Set(&v)
}
// SetPasswordHashNil sets the value for PasswordHash to be an explicit nil
func (o *ApplicationUser) SetPasswordHashNil() {
	o.PasswordHash.Set(nil)
}

// UnsetPasswordHash ensures that no value is present for PasswordHash, not even an explicit nil
func (o *ApplicationUser) UnsetPasswordHash() {
	o.PasswordHash.Unset()
}

// GetSecurityStamp returns the SecurityStamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetSecurityStamp() string {
	if o == nil || o.SecurityStamp.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecurityStamp.Get()
}

// GetSecurityStampOk returns a tuple with the SecurityStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetSecurityStampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecurityStamp.Get(), o.SecurityStamp.IsSet()
}

// HasSecurityStamp returns a boolean if a field has been set.
func (o *ApplicationUser) HasSecurityStamp() bool {
	if o != nil && o.SecurityStamp.IsSet() {
		return true
	}

	return false
}

// SetSecurityStamp gets a reference to the given NullableString and assigns it to the SecurityStamp field.
func (o *ApplicationUser) SetSecurityStamp(v string) {
	o.SecurityStamp.Set(&v)
}
// SetSecurityStampNil sets the value for SecurityStamp to be an explicit nil
func (o *ApplicationUser) SetSecurityStampNil() {
	o.SecurityStamp.Set(nil)
}

// UnsetSecurityStamp ensures that no value is present for SecurityStamp, not even an explicit nil
func (o *ApplicationUser) UnsetSecurityStamp() {
	o.SecurityStamp.Unset()
}

// GetConcurrencyStamp returns the ConcurrencyStamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetConcurrencyStamp() string {
	if o == nil || o.ConcurrencyStamp.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConcurrencyStamp.Get()
}

// GetConcurrencyStampOk returns a tuple with the ConcurrencyStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetConcurrencyStampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConcurrencyStamp.Get(), o.ConcurrencyStamp.IsSet()
}

// HasConcurrencyStamp returns a boolean if a field has been set.
func (o *ApplicationUser) HasConcurrencyStamp() bool {
	if o != nil && o.ConcurrencyStamp.IsSet() {
		return true
	}

	return false
}

// SetConcurrencyStamp gets a reference to the given NullableString and assigns it to the ConcurrencyStamp field.
func (o *ApplicationUser) SetConcurrencyStamp(v string) {
	o.ConcurrencyStamp.Set(&v)
}
// SetConcurrencyStampNil sets the value for ConcurrencyStamp to be an explicit nil
func (o *ApplicationUser) SetConcurrencyStampNil() {
	o.ConcurrencyStamp.Set(nil)
}

// UnsetConcurrencyStamp ensures that no value is present for ConcurrencyStamp, not even an explicit nil
func (o *ApplicationUser) UnsetConcurrencyStamp() {
	o.ConcurrencyStamp.Unset()
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber.Get()
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetPhoneNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhoneNumber.Get(), o.PhoneNumber.IsSet()
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *ApplicationUser) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber.IsSet() {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given NullableString and assigns it to the PhoneNumber field.
func (o *ApplicationUser) SetPhoneNumber(v string) {
	o.PhoneNumber.Set(&v)
}
// SetPhoneNumberNil sets the value for PhoneNumber to be an explicit nil
func (o *ApplicationUser) SetPhoneNumberNil() {
	o.PhoneNumber.Set(nil)
}

// UnsetPhoneNumber ensures that no value is present for PhoneNumber, not even an explicit nil
func (o *ApplicationUser) UnsetPhoneNumber() {
	o.PhoneNumber.Unset()
}

// GetPhoneNumberConfirmed returns the PhoneNumberConfirmed field value if set, zero value otherwise.
func (o *ApplicationUser) GetPhoneNumberConfirmed() bool {
	if o == nil || o.PhoneNumberConfirmed == nil {
		var ret bool
		return ret
	}
	return *o.PhoneNumberConfirmed
}

// GetPhoneNumberConfirmedOk returns a tuple with the PhoneNumberConfirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUser) GetPhoneNumberConfirmedOk() (*bool, bool) {
	if o == nil || o.PhoneNumberConfirmed == nil {
		return nil, false
	}
	return o.PhoneNumberConfirmed, true
}

// HasPhoneNumberConfirmed returns a boolean if a field has been set.
func (o *ApplicationUser) HasPhoneNumberConfirmed() bool {
	if o != nil && o.PhoneNumberConfirmed != nil {
		return true
	}

	return false
}

// SetPhoneNumberConfirmed gets a reference to the given bool and assigns it to the PhoneNumberConfirmed field.
func (o *ApplicationUser) SetPhoneNumberConfirmed(v bool) {
	o.PhoneNumberConfirmed = &v
}

// GetTwoFactorEnabled returns the TwoFactorEnabled field value if set, zero value otherwise.
func (o *ApplicationUser) GetTwoFactorEnabled() bool {
	if o == nil || o.TwoFactorEnabled == nil {
		var ret bool
		return ret
	}
	return *o.TwoFactorEnabled
}

// GetTwoFactorEnabledOk returns a tuple with the TwoFactorEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUser) GetTwoFactorEnabledOk() (*bool, bool) {
	if o == nil || o.TwoFactorEnabled == nil {
		return nil, false
	}
	return o.TwoFactorEnabled, true
}

// HasTwoFactorEnabled returns a boolean if a field has been set.
func (o *ApplicationUser) HasTwoFactorEnabled() bool {
	if o != nil && o.TwoFactorEnabled != nil {
		return true
	}

	return false
}

// SetTwoFactorEnabled gets a reference to the given bool and assigns it to the TwoFactorEnabled field.
func (o *ApplicationUser) SetTwoFactorEnabled(v bool) {
	o.TwoFactorEnabled = &v
}

// GetLockoutEnd returns the LockoutEnd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetLockoutEnd() time.Time {
	if o == nil || o.LockoutEnd.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LockoutEnd.Get()
}

// GetLockoutEndOk returns a tuple with the LockoutEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetLockoutEndOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LockoutEnd.Get(), o.LockoutEnd.IsSet()
}

// HasLockoutEnd returns a boolean if a field has been set.
func (o *ApplicationUser) HasLockoutEnd() bool {
	if o != nil && o.LockoutEnd.IsSet() {
		return true
	}

	return false
}

// SetLockoutEnd gets a reference to the given NullableTime and assigns it to the LockoutEnd field.
func (o *ApplicationUser) SetLockoutEnd(v time.Time) {
	o.LockoutEnd.Set(&v)
}
// SetLockoutEndNil sets the value for LockoutEnd to be an explicit nil
func (o *ApplicationUser) SetLockoutEndNil() {
	o.LockoutEnd.Set(nil)
}

// UnsetLockoutEnd ensures that no value is present for LockoutEnd, not even an explicit nil
func (o *ApplicationUser) UnsetLockoutEnd() {
	o.LockoutEnd.Unset()
}

// GetLockoutEnabled returns the LockoutEnabled field value if set, zero value otherwise.
func (o *ApplicationUser) GetLockoutEnabled() bool {
	if o == nil || o.LockoutEnabled == nil {
		var ret bool
		return ret
	}
	return *o.LockoutEnabled
}

// GetLockoutEnabledOk returns a tuple with the LockoutEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUser) GetLockoutEnabledOk() (*bool, bool) {
	if o == nil || o.LockoutEnabled == nil {
		return nil, false
	}
	return o.LockoutEnabled, true
}

// HasLockoutEnabled returns a boolean if a field has been set.
func (o *ApplicationUser) HasLockoutEnabled() bool {
	if o != nil && o.LockoutEnabled != nil {
		return true
	}

	return false
}

// SetLockoutEnabled gets a reference to the given bool and assigns it to the LockoutEnabled field.
func (o *ApplicationUser) SetLockoutEnabled(v bool) {
	o.LockoutEnabled = &v
}

// GetAccessFailedCount returns the AccessFailedCount field value if set, zero value otherwise.
func (o *ApplicationUser) GetAccessFailedCount() int32 {
	if o == nil || o.AccessFailedCount == nil {
		var ret int32
		return ret
	}
	return *o.AccessFailedCount
}

// GetAccessFailedCountOk returns a tuple with the AccessFailedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUser) GetAccessFailedCountOk() (*int32, bool) {
	if o == nil || o.AccessFailedCount == nil {
		return nil, false
	}
	return o.AccessFailedCount, true
}

// HasAccessFailedCount returns a boolean if a field has been set.
func (o *ApplicationUser) HasAccessFailedCount() bool {
	if o != nil && o.AccessFailedCount != nil {
		return true
	}

	return false
}

// SetAccessFailedCount gets a reference to the given int32 and assigns it to the AccessFailedCount field.
func (o *ApplicationUser) SetAccessFailedCount(v int32) {
	o.AccessFailedCount = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetFirstName() string {
	if o == nil || o.FirstName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FirstName.Get()
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetFirstNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FirstName.Get(), o.FirstName.IsSet()
}

// HasFirstName returns a boolean if a field has been set.
func (o *ApplicationUser) HasFirstName() bool {
	if o != nil && o.FirstName.IsSet() {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given NullableString and assigns it to the FirstName field.
func (o *ApplicationUser) SetFirstName(v string) {
	o.FirstName.Set(&v)
}
// SetFirstNameNil sets the value for FirstName to be an explicit nil
func (o *ApplicationUser) SetFirstNameNil() {
	o.FirstName.Set(nil)
}

// UnsetFirstName ensures that no value is present for FirstName, not even an explicit nil
func (o *ApplicationUser) UnsetFirstName() {
	o.FirstName.Unset()
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetMiddleName() string {
	if o == nil || o.MiddleName.Get() == nil {
		var ret string
		return ret
	}
	return *o.MiddleName.Get()
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetMiddleNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MiddleName.Get(), o.MiddleName.IsSet()
}

// HasMiddleName returns a boolean if a field has been set.
func (o *ApplicationUser) HasMiddleName() bool {
	if o != nil && o.MiddleName.IsSet() {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given NullableString and assigns it to the MiddleName field.
func (o *ApplicationUser) SetMiddleName(v string) {
	o.MiddleName.Set(&v)
}
// SetMiddleNameNil sets the value for MiddleName to be an explicit nil
func (o *ApplicationUser) SetMiddleNameNil() {
	o.MiddleName.Set(nil)
}

// UnsetMiddleName ensures that no value is present for MiddleName, not even an explicit nil
func (o *ApplicationUser) UnsetMiddleName() {
	o.MiddleName.Unset()
}

// GetLastName returns the LastName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetLastName() string {
	if o == nil || o.LastName.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastName.Get()
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetLastNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastName.Get(), o.LastName.IsSet()
}

// HasLastName returns a boolean if a field has been set.
func (o *ApplicationUser) HasLastName() bool {
	if o != nil && o.LastName.IsSet() {
		return true
	}

	return false
}

// SetLastName gets a reference to the given NullableString and assigns it to the LastName field.
func (o *ApplicationUser) SetLastName(v string) {
	o.LastName.Set(&v)
}
// SetLastNameNil sets the value for LastName to be an explicit nil
func (o *ApplicationUser) SetLastNameNil() {
	o.LastName.Set(nil)
}

// UnsetLastName ensures that no value is present for LastName, not even an explicit nil
func (o *ApplicationUser) UnsetLastName() {
	o.LastName.Unset()
}

// GetFullName returns the FullName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetFullName() string {
	if o == nil || o.FullName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullName.Get()
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetFullNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FullName.Get(), o.FullName.IsSet()
}

// HasFullName returns a boolean if a field has been set.
func (o *ApplicationUser) HasFullName() bool {
	if o != nil && o.FullName.IsSet() {
		return true
	}

	return false
}

// SetFullName gets a reference to the given NullableString and assigns it to the FullName field.
func (o *ApplicationUser) SetFullName(v string) {
	o.FullName.Set(&v)
}
// SetFullNameNil sets the value for FullName to be an explicit nil
func (o *ApplicationUser) SetFullNameNil() {
	o.FullName.Set(nil)
}

// UnsetFullName ensures that no value is present for FullName, not even an explicit nil
func (o *ApplicationUser) UnsetFullName() {
	o.FullName.Unset()
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *ApplicationUser) GetGender() Gender {
	if o == nil || o.Gender == nil {
		var ret Gender
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUser) GetGenderOk() (*Gender, bool) {
	if o == nil || o.Gender == nil {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *ApplicationUser) HasGender() bool {
	if o != nil && o.Gender != nil {
		return true
	}

	return false
}

// SetGender gets a reference to the given Gender and assigns it to the Gender field.
func (o *ApplicationUser) SetGender(v Gender) {
	o.Gender = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *ApplicationUser) GetDateOfBirth() time.Time {
	if o == nil || o.DateOfBirth == nil {
		var ret time.Time
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUser) GetDateOfBirthOk() (*time.Time, bool) {
	if o == nil || o.DateOfBirth == nil {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *ApplicationUser) HasDateOfBirth() bool {
	if o != nil && o.DateOfBirth != nil {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given time.Time and assigns it to the DateOfBirth field.
func (o *ApplicationUser) SetDateOfBirth(v time.Time) {
	o.DateOfBirth = &v
}

// GetCountryId returns the CountryId field value if set, zero value otherwise.
func (o *ApplicationUser) GetCountryId() string {
	if o == nil || o.CountryId == nil {
		var ret string
		return ret
	}
	return *o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUser) GetCountryIdOk() (*string, bool) {
	if o == nil || o.CountryId == nil {
		return nil, false
	}
	return o.CountryId, true
}

// HasCountryId returns a boolean if a field has been set.
func (o *ApplicationUser) HasCountryId() bool {
	if o != nil && o.CountryId != nil {
		return true
	}

	return false
}

// SetCountryId gets a reference to the given string and assigns it to the CountryId field.
func (o *ApplicationUser) SetCountryId(v string) {
	o.CountryId = &v
}

// GetPostCode returns the PostCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetPostCode() string {
	if o == nil || o.PostCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.PostCode.Get()
}

// GetPostCodeOk returns a tuple with the PostCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetPostCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PostCode.Get(), o.PostCode.IsSet()
}

// HasPostCode returns a boolean if a field has been set.
func (o *ApplicationUser) HasPostCode() bool {
	if o != nil && o.PostCode.IsSet() {
		return true
	}

	return false
}

// SetPostCode gets a reference to the given NullableString and assigns it to the PostCode field.
func (o *ApplicationUser) SetPostCode(v string) {
	o.PostCode.Set(&v)
}
// SetPostCodeNil sets the value for PostCode to be an explicit nil
func (o *ApplicationUser) SetPostCodeNil() {
	o.PostCode.Set(nil)
}

// UnsetPostCode ensures that no value is present for PostCode, not even an explicit nil
func (o *ApplicationUser) UnsetPostCode() {
	o.PostCode.Unset()
}

// GetReferredBy returns the ReferredBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetReferredBy() string {
	if o == nil || o.ReferredBy.Get() == nil {
		var ret string
		return ret
	}
	return *o.ReferredBy.Get()
}

// GetReferredByOk returns a tuple with the ReferredBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetReferredByOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReferredBy.Get(), o.ReferredBy.IsSet()
}

// HasReferredBy returns a boolean if a field has been set.
func (o *ApplicationUser) HasReferredBy() bool {
	if o != nil && o.ReferredBy.IsSet() {
		return true
	}

	return false
}

// SetReferredBy gets a reference to the given NullableString and assigns it to the ReferredBy field.
func (o *ApplicationUser) SetReferredBy(v string) {
	o.ReferredBy.Set(&v)
}
// SetReferredByNil sets the value for ReferredBy to be an explicit nil
func (o *ApplicationUser) SetReferredByNil() {
	o.ReferredBy.Set(nil)
}

// UnsetReferredBy ensures that no value is present for ReferredBy, not even an explicit nil
func (o *ApplicationUser) UnsetReferredBy() {
	o.ReferredBy.Unset()
}

// GetLanguage returns the Language field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetLanguage() string {
	if o == nil || o.Language.Get() == nil {
		var ret string
		return ret
	}
	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetLanguageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// HasLanguage returns a boolean if a field has been set.
func (o *ApplicationUser) HasLanguage() bool {
	if o != nil && o.Language.IsSet() {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NullableString and assigns it to the Language field.
func (o *ApplicationUser) SetLanguage(v string) {
	o.Language.Set(&v)
}
// SetLanguageNil sets the value for Language to be an explicit nil
func (o *ApplicationUser) SetLanguageNil() {
	o.Language.Set(nil)
}

// UnsetLanguage ensures that no value is present for Language, not even an explicit nil
func (o *ApplicationUser) UnsetLanguage() {
	o.Language.Unset()
}

// GetTheme returns the Theme field value if set, zero value otherwise.
func (o *ApplicationUser) GetTheme() Theme {
	if o == nil || o.Theme == nil {
		var ret Theme
		return ret
	}
	return *o.Theme
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUser) GetThemeOk() (*Theme, bool) {
	if o == nil || o.Theme == nil {
		return nil, false
	}
	return o.Theme, true
}

// HasTheme returns a boolean if a field has been set.
func (o *ApplicationUser) HasTheme() bool {
	if o != nil && o.Theme != nil {
		return true
	}

	return false
}

// SetTheme gets a reference to the given Theme and assigns it to the Theme field.
func (o *ApplicationUser) SetTheme(v Theme) {
	o.Theme = &v
}

// GetDesignation returns the Designation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetDesignation() string {
	if o == nil || o.Designation.Get() == nil {
		var ret string
		return ret
	}
	return *o.Designation.Get()
}

// GetDesignationOk returns a tuple with the Designation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetDesignationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Designation.Get(), o.Designation.IsSet()
}

// HasDesignation returns a boolean if a field has been set.
func (o *ApplicationUser) HasDesignation() bool {
	if o != nil && o.Designation.IsSet() {
		return true
	}

	return false
}

// SetDesignation gets a reference to the given NullableString and assigns it to the Designation field.
func (o *ApplicationUser) SetDesignation(v string) {
	o.Designation.Set(&v)
}
// SetDesignationNil sets the value for Designation to be an explicit nil
func (o *ApplicationUser) SetDesignationNil() {
	o.Designation.Set(nil)
}

// UnsetDesignation ensures that no value is present for Designation, not even an explicit nil
func (o *ApplicationUser) UnsetDesignation() {
	o.Designation.Unset()
}

// GetIsMarkedForDeletion returns the IsMarkedForDeletion field value if set, zero value otherwise.
func (o *ApplicationUser) GetIsMarkedForDeletion() bool {
	if o == nil || o.IsMarkedForDeletion == nil {
		var ret bool
		return ret
	}
	return *o.IsMarkedForDeletion
}

// GetIsMarkedForDeletionOk returns a tuple with the IsMarkedForDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUser) GetIsMarkedForDeletionOk() (*bool, bool) {
	if o == nil || o.IsMarkedForDeletion == nil {
		return nil, false
	}
	return o.IsMarkedForDeletion, true
}

// HasIsMarkedForDeletion returns a boolean if a field has been set.
func (o *ApplicationUser) HasIsMarkedForDeletion() bool {
	if o != nil && o.IsMarkedForDeletion != nil {
		return true
	}

	return false
}

// SetIsMarkedForDeletion gets a reference to the given bool and assigns it to the IsMarkedForDeletion field.
func (o *ApplicationUser) SetIsMarkedForDeletion(v bool) {
	o.IsMarkedForDeletion = &v
}

// GetHardDeleteDate returns the HardDeleteDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetHardDeleteDate() time.Time {
	if o == nil || o.HardDeleteDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.HardDeleteDate.Get()
}

// GetHardDeleteDateOk returns a tuple with the HardDeleteDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetHardDeleteDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HardDeleteDate.Get(), o.HardDeleteDate.IsSet()
}

// HasHardDeleteDate returns a boolean if a field has been set.
func (o *ApplicationUser) HasHardDeleteDate() bool {
	if o != nil && o.HardDeleteDate.IsSet() {
		return true
	}

	return false
}

// SetHardDeleteDate gets a reference to the given NullableTime and assigns it to the HardDeleteDate field.
func (o *ApplicationUser) SetHardDeleteDate(v time.Time) {
	o.HardDeleteDate.Set(&v)
}
// SetHardDeleteDateNil sets the value for HardDeleteDate to be an explicit nil
func (o *ApplicationUser) SetHardDeleteDateNil() {
	o.HardDeleteDate.Set(nil)
}

// UnsetHardDeleteDate ensures that no value is present for HardDeleteDate, not even an explicit nil
func (o *ApplicationUser) UnsetHardDeleteDate() {
	o.HardDeleteDate.Unset()
}

// GetSecurityPin returns the SecurityPin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetSecurityPin() string {
	if o == nil || o.SecurityPin.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecurityPin.Get()
}

// GetSecurityPinOk returns a tuple with the SecurityPin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetSecurityPinOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecurityPin.Get(), o.SecurityPin.IsSet()
}

// HasSecurityPin returns a boolean if a field has been set.
func (o *ApplicationUser) HasSecurityPin() bool {
	if o != nil && o.SecurityPin.IsSet() {
		return true
	}

	return false
}

// SetSecurityPin gets a reference to the given NullableString and assigns it to the SecurityPin field.
func (o *ApplicationUser) SetSecurityPin(v string) {
	o.SecurityPin.Set(&v)
}
// SetSecurityPinNil sets the value for SecurityPin to be an explicit nil
func (o *ApplicationUser) SetSecurityPinNil() {
	o.SecurityPin.Set(nil)
}

// UnsetSecurityPin ensures that no value is present for SecurityPin, not even an explicit nil
func (o *ApplicationUser) UnsetSecurityPin() {
	o.SecurityPin.Unset()
}

// GetPhotoUrl returns the PhotoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetPhotoUrl() string {
	if o == nil || o.PhotoUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.PhotoUrl.Get()
}

// GetPhotoUrlOk returns a tuple with the PhotoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetPhotoUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhotoUrl.Get(), o.PhotoUrl.IsSet()
}

// HasPhotoUrl returns a boolean if a field has been set.
func (o *ApplicationUser) HasPhotoUrl() bool {
	if o != nil && o.PhotoUrl.IsSet() {
		return true
	}

	return false
}

// SetPhotoUrl gets a reference to the given NullableString and assigns it to the PhotoUrl field.
func (o *ApplicationUser) SetPhotoUrl(v string) {
	o.PhotoUrl.Set(&v)
}
// SetPhotoUrlNil sets the value for PhotoUrl to be an explicit nil
func (o *ApplicationUser) SetPhotoUrlNil() {
	o.PhotoUrl.Set(nil)
}

// UnsetPhotoUrl ensures that no value is present for PhotoUrl, not even an explicit nil
func (o *ApplicationUser) UnsetPhotoUrl() {
	o.PhotoUrl.Unset()
}

// GetReferralCode returns the ReferralCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetReferralCode() string {
	if o == nil || o.ReferralCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.ReferralCode.Get()
}

// GetReferralCodeOk returns a tuple with the ReferralCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetReferralCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReferralCode.Get(), o.ReferralCode.IsSet()
}

// HasReferralCode returns a boolean if a field has been set.
func (o *ApplicationUser) HasReferralCode() bool {
	if o != nil && o.ReferralCode.IsSet() {
		return true
	}

	return false
}

// SetReferralCode gets a reference to the given NullableString and assigns it to the ReferralCode field.
func (o *ApplicationUser) SetReferralCode(v string) {
	o.ReferralCode.Set(&v)
}
// SetReferralCodeNil sets the value for ReferralCode to be an explicit nil
func (o *ApplicationUser) SetReferralCodeNil() {
	o.ReferralCode.Set(nil)
}

// UnsetReferralCode ensures that no value is present for ReferralCode, not even an explicit nil
func (o *ApplicationUser) UnsetReferralCode() {
	o.ReferralCode.Unset()
}

// GetRecoveryToken returns the RecoveryToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetRecoveryToken() string {
	if o == nil || o.RecoveryToken.Get() == nil {
		var ret string
		return ret
	}
	return *o.RecoveryToken.Get()
}

// GetRecoveryTokenOk returns a tuple with the RecoveryToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetRecoveryTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecoveryToken.Get(), o.RecoveryToken.IsSet()
}

// HasRecoveryToken returns a boolean if a field has been set.
func (o *ApplicationUser) HasRecoveryToken() bool {
	if o != nil && o.RecoveryToken.IsSet() {
		return true
	}

	return false
}

// SetRecoveryToken gets a reference to the given NullableString and assigns it to the RecoveryToken field.
func (o *ApplicationUser) SetRecoveryToken(v string) {
	o.RecoveryToken.Set(&v)
}
// SetRecoveryTokenNil sets the value for RecoveryToken to be an explicit nil
func (o *ApplicationUser) SetRecoveryTokenNil() {
	o.RecoveryToken.Set(nil)
}

// UnsetRecoveryToken ensures that no value is present for RecoveryToken, not even an explicit nil
func (o *ApplicationUser) UnsetRecoveryToken() {
	o.RecoveryToken.Unset()
}

// GetDigiLockerLastSyncDate returns the DigiLockerLastSyncDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetDigiLockerLastSyncDate() time.Time {
	if o == nil || o.DigiLockerLastSyncDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DigiLockerLastSyncDate.Get()
}

// GetDigiLockerLastSyncDateOk returns a tuple with the DigiLockerLastSyncDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetDigiLockerLastSyncDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DigiLockerLastSyncDate.Get(), o.DigiLockerLastSyncDate.IsSet()
}

// HasDigiLockerLastSyncDate returns a boolean if a field has been set.
func (o *ApplicationUser) HasDigiLockerLastSyncDate() bool {
	if o != nil && o.DigiLockerLastSyncDate.IsSet() {
		return true
	}

	return false
}

// SetDigiLockerLastSyncDate gets a reference to the given NullableTime and assigns it to the DigiLockerLastSyncDate field.
func (o *ApplicationUser) SetDigiLockerLastSyncDate(v time.Time) {
	o.DigiLockerLastSyncDate.Set(&v)
}
// SetDigiLockerLastSyncDateNil sets the value for DigiLockerLastSyncDate to be an explicit nil
func (o *ApplicationUser) SetDigiLockerLastSyncDateNil() {
	o.DigiLockerLastSyncDate.Set(nil)
}

// UnsetDigiLockerLastSyncDate ensures that no value is present for DigiLockerLastSyncDate, not even an explicit nil
func (o *ApplicationUser) UnsetDigiLockerLastSyncDate() {
	o.DigiLockerLastSyncDate.Unset()
}

// GetRefreshTokens returns the RefreshTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationUser) GetRefreshTokens() []RefreshToken {
	if o == nil  {
		var ret []RefreshToken
		return ret
	}
	return o.RefreshTokens
}

// GetRefreshTokensOk returns a tuple with the RefreshTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationUser) GetRefreshTokensOk() (*[]RefreshToken, bool) {
	if o == nil || o.RefreshTokens == nil {
		return nil, false
	}
	return &o.RefreshTokens, true
}

// HasRefreshTokens returns a boolean if a field has been set.
func (o *ApplicationUser) HasRefreshTokens() bool {
	if o != nil && o.RefreshTokens != nil {
		return true
	}

	return false
}

// SetRefreshTokens gets a reference to the given []RefreshToken and assigns it to the RefreshTokens field.
func (o *ApplicationUser) SetRefreshTokens(v []RefreshToken) {
	o.RefreshTokens = v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *ApplicationUser) GetCountry() Country {
	if o == nil || o.Country == nil {
		var ret Country
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUser) GetCountryOk() (*Country, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *ApplicationUser) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given Country and assigns it to the Country field.
func (o *ApplicationUser) SetCountry(v Country) {
	o.Country = &v
}

// GetReferredByUser returns the ReferredByUser field value if set, zero value otherwise.
func (o *ApplicationUser) GetReferredByUser() ApplicationUser {
	if o == nil || o.ReferredByUser == nil {
		var ret ApplicationUser
		return ret
	}
	return *o.ReferredByUser
}

// GetReferredByUserOk returns a tuple with the ReferredByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUser) GetReferredByUserOk() (*ApplicationUser, bool) {
	if o == nil || o.ReferredByUser == nil {
		return nil, false
	}
	return o.ReferredByUser, true
}

// HasReferredByUser returns a boolean if a field has been set.
func (o *ApplicationUser) HasReferredByUser() bool {
	if o != nil && o.ReferredByUser != nil {
		return true
	}

	return false
}

// SetReferredByUser gets a reference to the given ApplicationUser and assigns it to the ReferredByUser field.
func (o *ApplicationUser) SetReferredByUser(v ApplicationUser) {
	o.ReferredByUser = &v
}

func (o ApplicationUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.UserName.IsSet() {
		toSerialize["userName"] = o.UserName.Get()
	}
	if o.NormalizedUserName.IsSet() {
		toSerialize["normalizedUserName"] = o.NormalizedUserName.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.NormalizedEmail.IsSet() {
		toSerialize["normalizedEmail"] = o.NormalizedEmail.Get()
	}
	if o.EmailConfirmed != nil {
		toSerialize["emailConfirmed"] = o.EmailConfirmed
	}
	if o.PasswordHash.IsSet() {
		toSerialize["passwordHash"] = o.PasswordHash.Get()
	}
	if o.SecurityStamp.IsSet() {
		toSerialize["securityStamp"] = o.SecurityStamp.Get()
	}
	if o.ConcurrencyStamp.IsSet() {
		toSerialize["concurrencyStamp"] = o.ConcurrencyStamp.Get()
	}
	if o.PhoneNumber.IsSet() {
		toSerialize["phoneNumber"] = o.PhoneNumber.Get()
	}
	if o.PhoneNumberConfirmed != nil {
		toSerialize["phoneNumberConfirmed"] = o.PhoneNumberConfirmed
	}
	if o.TwoFactorEnabled != nil {
		toSerialize["twoFactorEnabled"] = o.TwoFactorEnabled
	}
	if o.LockoutEnd.IsSet() {
		toSerialize["lockoutEnd"] = o.LockoutEnd.Get()
	}
	if o.LockoutEnabled != nil {
		toSerialize["lockoutEnabled"] = o.LockoutEnabled
	}
	if o.AccessFailedCount != nil {
		toSerialize["accessFailedCount"] = o.AccessFailedCount
	}
	if o.FirstName.IsSet() {
		toSerialize["firstName"] = o.FirstName.Get()
	}
	if o.MiddleName.IsSet() {
		toSerialize["middleName"] = o.MiddleName.Get()
	}
	if o.LastName.IsSet() {
		toSerialize["lastName"] = o.LastName.Get()
	}
	if o.FullName.IsSet() {
		toSerialize["fullName"] = o.FullName.Get()
	}
	if o.Gender != nil {
		toSerialize["gender"] = o.Gender
	}
	if o.DateOfBirth != nil {
		toSerialize["dateOfBirth"] = o.DateOfBirth
	}
	if o.CountryId != nil {
		toSerialize["countryId"] = o.CountryId
	}
	if o.PostCode.IsSet() {
		toSerialize["postCode"] = o.PostCode.Get()
	}
	if o.ReferredBy.IsSet() {
		toSerialize["referredBy"] = o.ReferredBy.Get()
	}
	if o.Language.IsSet() {
		toSerialize["language"] = o.Language.Get()
	}
	if o.Theme != nil {
		toSerialize["theme"] = o.Theme
	}
	if o.Designation.IsSet() {
		toSerialize["designation"] = o.Designation.Get()
	}
	if o.IsMarkedForDeletion != nil {
		toSerialize["isMarkedForDeletion"] = o.IsMarkedForDeletion
	}
	if o.HardDeleteDate.IsSet() {
		toSerialize["hardDeleteDate"] = o.HardDeleteDate.Get()
	}
	if o.SecurityPin.IsSet() {
		toSerialize["securityPin"] = o.SecurityPin.Get()
	}
	if o.PhotoUrl.IsSet() {
		toSerialize["photoUrl"] = o.PhotoUrl.Get()
	}
	if o.ReferralCode.IsSet() {
		toSerialize["referralCode"] = o.ReferralCode.Get()
	}
	if o.RecoveryToken.IsSet() {
		toSerialize["recoveryToken"] = o.RecoveryToken.Get()
	}
	if o.DigiLockerLastSyncDate.IsSet() {
		toSerialize["digiLockerLastSyncDate"] = o.DigiLockerLastSyncDate.Get()
	}
	if o.RefreshTokens != nil {
		toSerialize["refreshTokens"] = o.RefreshTokens
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.ReferredByUser != nil {
		toSerialize["referredByUser"] = o.ReferredByUser
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationUser struct {
	value *ApplicationUser
	isSet bool
}

func (v NullableApplicationUser) Get() *ApplicationUser {
	return v.value
}

func (v *NullableApplicationUser) Set(val *ApplicationUser) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationUser) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationUser(val *ApplicationUser) *NullableApplicationUser {
	return &NullableApplicationUser{value: val, isSet: true}
}

func (v NullableApplicationUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


