/*
My Data My Consent - Developer API

Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.

API version: 1.0
Contact: support@mydatamyconsent.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/mydatamyconsent/sdk

import (
	"encoding/json"
)

// Coding struct for Coding
type Coding struct {
	Code *string `json:"code,omitempty"`
	Display *string `json:"display,omitempty"`
	Id *string `json:"id,omitempty"`
	System *string `json:"system,omitempty"`
}

// NewCoding instantiates a new Coding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoding() *Coding {
	this := Coding{}
	return &this
}

// NewCodingWithDefaults instantiates a new Coding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodingWithDefaults() *Coding {
	this := Coding{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Coding) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Coding) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Coding) SetCode(v string) {
	o.Code = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *Coding) GetDisplay() string {
	if o == nil || o.Display == nil {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetDisplayOk() (*string, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *Coding) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *Coding) SetDisplay(v string) {
	o.Display = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Coding) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Coding) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Coding) SetId(v string) {
	o.Id = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *Coding) GetSystem() string {
	if o == nil || o.System == nil {
		var ret string
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Coding) GetSystemOk() (*string, bool) {
	if o == nil || o.System == nil {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *Coding) HasSystem() bool {
	if o != nil && o.System != nil {
		return true
	}

	return false
}

// SetSystem gets a reference to the given string and assigns it to the System field.
func (o *Coding) SetSystem(v string) {
	o.System = &v
}

func (o Coding) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.System != nil {
		toSerialize["system"] = o.System
	}
	return json.Marshal(toSerialize)
}

type NullableCoding struct {
	value *Coding
	isSet bool
}

func (v NullableCoding) Get() *Coding {
	return v.value
}

func (v *NullableCoding) Set(val *Coding) {
	v.value = val
	v.isSet = true
}

func (v NullableCoding) IsSet() bool {
	return v.isSet
}

func (v *NullableCoding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoding(val *Coding) *NullableCoding {
	return &NullableCoding{value: val, isSet: true}
}

func (v NullableCoding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


